
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000760  00800060  00002cac  00002d20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00003480  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000034b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000398  00000000  00000000  000034ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007a43  00000000  00000000  00003884  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000015a8  00000000  00000000  0000b2c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000396a  00000000  00000000  0000c86f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007fc  00000000  00000000  000101dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a48  00000000  00000000  000109d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004974  00000000  00000000  00011420  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000300  00000000  00000000  00015d94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	17 e0       	ldi	r17, 0x07	; 7
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3c       	cpi	r26, 0xC0	; 192
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	27 e0       	ldi	r18, 0x07	; 7
      78:	a0 ec       	ldi	r26, 0xC0	; 192
      7a:	b7 e0       	ldi	r27, 0x07	; 7
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3c       	cpi	r26, 0xC0	; 192
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 0b 	call	0x169e	; 0x169e <main>
      8a:	0c 94 54 16 	jmp	0x2ca8	; 0x2ca8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <AC_Initialization>:
#include "PINS.h"
#include "LED_Dimmer_Buzzer_Alarm.h"

void AC_Initialization()
{
	set_bit(AC_DIR,AC_PIN1);  // Motor Pin 1
      92:	8b 9a       	sbi	0x11, 3	; 17
	set_bit(AC_DIR,AC_PIN2);  //  Motor Pin 2
      94:	8c 9a       	sbi	0x11, 4	; 17
	clear_bit(AC_PORT,AC_PIN2);
      96:	94 98       	cbi	0x12, 4	; 18
      98:	08 95       	ret

0000009a <AC_Alarm>:
}

void AC_Alarm()
{
	set_bit(BUZZER_PORT,BUZZER_PIN);
      9a:	97 9a       	sbi	0x12, 7	; 18
	toggle_bit(AC_LED_PORT,AC_LED_PIN);
      9c:	98 b3       	in	r25, 0x18	; 24
      9e:	84 e0       	ldi	r24, 0x04	; 4
      a0:	89 27       	eor	r24, r25
      a2:	88 bb       	out	0x18, r24	; 24
      a4:	08 95       	ret

000000a6 <AC_ON>:


void AC_ON()
{
	int Temperature = 0;
	Temperature = ADC_READ(); //Variable to save temperature value
      a6:	0e 94 74 00 	call	0xe8	; 0xe8 <ADC_READ>

	
	if (Temperature < T_min)
      aa:	8b 32       	cpi	r24, 0x2B	; 43
      ac:	91 05       	cpc	r25, r1
      ae:	24 f4       	brge	.+8      	; 0xb8 <AC_ON+0x12>
	{
		clear_bit(AC_PORT,AC_PIN1);
      b0:	93 98       	cbi	0x12, 3	; 18
		clear_bit(BUZZER_PORT,BUZZER_PIN);
      b2:	97 98       	cbi	0x12, 7	; 18
		clear_bit(AC_LED_PORT,AC_LED_PIN);
      b4:	c2 98       	cbi	0x18, 2	; 24
      b6:	08 95       	ret
		
	}
	else if (Temperature > T_max && Temperature < T_crit)
      b8:	9c 01       	movw	r18, r24
      ba:	29 53       	subi	r18, 0x39	; 57
      bc:	31 09       	sbc	r19, r1
      be:	29 31       	cpi	r18, 0x19	; 25
      c0:	31 05       	cpc	r19, r1
      c2:	20 f4       	brcc	.+8      	; 0xcc <AC_ON+0x26>
	{
		set_bit(AC_PORT,AC_PIN1);
      c4:	93 9a       	sbi	0x12, 3	; 18
		clear_bit(BUZZER_PORT,BUZZER_PIN);
      c6:	97 98       	cbi	0x12, 7	; 18
		clear_bit(AC_LED_PORT,AC_LED_PIN);
      c8:	c2 98       	cbi	0x18, 2	; 24
      ca:	08 95       	ret
		
	}
	else if (Temperature > T_crit)
      cc:	83 35       	cpi	r24, 0x53	; 83
      ce:	91 05       	cpc	r25, r1
      d0:	1c f0       	brlt	.+6      	; 0xd8 <AC_ON+0x32>
	{
		clear_bit(AC_PORT,AC_PIN1);
      d2:	93 98       	cbi	0x12, 3	; 18
		AC_Alarm();		// AC led blinks and buzzer ON
      d4:	0e 94 4d 00 	call	0x9a	; 0x9a <AC_Alarm>
      d8:	08 95       	ret

000000da <ADC_Start>:
#include "ADC.h"
#include "Bit_Op.h"

void ADC_Start(int ADC_Channel_Num)
{
	set_bit(ADCSRA,ADEN); // ENABLE ADC
      da:	37 9a       	sbi	0x06, 7	; 6
    set_bit(ADMUX,REFS0); // AVCC WITH EXTERNAL CAPACITOR AT AREF PIN
      dc:	3e 9a       	sbi	0x07, 6	; 7
	ADMUX |= ADC_Channel_Num; // set required pin
      de:	97 b1       	in	r25, 0x07	; 7
      e0:	89 2b       	or	r24, r25
      e2:	87 b9       	out	0x07, r24	; 7
	set_bit(ADCSRA,ADPS2); // pre-scaling division
      e4:	32 9a       	sbi	0x06, 2	; 6
      e6:	08 95       	ret

000000e8 <ADC_READ>:
}

int ADC_READ()
{
	set_bit(ADCSRA,ADSC); // START CONVERSION
      e8:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA &(1<<ADIF))){ } // NO OPERATION WHILE CONVERSTION
      ea:	34 9b       	sbis	0x06, 4	; 6
      ec:	fe cf       	rjmp	.-4      	; 0xea <ADC_READ+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ee:	85 e3       	ldi	r24, 0x35	; 53
      f0:	8a 95       	dec	r24
      f2:	f1 f7       	brne	.-4      	; 0xf0 <ADC_READ+0x8>
      f4:	00 00       	nop
	_delay_us(10);
    return ((int)ADCL+(int)ADCH*256); // type  cast of each register from char to integer and calculating
      f6:	24 b1       	in	r18, 0x04	; 4
      f8:	85 b1       	in	r24, 0x05	; 5
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	98 2f       	mov	r25, r24
      fe:	88 27       	eor	r24, r24
}
     100:	82 0f       	add	r24, r18
     102:	91 1d       	adc	r25, r1
     104:	08 95       	ret

00000106 <__vector_1>:
#include "LCD_Apps.h"



ISR(INT0_vect)
{
     106:	1f 92       	push	r1
     108:	0f 92       	push	r0
     10a:	0f b6       	in	r0, 0x3f	; 63
     10c:	0f 92       	push	r0
     10e:	11 24       	eor	r1, r1
     110:	5f 92       	push	r5
     112:	6f 92       	push	r6
     114:	7f 92       	push	r7
     116:	8f 92       	push	r8
     118:	9f 92       	push	r9
     11a:	af 92       	push	r10
     11c:	bf 92       	push	r11
     11e:	cf 92       	push	r12
     120:	df 92       	push	r13
     122:	ef 92       	push	r14
     124:	ff 92       	push	r15
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	2f 93       	push	r18
     12c:	3f 93       	push	r19
     12e:	4f 93       	push	r20
     130:	5f 93       	push	r21
     132:	6f 93       	push	r22
     134:	7f 93       	push	r23
     136:	8f 93       	push	r24
     138:	9f 93       	push	r25
     13a:	af 93       	push	r26
     13c:	bf 93       	push	r27
     13e:	ef 93       	push	r30
     140:	ff 93       	push	r31
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	cd b7       	in	r28, 0x3d	; 61
     148:	de b7       	in	r29, 0x3e	; 62
     14a:	61 97       	sbiw	r28, 0x11	; 17
     14c:	de bf       	out	0x3e, r29	; 62
     14e:	cd bf       	out	0x3d, r28	; 61
	unsigned char Keypad_Value = 0;
	char user_counter = 0;
     150:	19 82       	std	Y+1, r1	; 0x01
	char username_temp_arr[4];	// array taken from EEPROM to compare
	char password_temp_arr[4];	// array taken from EEPROM to compare
	unsigned char looping_counter = 0;
	unsigned char Compare_Var = 0;
	
	LCD_Welcome_Message();
     152:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <LCD_Welcome_Message>
	
	EEPROM_readByte(Counters_Block,Users_LCD_number_BIT,&user_counter);
     156:	ae 01       	movw	r20, r28
     158:	4f 5f       	subi	r20, 0xFF	; 255
     15a:	5f 4f       	sbci	r21, 0xFF	; 255
     15c:	63 e0       	ldi	r22, 0x03	; 3
     15e:	8e ea       	ldi	r24, 0xAE	; 174
     160:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     164:	8f e3       	ldi	r24, 0x3F	; 63
     166:	9c e9       	ldi	r25, 0x9C	; 156
     168:	01 97       	sbiw	r24, 0x01	; 1
     16a:	f1 f7       	brne	.-4      	; 0x168 <__vector_1+0x62>
     16c:	00 c0       	rjmp	.+0      	; 0x16e <__vector_1+0x68>
     16e:	00 00       	nop
     170:	68 94       	set
     172:	99 24       	eor	r9, r9
     174:	91 f8       	bld	r9, 1
     176:	5e 01       	movw	r10, r28
     178:	96 e0       	ldi	r25, 0x06	; 6
     17a:	a9 0e       	add	r10, r25
     17c:	b1 1c       	adc	r11, r1
				EEPROM_readByte(LCD_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
				_delay_ms(10);
			}
			
			
			if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
     17e:	7a 2c       	mov	r7, r10
     180:	8b 2c       	mov	r8, r11
     182:	01 c0       	rjmp	.+2      	; 0x186 <__vector_1+0x80>
	
	EEPROM_readByte(Counters_Block,Users_LCD_number_BIT,&user_counter);
	_delay_ms(10);
	
	trials = 3;
	while(trials>=1 && trials<=3)
     184:	98 2e       	mov	r9, r24
     186:	66 24       	eor	r6, r6
     188:	63 94       	inc	r6
     18a:	69 0c       	add	r6, r9
	{
			//-----------------	Writing the username -----------------
			LCD_Write_String("Username : ");
     18c:	8d ea       	ldi	r24, 0xAD	; 173
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Display_ON_Cusror_ON_Blink_OFF);
     194:	8e e0       	ldi	r24, 0x0E	; 14
     196:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
     19a:	7e 01       	movw	r14, r28
     19c:	e2 e0       	ldi	r30, 0x02	; 2
     19e:	ee 0e       	add	r14, r30
     1a0:	f1 1c       	adc	r15, r1
			looping_counter = 0;
			while(looping_counter < 4)
			{
				while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
				{
					Keypad_Value = Keypad_Get_Value();
     1a2:	0e 94 36 06 	call	0xc6c	; 0xc6c <Keypad_Get_Value>
     1a6:	18 2f       	mov	r17, r24
			LCD_Write_String("Username : ");
			LCD_Send_CMD(Display_ON_Cusror_ON_Blink_OFF);
			looping_counter = 0;
			while(looping_counter < 4)
			{
				while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
     1a8:	80 ed       	ldi	r24, 0xD0	; 208
     1aa:	81 0f       	add	r24, r17
     1ac:	8a 30       	cpi	r24, 0x0A	; 10
     1ae:	c8 f7       	brcc	.-14     	; 0x1a2 <__vector_1+0x9c>
				{
					Keypad_Value = Keypad_Get_Value();
				}
				
				username_arr[looping_counter] = Keypad_Value;
     1b0:	f7 01       	movw	r30, r14
     1b2:	11 93       	st	Z+, r17
     1b4:	7f 01       	movw	r14, r30
				if(looping_counter == 3)
     1b6:	ea 15       	cp	r30, r10
     1b8:	fb 05       	cpc	r31, r11
     1ba:	39 f5       	brne	.+78     	; 0x20a <__vector_1+0x104>
				{
					LCD_Send_CMD(Display_ON_Cusror_OFF_Blink_OFF);
     1bc:	8c e0       	ldi	r24, 0x0C	; 12
     1be:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
				}
				LCD_Write_Char(Keypad_Value);
     1c2:	81 2f       	mov	r24, r17
     1c4:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <LCD_Write_Char>
     1c8:	ff ef       	ldi	r31, 0xFF	; 255
     1ca:	25 ea       	ldi	r18, 0xA5	; 165
     1cc:	8e e0       	ldi	r24, 0x0E	; 14
     1ce:	f1 50       	subi	r31, 0x01	; 1
     1d0:	20 40       	sbci	r18, 0x00	; 0
     1d2:	80 40       	sbci	r24, 0x00	; 0
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <__vector_1+0xc8>
     1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <__vector_1+0xd2>
     1d8:	00 00       	nop
     1da:	9f ef       	ldi	r25, 0xFF	; 255
     1dc:	e9 e6       	ldi	r30, 0x69	; 105
     1de:	f8 e1       	ldi	r31, 0x18	; 24
     1e0:	91 50       	subi	r25, 0x01	; 1
     1e2:	e0 40       	sbci	r30, 0x00	; 0
     1e4:	f0 40       	sbci	r31, 0x00	; 0
     1e6:	e1 f7       	brne	.-8      	; 0x1e0 <__vector_1+0xda>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <__vector_1+0xe4>
     1ea:	00 00       	nop
				_delay_ms(300);
				looping_counter++;
				Keypad_Value = 0;
			}
			_delay_ms(500);
			LCD_Clear_Screen();
     1ec:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
			looping_counter = 0;
			
			//-----------------	Writing the password -----------------
			
			LCD_Write_String ("Password: ");
     1f0:	80 e7       	ldi	r24, 0x70	; 112
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Display_ON_Cusror_ON_Blink_OFF);
     1f8:	8e e0       	ldi	r24, 0x0E	; 14
     1fa:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
     1fe:	7e 01       	movw	r14, r28
     200:	26 e0       	ldi	r18, 0x06	; 6
     202:	e2 0e       	add	r14, r18
     204:	f1 1c       	adc	r15, r1
				looping_counter++;
				Keypad_Value = 0;
			}
			_delay_ms(500);
			LCD_Clear_Screen();
			looping_counter = 0;
     206:	00 e0       	ldi	r16, 0x00	; 0
     208:	0d c0       	rjmp	.+26     	; 0x224 <__vector_1+0x11e>
				username_arr[looping_counter] = Keypad_Value;
				if(looping_counter == 3)
				{
					LCD_Send_CMD(Display_ON_Cusror_OFF_Blink_OFF);
				}
				LCD_Write_Char(Keypad_Value);
     20a:	81 2f       	mov	r24, r17
     20c:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <LCD_Write_Char>
     210:	8f ef       	ldi	r24, 0xFF	; 255
     212:	95 ea       	ldi	r25, 0xA5	; 165
     214:	ee e0       	ldi	r30, 0x0E	; 14
     216:	81 50       	subi	r24, 0x01	; 1
     218:	90 40       	sbci	r25, 0x00	; 0
     21a:	e0 40       	sbci	r30, 0x00	; 0
     21c:	e1 f7       	brne	.-8      	; 0x216 <__vector_1+0x110>
     21e:	00 c0       	rjmp	.+0      	; 0x220 <__vector_1+0x11a>
     220:	00 00       	nop
     222:	bf cf       	rjmp	.-130    	; 0x1a2 <__vector_1+0x9c>
			
			while(looping_counter < 4)
			{
				while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
				{
					Keypad_Value = Keypad_Get_Value();
     224:	0e 94 36 06 	call	0xc6c	; 0xc6c <Keypad_Get_Value>
     228:	18 2f       	mov	r17, r24
			LCD_Write_String ("Password: ");
			LCD_Send_CMD(Display_ON_Cusror_ON_Blink_OFF);
			
			while(looping_counter < 4)
			{
				while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
     22a:	80 ed       	ldi	r24, 0xD0	; 208
     22c:	81 0f       	add	r24, r17
     22e:	8a 30       	cpi	r24, 0x0A	; 10
     230:	c8 f7       	brcc	.-14     	; 0x224 <__vector_1+0x11e>
				{
					Keypad_Value = Keypad_Get_Value();
				}
				
				password_arr[looping_counter] = Keypad_Value;
     232:	f7 01       	movw	r30, r14
     234:	11 93       	st	Z+, r17
     236:	7f 01       	movw	r14, r30
				if(looping_counter == 3)
     238:	03 30       	cpi	r16, 0x03	; 3
     23a:	01 f5       	brne	.+64     	; 0x27c <__vector_1+0x176>
				{
					LCD_Send_CMD(Display_ON_Cusror_OFF_Blink_OFF);
     23c:	8c e0       	ldi	r24, 0x0C	; 12
     23e:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
				}
				LCD_Write_Char(Keypad_Value);
     242:	81 2f       	mov	r24, r17
     244:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <LCD_Write_Char>
     248:	ff ef       	ldi	r31, 0xFF	; 255
     24a:	27 e8       	ldi	r18, 0x87	; 135
     24c:	83 e1       	ldi	r24, 0x13	; 19
     24e:	f1 50       	subi	r31, 0x01	; 1
     250:	20 40       	sbci	r18, 0x00	; 0
     252:	80 40       	sbci	r24, 0x00	; 0
     254:	e1 f7       	brne	.-8      	; 0x24e <__vector_1+0x148>
     256:	00 c0       	rjmp	.+0      	; 0x258 <__vector_1+0x152>
     258:	00 00       	nop
				_delay_ms(400);
				LCD_Set_Cursor(0,strlen("Password: ") + looping_counter);
     25a:	6d e0       	ldi	r22, 0x0D	; 13
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	0e 94 30 07 	call	0xe60	; 0xe60 <LCD_Set_Cursor>
				LCD_Write_Char('*');
     262:	8a e2       	ldi	r24, 0x2A	; 42
     264:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <LCD_Write_Char>
     268:	9f ef       	ldi	r25, 0xFF	; 255
     26a:	e1 ee       	ldi	r30, 0xE1	; 225
     26c:	f4 e0       	ldi	r31, 0x04	; 4
     26e:	91 50       	subi	r25, 0x01	; 1
     270:	e0 40       	sbci	r30, 0x00	; 0
     272:	f0 40       	sbci	r31, 0x00	; 0
     274:	e1 f7       	brne	.-8      	; 0x26e <__vector_1+0x168>
     276:	00 c0       	rjmp	.+0      	; 0x278 <__vector_1+0x172>
     278:	00 00       	nop
     27a:	21 c0       	rjmp	.+66     	; 0x2be <__vector_1+0x1b8>
				password_arr[looping_counter] = Keypad_Value;
				if(looping_counter == 3)
				{
					LCD_Send_CMD(Display_ON_Cusror_OFF_Blink_OFF);
				}
				LCD_Write_Char(Keypad_Value);
     27c:	81 2f       	mov	r24, r17
     27e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <LCD_Write_Char>
     282:	2f ef       	ldi	r18, 0xFF	; 255
     284:	87 e8       	ldi	r24, 0x87	; 135
     286:	93 e1       	ldi	r25, 0x13	; 19
     288:	21 50       	subi	r18, 0x01	; 1
     28a:	80 40       	sbci	r24, 0x00	; 0
     28c:	90 40       	sbci	r25, 0x00	; 0
     28e:	e1 f7       	brne	.-8      	; 0x288 <__vector_1+0x182>
     290:	00 c0       	rjmp	.+0      	; 0x292 <__vector_1+0x18c>
     292:	00 00       	nop
				_delay_ms(400);
				LCD_Set_Cursor(0,strlen("Password: ") + looping_counter);
     294:	6a e0       	ldi	r22, 0x0A	; 10
     296:	60 0f       	add	r22, r16
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	0e 94 30 07 	call	0xe60	; 0xe60 <LCD_Set_Cursor>
				LCD_Write_Char('*');
     29e:	8a e2       	ldi	r24, 0x2A	; 42
     2a0:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <LCD_Write_Char>
     2a4:	ef ef       	ldi	r30, 0xFF	; 255
     2a6:	f1 ee       	ldi	r31, 0xE1	; 225
     2a8:	24 e0       	ldi	r18, 0x04	; 4
     2aa:	e1 50       	subi	r30, 0x01	; 1
     2ac:	f0 40       	sbci	r31, 0x00	; 0
     2ae:	20 40       	sbci	r18, 0x00	; 0
     2b0:	e1 f7       	brne	.-8      	; 0x2aa <__vector_1+0x1a4>
     2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <__vector_1+0x1ae>
     2b4:	00 00       	nop
				_delay_ms(100);
				looping_counter++;
     2b6:	0f 5f       	subi	r16, 0xFF	; 255
			//-----------------	Writing the password -----------------
			
			LCD_Write_String ("Password: ");
			LCD_Send_CMD(Display_ON_Cusror_ON_Blink_OFF);
			
			while(looping_counter < 4)
     2b8:	04 30       	cpi	r16, 0x04	; 4
     2ba:	09 f0       	breq	.+2      	; 0x2be <__vector_1+0x1b8>
     2bc:	b3 cf       	rjmp	.-154    	; 0x224 <__vector_1+0x11e>
     2be:	8f ef       	ldi	r24, 0xFF	; 255
     2c0:	99 e6       	ldi	r25, 0x69	; 105
     2c2:	e8 e1       	ldi	r30, 0x18	; 24
     2c4:	81 50       	subi	r24, 0x01	; 1
     2c6:	90 40       	sbci	r25, 0x00	; 0
     2c8:	e0 40       	sbci	r30, 0x00	; 0
     2ca:	e1 f7       	brne	.-8      	; 0x2c4 <__vector_1+0x1be>
     2cc:	00 c0       	rjmp	.+0      	; 0x2ce <__vector_1+0x1c8>
     2ce:	00 00       	nop
				_delay_ms(100);
				looping_counter++;
				Keypad_Value = 0;
			}
			_delay_ms(500);
			LCD_Clear_Screen();
     2d0:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
			looping_counter = 0;
		for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
     2d4:	89 81       	ldd	r24, Y+1	; 0x01
     2d6:	81 11       	cpse	r24, r1
     2d8:	4b c0       	rjmp	.+150    	; 0x370 <__vector_1+0x26a>
     2da:	57 c0       	rjmp	.+174    	; 0x38a <__vector_1+0x284>
		{			
			for(char i = 0; i<LOGIN_SIZE; i++)
			{
				EEPROM_readByte(LCD_User_Username_Block,(4*looping_counter)+i,&username_temp_arr[i]);
     2dc:	a6 01       	movw	r20, r12
     2de:	61 2f       	mov	r22, r17
     2e0:	8a ea       	ldi	r24, 0xAA	; 170
     2e2:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
     2e6:	8f e3       	ldi	r24, 0x3F	; 63
     2e8:	9c e9       	ldi	r25, 0x9C	; 156
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <__vector_1+0x1e4>
     2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <__vector_1+0x1ea>
     2f0:	00 00       	nop
				_delay_ms(10);
				EEPROM_readByte(LCD_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
     2f2:	a7 01       	movw	r20, r14
     2f4:	61 2f       	mov	r22, r17
     2f6:	8c ea       	ldi	r24, 0xAC	; 172
     2f8:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
     2fc:	ef e3       	ldi	r30, 0x3F	; 63
     2fe:	fc e9       	ldi	r31, 0x9C	; 156
     300:	31 97       	sbiw	r30, 0x01	; 1
     302:	f1 f7       	brne	.-4      	; 0x300 <__vector_1+0x1fa>
     304:	00 c0       	rjmp	.+0      	; 0x306 <__vector_1+0x200>
     306:	00 00       	nop
     308:	1f 5f       	subi	r17, 0xFF	; 255
     30a:	ff ef       	ldi	r31, 0xFF	; 255
     30c:	cf 1a       	sub	r12, r31
     30e:	df 0a       	sbc	r13, r31
     310:	2f ef       	ldi	r18, 0xFF	; 255
     312:	e2 1a       	sub	r14, r18
     314:	f2 0a       	sbc	r15, r18
			_delay_ms(500);
			LCD_Clear_Screen();
			looping_counter = 0;
		for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
		{			
			for(char i = 0; i<LOGIN_SIZE; i++)
     316:	10 13       	cpse	r17, r16
     318:	e1 cf       	rjmp	.-62     	; 0x2dc <__vector_1+0x1d6>
				EEPROM_readByte(LCD_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
				_delay_ms(10);
			}
			
			
			if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
     31a:	44 e0       	ldi	r20, 0x04	; 4
     31c:	be 01       	movw	r22, r28
     31e:	66 5f       	subi	r22, 0xF6	; 246
     320:	7f 4f       	sbci	r23, 0xFF	; 255
     322:	ce 01       	movw	r24, r28
     324:	02 96       	adiw	r24, 0x02	; 2
     326:	0e 94 05 05 	call	0xa0a	; 0xa0a <Compare_Passwords>
     32a:	81 33       	cpi	r24, 0x31	; 49
     32c:	d9 f4       	brne	.+54     	; 0x364 <__vector_1+0x25e>
     32e:	44 e0       	ldi	r20, 0x04	; 4
     330:	be 01       	movw	r22, r28
     332:	62 5f       	subi	r22, 0xF2	; 242
     334:	7f 4f       	sbci	r23, 0xFF	; 255
     336:	87 2d       	mov	r24, r7
     338:	98 2d       	mov	r25, r8
     33a:	0e 94 05 05 	call	0xa0a	; 0xa0a <Compare_Passwords>
     33e:	81 33       	cpi	r24, 0x31	; 49
     340:	89 f4       	brne	.+34     	; 0x364 <__vector_1+0x25e>
			{
				LCD_Write_String("Access Granted");
     342:	8b e7       	ldi	r24, 0x7B	; 123
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
     34a:	8f ef       	ldi	r24, 0xFF	; 255
     34c:	99 e6       	ldi	r25, 0x69	; 105
     34e:	e8 e1       	ldi	r30, 0x18	; 24
     350:	81 50       	subi	r24, 0x01	; 1
     352:	90 40       	sbci	r25, 0x00	; 0
     354:	e0 40       	sbci	r30, 0x00	; 0
     356:	e1 f7       	brne	.-8      	; 0x350 <__vector_1+0x24a>
     358:	00 c0       	rjmp	.+0      	; 0x35a <__vector_1+0x254>
     35a:	00 00       	nop
				_delay_ms(500);
				LCD_Clear_Screen();
     35c:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
     360:	96 2c       	mov	r9, r6
     362:	32 c0       	rjmp	.+100    	; 0x3c8 <__vector_1+0x2c2>
				Keypad_Value = 0;
			}
			_delay_ms(500);
			LCD_Clear_Screen();
			looping_counter = 0;
		for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
     364:	53 94       	inc	r5
     366:	10 2f       	mov	r17, r16
     368:	89 81       	ldd	r24, Y+1	; 0x01
     36a:	58 16       	cp	r5, r24
     36c:	18 f0       	brcs	.+6      	; 0x374 <__vector_1+0x26e>
     36e:	0d c0       	rjmp	.+26     	; 0x38a <__vector_1+0x284>
     370:	10 e0       	ldi	r17, 0x00	; 0
     372:	51 2c       	mov	r5, r1
     374:	6e 01       	movw	r12, r28
     376:	fa e0       	ldi	r31, 0x0A	; 10
     378:	cf 0e       	add	r12, r31
     37a:	d1 1c       	adc	r13, r1
     37c:	7e 01       	movw	r14, r28
     37e:	2e e0       	ldi	r18, 0x0E	; 14
     380:	e2 0e       	add	r14, r18
     382:	f1 1c       	adc	r15, r1
     384:	04 e0       	ldi	r16, 0x04	; 4
     386:	01 0f       	add	r16, r17
     388:	a9 cf       	rjmp	.-174    	; 0x2dc <__vector_1+0x1d6>

		if(Compare_Var == 0)
		{
			trials--;
			
			LCD_Write_String("Access Denied");
     38a:	8a e8       	ldi	r24, 0x8A	; 138
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
     392:	80 ec       	ldi	r24, 0xC0	; 192
     394:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			
			LCD_Write_String("Trials Left : ");
     398:	88 e9       	ldi	r24, 0x98	; 152
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Write_Char(trials+0x30);
     3a0:	80 e3       	ldi	r24, 0x30	; 48
     3a2:	89 0d       	add	r24, r9
     3a4:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <LCD_Write_Char>
     3a8:	8f ef       	ldi	r24, 0xFF	; 255
     3aa:	99 e6       	ldi	r25, 0x69	; 105
     3ac:	e8 e1       	ldi	r30, 0x18	; 24
     3ae:	81 50       	subi	r24, 0x01	; 1
     3b0:	90 40       	sbci	r25, 0x00	; 0
     3b2:	e0 40       	sbci	r30, 0x00	; 0
     3b4:	e1 f7       	brne	.-8      	; 0x3ae <__vector_1+0x2a8>
     3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <__vector_1+0x2b2>
     3b8:	00 00       	nop
			
			_delay_ms(500);
			LCD_Clear_Screen();
     3ba:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
	
	EEPROM_readByte(Counters_Block,Users_LCD_number_BIT,&user_counter);
	_delay_ms(10);
	
	trials = 3;
	while(trials>=1 && trials<=3)
     3be:	8f ef       	ldi	r24, 0xFF	; 255
     3c0:	89 0d       	add	r24, r9
     3c2:	83 30       	cpi	r24, 0x03	; 3
     3c4:	08 f4       	brcc	.+2      	; 0x3c8 <__vector_1+0x2c2>
     3c6:	de ce       	rjmp	.-580    	; 0x184 <__vector_1+0x7e>
			break;
		}

	}
			
	if(trials == 0)
     3c8:	91 10       	cpse	r9, r1
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <__vector_1+0x2ca>
	{
		Alarm_On ();
     3cc:	0e 94 10 0b 	call	0x1620	; 0x1620 <Alarm_On>
	}		
	
	LCD_User_Interfacing();
     3d0:	0e 94 9c 09 	call	0x1338	; 0x1338 <LCD_User_Interfacing>
     3d4:	ff ef       	ldi	r31, 0xFF	; 255
     3d6:	20 e7       	ldi	r18, 0x70	; 112
     3d8:	82 e0       	ldi	r24, 0x02	; 2
     3da:	f1 50       	subi	r31, 0x01	; 1
     3dc:	20 40       	sbci	r18, 0x00	; 0
     3de:	80 40       	sbci	r24, 0x00	; 0
     3e0:	e1 f7       	brne	.-8      	; 0x3da <__vector_1+0x2d4>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <__vector_1+0x2de>
     3e4:	00 00       	nop
	_delay_ms(50);
}
     3e6:	61 96       	adiw	r28, 0x11	; 17
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	f8 94       	cli
     3ec:	de bf       	out	0x3e, r29	; 62
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	cd bf       	out	0x3d, r28	; 61
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	ff 91       	pop	r31
     3f8:	ef 91       	pop	r30
     3fa:	bf 91       	pop	r27
     3fc:	af 91       	pop	r26
     3fe:	9f 91       	pop	r25
     400:	8f 91       	pop	r24
     402:	7f 91       	pop	r23
     404:	6f 91       	pop	r22
     406:	5f 91       	pop	r21
     408:	4f 91       	pop	r20
     40a:	3f 91       	pop	r19
     40c:	2f 91       	pop	r18
     40e:	1f 91       	pop	r17
     410:	0f 91       	pop	r16
     412:	ff 90       	pop	r15
     414:	ef 90       	pop	r14
     416:	df 90       	pop	r13
     418:	cf 90       	pop	r12
     41a:	bf 90       	pop	r11
     41c:	af 90       	pop	r10
     41e:	9f 90       	pop	r9
     420:	8f 90       	pop	r8
     422:	7f 90       	pop	r7
     424:	6f 90       	pop	r6
     426:	5f 90       	pop	r5
     428:	0f 90       	pop	r0
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	0f 90       	pop	r0
     42e:	1f 90       	pop	r1
     430:	18 95       	reti

00000432 <App_Initialization>:



void App_Initialization()
{
	LCD_Init();
     432:	0e 94 ac 06 	call	0xd58	; 0xd58 <LCD_Init>
	Keypad_Init();
     436:	0e 94 25 06 	call	0xc4a	; 0xc4a <Keypad_Init>
	UART_Init(freq_16MHz_baud_9600);
     43a:	87 e6       	ldi	r24, 0x67	; 103
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <UART_Init>
	Servo_Initialization();
     442:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <Servo_Initialization>
	LED_START();
     446:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <LED_START>
	DIMMER_Init();
     44a:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIMMER_Init>
	BUZZER_START();
     44e:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <BUZZER_START>
	ADC_Start(ADC_Channel);
     452:	83 e0       	ldi	r24, 0x03	; 3
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	0e 94 6d 00 	call	0xda	; 0xda <ADC_Start>
	Sensor_ON();
     45a:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <Sensor_ON>
	AC_Initialization();
     45e:	0e 94 49 00 	call	0x92	; 0x92 <AC_Initialization>
	Interrupt_Start();
     462:	0e 94 19 06 	call	0xc32	; 0xc32 <Interrupt_Start>
	EEPROM_Initialization();
     466:	0e 94 60 04 	call	0x8c0	; 0x8c0 <EEPROM_Initialization>
     46a:	08 95       	ret

0000046c <App>:
	
	
// -------------------------->	App Function < ----------------------------------//

void App()
{
     46c:	2f 92       	push	r2
     46e:	3f 92       	push	r3
     470:	4f 92       	push	r4
     472:	5f 92       	push	r5
     474:	6f 92       	push	r6
     476:	7f 92       	push	r7
     478:	8f 92       	push	r8
     47a:	9f 92       	push	r9
     47c:	af 92       	push	r10
     47e:	bf 92       	push	r11
     480:	cf 92       	push	r12
     482:	df 92       	push	r13
     484:	ef 92       	push	r14
     486:	ff 92       	push	r15
     488:	0f 93       	push	r16
     48a:	1f 93       	push	r17
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
     494:	63 97       	sbiw	r28, 0x13	; 19
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	f8 94       	cli
     49a:	de bf       	out	0x3e, r29	; 62
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	cd bf       	out	0x3d, r28	; 61
	unsigned char uart_var = 0;
	unsigned char Mode = 0;
	char admin_counter = 0;
     4a0:	19 82       	std	Y+1, r1	; 0x01
	char user_counter = 0;
     4a2:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char looping_counter = 0;
	unsigned char Compare_Var = 0;
	
	
	
	Mode = UART_Mode_Choice();
     4a4:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <UART_Mode_Choice>
	
	if(Mode == '1')		// Admin Selection
     4a8:	81 33       	cpi	r24, 0x31	; 49
     4aa:	09 f0       	breq	.+2      	; 0x4ae <App+0x42>
     4ac:	0d c1       	rjmp	.+538    	; 0x6c8 <App+0x25c>
	{
		EEPROM_readByte(Counters_Block,Admins_number_BIT,&admin_counter);
     4ae:	ae 01       	movw	r20, r28
     4b0:	4f 5f       	subi	r20, 0xFF	; 255
     4b2:	5f 4f       	sbci	r21, 0xFF	; 255
     4b4:	61 e0       	ldi	r22, 0x01	; 1
     4b6:	8e ea       	ldi	r24, 0xAE	; 174
     4b8:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
     4bc:	8f e3       	ldi	r24, 0x3F	; 63
     4be:	9c e9       	ldi	r25, 0x9C	; 156
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	f1 f7       	brne	.-4      	; 0x4c0 <App+0x54>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <App+0x5a>
     4c6:	00 00       	nop
     4c8:	68 94       	set
     4ca:	77 24       	eor	r7, r7
     4cc:	71 f8       	bld	r7, 1
     4ce:	4e 01       	movw	r8, r28
     4d0:	97 e0       	ldi	r25, 0x07	; 7
     4d2:	89 0e       	add	r8, r25
     4d4:	91 1c       	adc	r9, r1
     4d6:	5e 01       	movw	r10, r28
     4d8:	eb e0       	ldi	r30, 0x0B	; 11
     4da:	ae 0e       	add	r10, r30
     4dc:	b1 1c       	adc	r11, r1
     4de:	01 c0       	rjmp	.+2      	; 0x4e2 <App+0x76>
		_delay_ms(10);
		trials = 3;
		while(trials>=1 && trials<=3)
     4e0:	78 2e       	mov	r7, r24
     4e2:	66 24       	eor	r6, r6
     4e4:	63 94       	inc	r6
     4e6:	67 0c       	add	r6, r7
		{
				//----------------	Writing the username -----------------//
				UART_Send_String("Enter Username : ");
     4e8:	87 ea       	ldi	r24, 0xA7	; 167
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
     4f0:	7e 01       	movw	r14, r28
     4f2:	f3 e0       	ldi	r31, 0x03	; 3
     4f4:	ef 0e       	add	r14, r31
     4f6:	f1 1c       	adc	r15, r1
				while(looping_counter < LOGIN_SIZE)
				{
					uart_var = 0;
					while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
					{
						uart_var = UART_Receive();
     4f8:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
     4fc:	18 2f       	mov	r17, r24
						UART_Transmit(uart_var);
     4fe:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				UART_Send_String("Enter Username : ");
				looping_counter = 0;
				while(looping_counter < LOGIN_SIZE)
				{
					uart_var = 0;
					while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
     502:	80 ed       	ldi	r24, 0xD0	; 208
     504:	81 0f       	add	r24, r17
     506:	8a 30       	cpi	r24, 0x0A	; 10
     508:	b8 f7       	brcc	.-18     	; 0x4f8 <App+0x8c>
					{
						uart_var = UART_Receive();
						UART_Transmit(uart_var);
					}
					username_arr[looping_counter] = uart_var;
     50a:	f7 01       	movw	r30, r14
     50c:	11 93       	st	Z+, r17
     50e:	7f 01       	movw	r14, r30
		while(trials>=1 && trials<=3)
		{
				//----------------	Writing the username -----------------//
				UART_Send_String("Enter Username : ");
				looping_counter = 0;
				while(looping_counter < LOGIN_SIZE)
     510:	8e 16       	cp	r8, r30
     512:	9f 06       	cpc	r9, r31
     514:	89 f7       	brne	.-30     	; 0x4f8 <App+0x8c>
					}
					username_arr[looping_counter] = uart_var;
					looping_counter++;
				}
				looping_counter = 0;
				UART_Transmit('\r');
     516:	8d e0       	ldi	r24, 0x0D	; 13
     518:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				
				//-----------------	Writing the password -----------------//
				UART_Send_String("Enter Password : ");
     51c:	89 eb       	ldi	r24, 0xB9	; 185
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
     524:	7e 01       	movw	r14, r28
     526:	f7 e0       	ldi	r31, 0x07	; 7
     528:	ef 0e       	add	r14, r31
     52a:	f1 1c       	adc	r15, r1
				while(looping_counter < LOGIN_SIZE)
				{
					uart_var = 0;
					while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
					{
						uart_var = UART_Receive();
     52c:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
     530:	18 2f       	mov	r17, r24
						UART_Transmit(uart_var);
     532:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				UART_Send_String("Enter Password : ");

				while(looping_counter < LOGIN_SIZE)
				{
					uart_var = 0;
					while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
     536:	80 ed       	ldi	r24, 0xD0	; 208
     538:	81 0f       	add	r24, r17
     53a:	8a 30       	cpi	r24, 0x0A	; 10
     53c:	b8 f7       	brcc	.-18     	; 0x52c <App+0xc0>
					{
						uart_var = UART_Receive();
						UART_Transmit(uart_var);
					}
					
					password_arr[looping_counter] = uart_var;
     53e:	f7 01       	movw	r30, r14
     540:	11 93       	st	Z+, r17
     542:	7f 01       	movw	r14, r30
				UART_Transmit('\r');
				
				//-----------------	Writing the password -----------------//
				UART_Send_String("Enter Password : ");

				while(looping_counter < LOGIN_SIZE)
     544:	ea 15       	cp	r30, r10
     546:	fb 05       	cpc	r31, r11
     548:	89 f7       	brne	.-30     	; 0x52c <App+0xc0>
					
					password_arr[looping_counter] = uart_var;
					looping_counter++;
				}
				looping_counter = 0;
				UART_Transmit('\r');	
     54a:	8d e0       	ldi	r24, 0x0D	; 13
     54c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				
				
			EEPROM_readDatastream(Main_Admin_Block,0,username_temp_arr,LOGIN_SIZE);
     550:	24 e0       	ldi	r18, 0x04	; 4
     552:	a5 01       	movw	r20, r10
     554:	60 e0       	ldi	r22, 0x00	; 0
     556:	80 ea       	ldi	r24, 0xA0	; 160
     558:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <EEPROM_readDatastream>
     55c:	8f e3       	ldi	r24, 0x3F	; 63
     55e:	9c e9       	ldi	r25, 0x9C	; 156
     560:	01 97       	sbiw	r24, 0x01	; 1
     562:	f1 f7       	brne	.-4      	; 0x560 <App+0xf4>
     564:	00 c0       	rjmp	.+0      	; 0x566 <App+0xfa>
     566:	00 00       	nop
			_delay_ms(10);
			EEPROM_readDatastream(Main_Admin_Block,8,password_temp_arr,LOGIN_SIZE);
     568:	24 e0       	ldi	r18, 0x04	; 4
     56a:	ae 01       	movw	r20, r28
     56c:	41 5f       	subi	r20, 0xF1	; 241
     56e:	5f 4f       	sbci	r21, 0xFF	; 255
     570:	68 e0       	ldi	r22, 0x08	; 8
     572:	80 ea       	ldi	r24, 0xA0	; 160
     574:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <EEPROM_readDatastream>
     578:	ef e3       	ldi	r30, 0x3F	; 63
     57a:	fc e9       	ldi	r31, 0x9C	; 156
     57c:	31 97       	sbiw	r30, 0x01	; 1
     57e:	f1 f7       	brne	.-4      	; 0x57c <App+0x110>
     580:	00 c0       	rjmp	.+0      	; 0x582 <App+0x116>
     582:	00 00       	nop
			_delay_ms(10);
			
			if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))	// The loggedin admin is the main admin
     584:	44 e0       	ldi	r20, 0x04	; 4
     586:	b5 01       	movw	r22, r10
     588:	ce 01       	movw	r24, r28
     58a:	03 96       	adiw	r24, 0x03	; 3
     58c:	0e 94 05 05 	call	0xa0a	; 0xa0a <Compare_Passwords>
     590:	81 33       	cpi	r24, 0x31	; 49
     592:	21 f0       	breq	.+8      	; 0x59c <App+0x130>
				UART_Transmit('\r');
				Compare_Var = 1;
			}
			else
			{
				for (looping_counter = 0; looping_counter < admin_counter; looping_counter++)
     594:	89 81       	ldd	r24, Y+1	; 0x01
     596:	81 11       	cpse	r24, r1
     598:	66 c0       	rjmp	.+204    	; 0x666 <App+0x1fa>
     59a:	72 c0       	rjmp	.+228    	; 0x680 <App+0x214>
			EEPROM_readDatastream(Main_Admin_Block,0,username_temp_arr,LOGIN_SIZE);
			_delay_ms(10);
			EEPROM_readDatastream(Main_Admin_Block,8,password_temp_arr,LOGIN_SIZE);
			_delay_ms(10);
			
			if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))	// The loggedin admin is the main admin
     59c:	44 e0       	ldi	r20, 0x04	; 4
     59e:	be 01       	movw	r22, r28
     5a0:	61 5f       	subi	r22, 0xF1	; 241
     5a2:	7f 4f       	sbci	r23, 0xFF	; 255
     5a4:	c4 01       	movw	r24, r8
     5a6:	0e 94 05 05 	call	0xa0a	; 0xa0a <Compare_Passwords>
     5aa:	81 33       	cpi	r24, 0x31	; 49
     5ac:	99 f7       	brne	.-26     	; 0x594 <App+0x128>
			{
				UART_Transmit('\r');
     5ae:	8d e0       	ldi	r24, 0x0D	; 13
     5b0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				UART_Transmit('\r');
     5b4:	8d e0       	ldi	r24, 0x0D	; 13
     5b6:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				UART_Send_String("WELCOME BOSS");	// this message is displayed only for the main admin
     5ba:	8b ec       	ldi	r24, 0xCB	; 203
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
				UART_Transmit('\r');
     5c2:	8d e0       	ldi	r24, 0x0D	; 13
     5c4:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				UART_Transmit('\r');
     5c8:	8d e0       	ldi	r24, 0x0D	; 13
     5ca:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				Compare_Var = 1;
     5ce:	5d c1       	rjmp	.+698    	; 0x88a <__stack+0x2b>
			{
				for (looping_counter = 0; looping_counter < admin_counter; looping_counter++)
				{
					for(char i = 0; i<LOGIN_SIZE; i++)
					{
						EEPROM_readByte(Admin_Username_Block,(4*looping_counter)+i,&username_temp_arr[i]);
     5d0:	a6 01       	movw	r20, r12
     5d2:	61 2f       	mov	r22, r17
     5d4:	82 ea       	ldi	r24, 0xA2	; 162
     5d6:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
     5da:	8f e3       	ldi	r24, 0x3F	; 63
     5dc:	9c e9       	ldi	r25, 0x9C	; 156
     5de:	01 97       	sbiw	r24, 0x01	; 1
     5e0:	f1 f7       	brne	.-4      	; 0x5de <App+0x172>
     5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <App+0x178>
     5e4:	00 00       	nop
						_delay_ms(10);
						EEPROM_readByte(Admin_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
     5e6:	a7 01       	movw	r20, r14
     5e8:	61 2f       	mov	r22, r17
     5ea:	84 ea       	ldi	r24, 0xA4	; 164
     5ec:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
     5f0:	ef e3       	ldi	r30, 0x3F	; 63
     5f2:	fc e9       	ldi	r31, 0x9C	; 156
     5f4:	31 97       	sbiw	r30, 0x01	; 1
     5f6:	f1 f7       	brne	.-4      	; 0x5f4 <App+0x188>
     5f8:	00 c0       	rjmp	.+0      	; 0x5fa <App+0x18e>
     5fa:	00 00       	nop
     5fc:	1f 5f       	subi	r17, 0xFF	; 255
     5fe:	ff ef       	ldi	r31, 0xFF	; 255
     600:	cf 1a       	sub	r12, r31
     602:	df 0a       	sbc	r13, r31
     604:	8f ef       	ldi	r24, 0xFF	; 255
     606:	e8 1a       	sub	r14, r24
     608:	f8 0a       	sbc	r15, r24
			}
			else
			{
				for (looping_counter = 0; looping_counter < admin_counter; looping_counter++)
				{
					for(char i = 0; i<LOGIN_SIZE; i++)
     60a:	01 13       	cpse	r16, r17
     60c:	e1 cf       	rjmp	.-62     	; 0x5d0 <App+0x164>
						EEPROM_readByte(Admin_Username_Block,(4*looping_counter)+i,&username_temp_arr[i]);
						_delay_ms(10);
						EEPROM_readByte(Admin_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
						_delay_ms(10);
					}
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
     60e:	44 e0       	ldi	r20, 0x04	; 4
     610:	b5 01       	movw	r22, r10
     612:	ce 01       	movw	r24, r28
     614:	03 96       	adiw	r24, 0x03	; 3
     616:	0e 94 05 05 	call	0xa0a	; 0xa0a <Compare_Passwords>
     61a:	81 33       	cpi	r24, 0x31	; 49
     61c:	f1 f4       	brne	.+60     	; 0x65a <App+0x1ee>
     61e:	44 e0       	ldi	r20, 0x04	; 4
     620:	be 01       	movw	r22, r28
     622:	61 5f       	subi	r22, 0xF1	; 241
     624:	7f 4f       	sbci	r23, 0xFF	; 255
     626:	c4 01       	movw	r24, r8
     628:	0e 94 05 05 	call	0xa0a	; 0xa0a <Compare_Passwords>
     62c:	81 33       	cpi	r24, 0x31	; 49
     62e:	a9 f4       	brne	.+42     	; 0x65a <App+0x1ee>
					{
						UART_Send_String("Access Granted");
     630:	8b e7       	ldi	r24, 0x7B	; 123
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
						UART_Transmit('\r');
     638:	8d e0       	ldi	r24, 0x0D	; 13
     63a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
						UART_Transmit('\r');
     63e:	8d e0       	ldi	r24, 0x0D	; 13
     640:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
						UART_Send_String("WELCOME Admin");	
     644:	88 ed       	ldi	r24, 0xD8	; 216
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
						UART_Transmit('\r');
     64c:	8d e0       	ldi	r24, 0x0D	; 13
     64e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
						UART_Transmit('\r');
     652:	8d e0       	ldi	r24, 0x0D	; 13
     654:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
						Compare_Var = 1;
						break;
     658:	18 c1       	rjmp	.+560    	; 0x88a <__stack+0x2b>
				UART_Transmit('\r');
				Compare_Var = 1;
			}
			else
			{
				for (looping_counter = 0; looping_counter < admin_counter; looping_counter++)
     65a:	53 94       	inc	r5
     65c:	10 2f       	mov	r17, r16
     65e:	89 81       	ldd	r24, Y+1	; 0x01
     660:	58 16       	cp	r5, r24
     662:	18 f0       	brcs	.+6      	; 0x66a <App+0x1fe>
     664:	0d c0       	rjmp	.+26     	; 0x680 <App+0x214>
     666:	10 e0       	ldi	r17, 0x00	; 0
     668:	51 2c       	mov	r5, r1
     66a:	6e 01       	movw	r12, r28
     66c:	9b e0       	ldi	r25, 0x0B	; 11
     66e:	c9 0e       	add	r12, r25
     670:	d1 1c       	adc	r13, r1
     672:	7e 01       	movw	r14, r28
     674:	ef e0       	ldi	r30, 0x0F	; 15
     676:	ee 0e       	add	r14, r30
     678:	f1 1c       	adc	r15, r1
     67a:	04 e0       	ldi	r16, 0x04	; 4
     67c:	01 0f       	add	r16, r17
     67e:	a8 cf       	rjmp	.-176    	; 0x5d0 <App+0x164>
			}	
			
			if(Compare_Var == 0)
			{
				trials--;
				UART_Send_String("Access Denied");
     680:	8a e8       	ldi	r24, 0x8A	; 138
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
				UART_Transmit('\r');
     688:	8d e0       	ldi	r24, 0x0D	; 13
     68a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				UART_Send_String("Trials Left before initializing Alarm : ");
     68e:	86 ee       	ldi	r24, 0xE6	; 230
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
				UART_Transmit(trials+0x30);
     696:	80 e3       	ldi	r24, 0x30	; 48
     698:	87 0d       	add	r24, r7
     69a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				UART_Transmit('\r');
     69e:	8d e0       	ldi	r24, 0x0D	; 13
     6a0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				UART_Transmit('\r');
     6a4:	8d e0       	ldi	r24, 0x0D	; 13
     6a6:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				UART_Transmit('\r');
     6aa:	8d e0       	ldi	r24, 0x0D	; 13
     6ac:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
	if(Mode == '1')		// Admin Selection
	{
		EEPROM_readByte(Counters_Block,Admins_number_BIT,&admin_counter);
		_delay_ms(10);
		trials = 3;
		while(trials>=1 && trials<=3)
     6b0:	8f ef       	ldi	r24, 0xFF	; 255
     6b2:	87 0d       	add	r24, r7
     6b4:	83 30       	cpi	r24, 0x03	; 3
     6b6:	08 f4       	brcc	.+2      	; 0x6ba <App+0x24e>
     6b8:	13 cf       	rjmp	.-474    	; 0x4e0 <App+0x74>
				break;
			}

		}

		if(trials == 0)
     6ba:	71 10       	cpse	r7, r1
     6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <App+0x256>
		{
			Alarm_On ();
     6be:	0e 94 10 0b 	call	0x1620	; 0x1620 <Alarm_On>
		}

		UART_Admin_Interfacing();
     6c2:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <UART_Admin_Interfacing>
     6c6:	e3 c0       	rjmp	.+454    	; 0x88e <__stack+0x2f>
	
	}
	else		// User
	{
		
			EEPROM_readByte(Counters_Block,Users_UART_number_BIT,&user_counter);
     6c8:	ae 01       	movw	r20, r28
     6ca:	4e 5f       	subi	r20, 0xFE	; 254
     6cc:	5f 4f       	sbci	r21, 0xFF	; 255
     6ce:	62 e0       	ldi	r22, 0x02	; 2
     6d0:	8e ea       	ldi	r24, 0xAE	; 174
     6d2:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
     6d6:	8f e3       	ldi	r24, 0x3F	; 63
     6d8:	9c e9       	ldi	r25, 0x9C	; 156
     6da:	01 97       	sbiw	r24, 0x01	; 1
     6dc:	f1 f7       	brne	.-4      	; 0x6da <App+0x26e>
     6de:	00 c0       	rjmp	.+0      	; 0x6e0 <App+0x274>
     6e0:	00 00       	nop
     6e2:	68 94       	set
     6e4:	77 24       	eor	r7, r7
     6e6:	71 f8       	bld	r7, 1
     6e8:	5e 01       	movw	r10, r28
     6ea:	97 e0       	ldi	r25, 0x07	; 7
     6ec:	a9 0e       	add	r10, r25
     6ee:	b1 1c       	adc	r11, r1
     6f0:	4e 01       	movw	r8, r28
     6f2:	eb e0       	ldi	r30, 0x0B	; 11
     6f4:	8e 0e       	add	r8, r30
     6f6:	91 1c       	adc	r9, r1
						_delay_ms(10);
						EEPROM_readByte(UART_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
						_delay_ms(10);
					}
					
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
     6f8:	c8 2c       	mov	r12, r8
     6fa:	d9 2c       	mov	r13, r9
     6fc:	6a 2c       	mov	r6, r10
     6fe:	5b 2c       	mov	r5, r11
     700:	01 c0       	rjmp	.+2      	; 0x704 <App+0x298>
		
			EEPROM_readByte(Counters_Block,Users_UART_number_BIT,&user_counter);
			_delay_ms(10);
			trials = 3;
			
			while(trials>=1 && trials<=3)
     702:	78 2e       	mov	r7, r24
     704:	f1 e0       	ldi	r31, 0x01	; 1
     706:	f7 0d       	add	r31, r7
     708:	fb 8b       	std	Y+19, r31	; 0x13
			{
					//----------------	Writing the username -----------------//
					UART_Send_String("Enter Username : ");
     70a:	87 ea       	ldi	r24, 0xA7	; 167
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
     712:	7e 01       	movw	r14, r28
     714:	83 e0       	ldi	r24, 0x03	; 3
     716:	e8 0e       	add	r14, r24
     718:	f1 1c       	adc	r15, r1
					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
						{
							uart_var = UART_Receive();
     71a:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
     71e:	18 2f       	mov	r17, r24
							UART_Transmit(uart_var);
     720:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					looping_counter = 0;
					
					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
     724:	80 ed       	ldi	r24, 0xD0	; 208
     726:	81 0f       	add	r24, r17
     728:	8a 30       	cpi	r24, 0x0A	; 10
     72a:	b8 f7       	brcc	.-18     	; 0x71a <App+0x2ae>
						{
							uart_var = UART_Receive();
							UART_Transmit(uart_var);
						}
						
						username_arr[looping_counter] = uart_var;
     72c:	f7 01       	movw	r30, r14
     72e:	11 93       	st	Z+, r17
     730:	7f 01       	movw	r14, r30
					//----------------	Writing the username -----------------//
					UART_Send_String("Enter Username : ");
					
					looping_counter = 0;
					
					while(looping_counter < LOGIN_SIZE)
     732:	ae 16       	cp	r10, r30
     734:	bf 06       	cpc	r11, r31
     736:	89 f7       	brne	.-30     	; 0x71a <App+0x2ae>
						
						username_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
					UART_Transmit('\r');
     738:	8d e0       	ldi	r24, 0x0D	; 13
     73a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					
					//-----------------	Writing the password -----------------//
					UART_Send_String("Enter Password : ");
     73e:	89 eb       	ldi	r24, 0xB9	; 185
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
     746:	7e 01       	movw	r14, r28
     748:	f7 e0       	ldi	r31, 0x07	; 7
     74a:	ef 0e       	add	r14, r31
     74c:	f1 1c       	adc	r15, r1
					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
						{
							uart_var = UART_Receive();
     74e:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
     752:	18 2f       	mov	r17, r24
							UART_Transmit(uart_var);
     754:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Send_String("Enter Password : ");

					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
     758:	80 ed       	ldi	r24, 0xD0	; 208
     75a:	81 0f       	add	r24, r17
     75c:	8a 30       	cpi	r24, 0x0A	; 10
     75e:	b8 f7       	brcc	.-18     	; 0x74e <App+0x2e2>
						{
							uart_var = UART_Receive();
							UART_Transmit(uart_var);
						}
						
						password_arr[looping_counter] = uart_var;
     760:	f7 01       	movw	r30, r14
     762:	11 93       	st	Z+, r17
     764:	7f 01       	movw	r14, r30
					UART_Transmit('\r');
					
					//-----------------	Writing the password -----------------//
					UART_Send_String("Enter Password : ");

					while(looping_counter < LOGIN_SIZE)
     766:	e8 15       	cp	r30, r8
     768:	f9 05       	cpc	r31, r9
     76a:	89 f7       	brne	.-30     	; 0x74e <App+0x2e2>
						
						password_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
					UART_Transmit('\r');
     76c:	8d e0       	ldi	r24, 0x0D	; 13
     76e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>

				UART_Transmit('\r');
     772:	8d e0       	ldi	r24, 0x0D	; 13
     774:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				UART_Transmit('\r');
     778:	8d e0       	ldi	r24, 0x0D	; 13
     77a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
     77e:	8a 81       	ldd	r24, Y+2	; 0x02
     780:	81 11       	cpse	r24, r1
     782:	51 c0       	rjmp	.+162    	; 0x826 <App+0x3ba>
     784:	5e c0       	rjmp	.+188    	; 0x842 <App+0x3d6>
				{
					for(char i = 0; i<LOGIN_SIZE; i++)
					{
						EEPROM_readByte(UART_User_Username_Block,(4*looping_counter)+i,&username_temp_arr[i]);
     786:	a7 01       	movw	r20, r14
     788:	64 2d       	mov	r22, r4
     78a:	86 ea       	ldi	r24, 0xA6	; 166
     78c:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
     790:	8f e3       	ldi	r24, 0x3F	; 63
     792:	9c e9       	ldi	r25, 0x9C	; 156
     794:	01 97       	sbiw	r24, 0x01	; 1
     796:	f1 f7       	brne	.-4      	; 0x794 <App+0x328>
     798:	00 c0       	rjmp	.+0      	; 0x79a <App+0x32e>
     79a:	00 00       	nop
						_delay_ms(10);
						EEPROM_readByte(UART_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
     79c:	a8 01       	movw	r20, r16
     79e:	64 2d       	mov	r22, r4
     7a0:	88 ea       	ldi	r24, 0xA8	; 168
     7a2:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
     7a6:	ef e3       	ldi	r30, 0x3F	; 63
     7a8:	fc e9       	ldi	r31, 0x9C	; 156
     7aa:	31 97       	sbiw	r30, 0x01	; 1
     7ac:	f1 f7       	brne	.-4      	; 0x7aa <App+0x33e>
     7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <App+0x344>
     7b0:	00 00       	nop
     7b2:	43 94       	inc	r4
     7b4:	ff ef       	ldi	r31, 0xFF	; 255
     7b6:	ef 1a       	sub	r14, r31
     7b8:	ff 0a       	sbc	r15, r31
     7ba:	0f 5f       	subi	r16, 0xFF	; 255
     7bc:	1f 4f       	sbci	r17, 0xFF	; 255
				UART_Transmit('\r');
				UART_Transmit('\r');
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
				{
					for(char i = 0; i<LOGIN_SIZE; i++)
     7be:	34 10       	cpse	r3, r4
     7c0:	e2 cf       	rjmp	.-60     	; 0x786 <App+0x31a>
						_delay_ms(10);
						EEPROM_readByte(UART_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
						_delay_ms(10);
					}
					
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
     7c2:	44 e0       	ldi	r20, 0x04	; 4
     7c4:	6c 2d       	mov	r22, r12
     7c6:	7d 2d       	mov	r23, r13
     7c8:	ce 01       	movw	r24, r28
     7ca:	03 96       	adiw	r24, 0x03	; 3
     7cc:	0e 94 05 05 	call	0xa0a	; 0xa0a <Compare_Passwords>
     7d0:	81 33       	cpi	r24, 0x31	; 49
     7d2:	19 f5       	brne	.+70     	; 0x81a <App+0x3ae>
     7d4:	44 e0       	ldi	r20, 0x04	; 4
     7d6:	be 01       	movw	r22, r28
     7d8:	61 5f       	subi	r22, 0xF1	; 241
     7da:	7f 4f       	sbci	r23, 0xFF	; 255
     7dc:	86 2d       	mov	r24, r6
     7de:	95 2d       	mov	r25, r5
     7e0:	0e 94 05 05 	call	0xa0a	; 0xa0a <Compare_Passwords>
     7e4:	81 33       	cpi	r24, 0x31	; 49
     7e6:	c9 f4       	brne	.+50     	; 0x81a <App+0x3ae>
					{
						UART_Send_String("Access Granted");
     7e8:	8b e7       	ldi	r24, 0x7B	; 123
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
						UART_Transmit('\r');
     7f0:	8d e0       	ldi	r24, 0x0D	; 13
     7f2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
						UART_Transmit('\r');
     7f6:	8d e0       	ldi	r24, 0x0D	; 13
     7f8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
						UART_Send_String("Welcome User");
     7fc:	8f e0       	ldi	r24, 0x0F	; 15
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
						UART_Transmit('\r');
     804:	8d e0       	ldi	r24, 0x0D	; 13
     806:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
						UART_Transmit('\r');
     80a:	8d e0       	ldi	r24, 0x0D	; 13
     80c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
						UART_Transmit('\r');
     810:	8d e0       	ldi	r24, 0x0D	; 13
     812:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
     816:	7b 88       	ldd	r7, Y+19	; 0x13
     818:	31 c0       	rjmp	.+98     	; 0x87c <__stack+0x1d>
					UART_Transmit('\r');

				UART_Transmit('\r');
				UART_Transmit('\r');
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
     81a:	23 94       	inc	r2
     81c:	43 2c       	mov	r4, r3
     81e:	8a 81       	ldd	r24, Y+2	; 0x02
     820:	28 16       	cp	r2, r24
     822:	18 f0       	brcs	.+6      	; 0x82a <App+0x3be>
     824:	0e c0       	rjmp	.+28     	; 0x842 <App+0x3d6>
     826:	41 2c       	mov	r4, r1
     828:	21 2c       	mov	r2, r1
     82a:	7e 01       	movw	r14, r28
     82c:	8b e0       	ldi	r24, 0x0B	; 11
     82e:	e8 0e       	add	r14, r24
     830:	f1 1c       	adc	r15, r1
     832:	8e 01       	movw	r16, r28
     834:	01 5f       	subi	r16, 0xF1	; 241
     836:	1f 4f       	sbci	r17, 0xFF	; 255
     838:	68 94       	set
     83a:	33 24       	eor	r3, r3
     83c:	32 f8       	bld	r3, 2
     83e:	34 0c       	add	r3, r4
     840:	a2 cf       	rjmp	.-188    	; 0x786 <App+0x31a>
				looping_counter = 0;
				
				if(Compare_Var == 0)
				{
					trials--;
					UART_Send_String("Access Denied");
     842:	8a e8       	ldi	r24, 0x8A	; 138
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
					UART_Transmit('\r');
     84a:	8d e0       	ldi	r24, 0x0D	; 13
     84c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Send_String("Trials Left before initializing Alarm : ");
     850:	86 ee       	ldi	r24, 0xE6	; 230
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
					UART_Transmit(trials+0x30);
     858:	80 e3       	ldi	r24, 0x30	; 48
     85a:	87 0d       	add	r24, r7
     85c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Transmit('\r');
     860:	8d e0       	ldi	r24, 0x0D	; 13
     862:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Transmit('\r');
     866:	8d e0       	ldi	r24, 0x0D	; 13
     868:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Transmit('\r');
     86c:	8d e0       	ldi	r24, 0x0D	; 13
     86e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		
			EEPROM_readByte(Counters_Block,Users_UART_number_BIT,&user_counter);
			_delay_ms(10);
			trials = 3;
			
			while(trials>=1 && trials<=3)
     872:	8f ef       	ldi	r24, 0xFF	; 255
     874:	87 0d       	add	r24, r7
     876:	83 30       	cpi	r24, 0x03	; 3
     878:	08 f4       	brcc	.+2      	; 0x87c <__stack+0x1d>
     87a:	43 cf       	rjmp	.-378    	; 0x702 <App+0x296>
					break;
				}

			}

			if(trials == 0)
     87c:	71 10       	cpse	r7, r1
     87e:	02 c0       	rjmp	.+4      	; 0x884 <__stack+0x25>
			{
				Alarm_On ();
     880:	0e 94 10 0b 	call	0x1620	; 0x1620 <Alarm_On>
			}
			
			UART_User_Interfacing();		
     884:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <UART_User_Interfacing>
	}
     888:	02 c0       	rjmp	.+4      	; 0x88e <__stack+0x2f>
				UART_Transmit('\r');
				Compare_Var = 1;
			}
			else
			{
				for (looping_counter = 0; looping_counter < admin_counter; looping_counter++)
     88a:	76 2c       	mov	r7, r6
     88c:	16 cf       	rjmp	.-468    	; 0x6ba <App+0x24e>
				Alarm_On ();
			}
			
			UART_User_Interfacing();		
	}
     88e:	63 96       	adiw	r28, 0x13	; 19
     890:	0f b6       	in	r0, 0x3f	; 63
     892:	f8 94       	cli
     894:	de bf       	out	0x3e, r29	; 62
     896:	0f be       	out	0x3f, r0	; 63
     898:	cd bf       	out	0x3d, r28	; 61
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	1f 91       	pop	r17
     8a0:	0f 91       	pop	r16
     8a2:	ff 90       	pop	r15
     8a4:	ef 90       	pop	r14
     8a6:	df 90       	pop	r13
     8a8:	cf 90       	pop	r12
     8aa:	bf 90       	pop	r11
     8ac:	af 90       	pop	r10
     8ae:	9f 90       	pop	r9
     8b0:	8f 90       	pop	r8
     8b2:	7f 90       	pop	r7
     8b4:	6f 90       	pop	r6
     8b6:	5f 90       	pop	r5
     8b8:	4f 90       	pop	r4
     8ba:	3f 90       	pop	r3
     8bc:	2f 90       	pop	r2
     8be:	08 95       	ret

000008c0 <EEPROM_Initialization>:
#include "I2C_Master.h"
#include <util/delay.h>

void EEPROM_Initialization(void)
{
	I2C_Initialization();
     8c0:	0e 94 b1 05 	call	0xb62	; 0xb62 <I2C_Initialization>
     8c4:	08 95       	ret

000008c6 <EEPROM_writeByte>:
}

void EEPROM_writeByte(char EEPROM_Block,char EEPROM_Address,char Data)
{
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	d6 2f       	mov	r29, r22
     8cc:	c4 2f       	mov	r28, r20
	//I2C_START_Transmitter_Receiver_Mode(EEPROM_Block,Master_Transmitter_Mode);
	I2C_Start(EEPROM_Block);
     8ce:	0e 94 b5 05 	call	0xb6a	; 0xb6a <I2C_Start>
	I2C_Write(EEPROM_Address);
     8d2:	8d 2f       	mov	r24, r29
     8d4:	0e 94 ef 05 	call	0xbde	; 0xbde <I2C_Write>
     8d8:	8f e3       	ldi	r24, 0x3F	; 63
     8da:	9c e9       	ldi	r25, 0x9C	; 156
     8dc:	01 97       	sbiw	r24, 0x01	; 1
     8de:	f1 f7       	brne	.-4      	; 0x8dc <EEPROM_writeByte+0x16>
     8e0:	00 c0       	rjmp	.+0      	; 0x8e2 <EEPROM_writeByte+0x1c>
     8e2:	00 00       	nop
	_delay_ms(10);
	I2C_Write(Data);
     8e4:	8c 2f       	mov	r24, r28
     8e6:	0e 94 ef 05 	call	0xbde	; 0xbde <I2C_Write>
     8ea:	8f e3       	ldi	r24, 0x3F	; 63
     8ec:	9c e9       	ldi	r25, 0x9C	; 156
     8ee:	01 97       	sbiw	r24, 0x01	; 1
     8f0:	f1 f7       	brne	.-4      	; 0x8ee <EEPROM_writeByte+0x28>
     8f2:	00 c0       	rjmp	.+0      	; 0x8f4 <EEPROM_writeByte+0x2e>
     8f4:	00 00       	nop
	_delay_ms(10);
	I2C_Stop();
     8f6:	0e 94 13 06 	call	0xc26	; 0xc26 <I2C_Stop>
}
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	08 95       	ret

00000900 <EEPROM_readByte>:

void EEPROM_readByte(char EEPROM_Block,char EEPROM_Address,char *Data)
{
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	c8 2f       	mov	r28, r24
     90a:	d6 2f       	mov	r29, r22
     90c:	8a 01       	movw	r16, r20
	//I2C_START_Transmitter_Receiver_Mode(EEPROM_Block,Master_Transmitter_Mode);
	I2C_Start(EEPROM_Block);
     90e:	0e 94 b5 05 	call	0xb6a	; 0xb6a <I2C_Start>
	I2C_Write(EEPROM_Address);
     912:	8d 2f       	mov	r24, r29
     914:	0e 94 ef 05 	call	0xbde	; 0xbde <I2C_Write>
	//I2C_Repeated_START_Transmitter_Receiver_Mode(EEPROM_Block+1,Master_Receiver_Mode);
	I2C_Repeated_Start(EEPROM_Block+1);
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	8c 0f       	add	r24, r28
     91c:	0e 94 d2 05 	call	0xba4	; 0xba4 <I2C_Repeated_Start>
	*Data = I2C_Read_Nack();
     920:	0e 94 08 06 	call	0xc10	; 0xc10 <I2C_Read_Nack>
     924:	f8 01       	movw	r30, r16
     926:	80 83       	st	Z, r24
     928:	8f e3       	ldi	r24, 0x3F	; 63
     92a:	9c e9       	ldi	r25, 0x9C	; 156
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	f1 f7       	brne	.-4      	; 0x92c <EEPROM_readByte+0x2c>
     930:	00 c0       	rjmp	.+0      	; 0x932 <EEPROM_readByte+0x32>
     932:	00 00       	nop
	_delay_ms(10);
	I2C_Stop();
     934:	0e 94 13 06 	call	0xc26	; 0xc26 <I2C_Stop>
}
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	08 95       	ret

00000942 <EEPROM_writeDataStream>:


void EEPROM_writeDataStream(char EEPROM_Block,char EEPROM_Address,char *Data,char DataSize)
{
     942:	0f 93       	push	r16
     944:	1f 93       	push	r17
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	16 2f       	mov	r17, r22
     94c:	ea 01       	movw	r28, r20
     94e:	02 2f       	mov	r16, r18
     950:	21 31       	cpi	r18, 0x11	; 17
     952:	08 f0       	brcs	.+2      	; 0x956 <EEPROM_writeDataStream+0x14>
     954:	00 e1       	ldi	r16, 0x10	; 16
	else
	{
		loopingVar = DataSize;
	}
	
	I2C_Start(EEPROM_Block);
     956:	0e 94 b5 05 	call	0xb6a	; 0xb6a <I2C_Start>
	I2C_Write(EEPROM_Address);
     95a:	81 2f       	mov	r24, r17
     95c:	0e 94 ef 05 	call	0xbde	; 0xbde <I2C_Write>
     960:	8f e3       	ldi	r24, 0x3F	; 63
     962:	9c e9       	ldi	r25, 0x9C	; 156
     964:	01 97       	sbiw	r24, 0x01	; 1
     966:	f1 f7       	brne	.-4      	; 0x964 <EEPROM_writeDataStream+0x22>
     968:	00 c0       	rjmp	.+0      	; 0x96a <EEPROM_writeDataStream+0x28>
     96a:	00 00       	nop
	_delay_ms(10);
	
	while(loopingVar)
     96c:	00 23       	and	r16, r16
     96e:	61 f0       	breq	.+24     	; 0x988 <EEPROM_writeDataStream+0x46>
     970:	01 50       	subi	r16, 0x01	; 1
     972:	10 e0       	ldi	r17, 0x00	; 0
     974:	0f 5f       	subi	r16, 0xFF	; 255
     976:	1f 4f       	sbci	r17, 0xFF	; 255
     978:	0c 0f       	add	r16, r28
     97a:	1d 1f       	adc	r17, r29
	{
		I2C_Write(*Data);
     97c:	89 91       	ld	r24, Y+
     97e:	0e 94 ef 05 	call	0xbde	; 0xbde <I2C_Write>
	
	I2C_Start(EEPROM_Block);
	I2C_Write(EEPROM_Address);
	_delay_ms(10);
	
	while(loopingVar)
     982:	c0 17       	cp	r28, r16
     984:	d1 07       	cpc	r29, r17
     986:	d1 f7       	brne	.-12     	; 0x97c <EEPROM_writeDataStream+0x3a>
     988:	8f e3       	ldi	r24, 0x3F	; 63
     98a:	9c e9       	ldi	r25, 0x9C	; 156
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	f1 f7       	brne	.-4      	; 0x98c <EEPROM_writeDataStream+0x4a>
     990:	00 c0       	rjmp	.+0      	; 0x992 <EEPROM_writeDataStream+0x50>
     992:	00 00       	nop
		I2C_Write(*Data);
		Data++;
		loopingVar--;
	}
	_delay_ms(10);
	I2C_Stop();
     994:	0e 94 13 06 	call	0xc26	; 0xc26 <I2C_Stop>
}
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	08 95       	ret

000009a2 <EEPROM_readDatastream>:

void EEPROM_readDatastream(char EEPROM_Block,char EEPROM_Address,char *Data,char DataSize)
{
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	18 2f       	mov	r17, r24
     9ae:	f6 2e       	mov	r15, r22
     9b0:	ea 01       	movw	r28, r20
     9b2:	02 2f       	mov	r16, r18
	I2C_Start(EEPROM_Block);
     9b4:	0e 94 b5 05 	call	0xb6a	; 0xb6a <I2C_Start>
	I2C_Write(EEPROM_Address);
     9b8:	8f 2d       	mov	r24, r15
     9ba:	0e 94 ef 05 	call	0xbde	; 0xbde <I2C_Write>
	I2C_Repeated_Start(EEPROM_Block+1);
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	81 0f       	add	r24, r17
     9c2:	0e 94 d2 05 	call	0xba4	; 0xba4 <I2C_Repeated_Start>
	
	while(DataSize)
     9c6:	00 23       	and	r16, r16
     9c8:	91 f0       	breq	.+36     	; 0x9ee <EEPROM_readDatastream+0x4c>
     9ca:	01 50       	subi	r16, 0x01	; 1
     9cc:	10 e0       	ldi	r17, 0x00	; 0
     9ce:	0f 5f       	subi	r16, 0xFF	; 255
     9d0:	1f 4f       	sbci	r17, 0xFF	; 255
     9d2:	0c 0f       	add	r16, r28
     9d4:	1d 1f       	adc	r17, r29
	{
		*Data = I2C_Read_Ack();
     9d6:	0e 94 01 06 	call	0xc02	; 0xc02 <I2C_Read_Ack>
     9da:	89 93       	st	Y+, r24
     9dc:	8f e3       	ldi	r24, 0x3F	; 63
     9de:	9c e9       	ldi	r25, 0x9C	; 156
     9e0:	01 97       	sbiw	r24, 0x01	; 1
     9e2:	f1 f7       	brne	.-4      	; 0x9e0 <EEPROM_readDatastream+0x3e>
     9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <EEPROM_readDatastream+0x44>
     9e6:	00 00       	nop
{
	I2C_Start(EEPROM_Block);
	I2C_Write(EEPROM_Address);
	I2C_Repeated_Start(EEPROM_Block+1);
	
	while(DataSize)
     9e8:	c0 17       	cp	r28, r16
     9ea:	d1 07       	cpc	r29, r17
     9ec:	a1 f7       	brne	.-24     	; 0x9d6 <EEPROM_readDatastream+0x34>
     9ee:	8f e3       	ldi	r24, 0x3F	; 63
     9f0:	9c e9       	ldi	r25, 0x9C	; 156
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	f1 f7       	brne	.-4      	; 0x9f2 <EEPROM_readDatastream+0x50>
     9f6:	00 c0       	rjmp	.+0      	; 0x9f8 <EEPROM_readDatastream+0x56>
     9f8:	00 00       	nop
		_delay_ms(10);
		Data++;
		DataSize--;
	}
	_delay_ms(10);
	I2C_Stop();
     9fa:	0e 94 13 06 	call	0xc26	; 0xc26 <I2C_Stop>
}
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	1f 91       	pop	r17
     a04:	0f 91       	pop	r16
     a06:	ff 90       	pop	r15
     a08:	08 95       	ret

00000a0a <Compare_Passwords>:


char Compare_Passwords(unsigned char* pass1 , unsigned char* pass2 , unsigned char Pass_Size)
{
	unsigned char i = 0;
	for(i = 0 ; i<Pass_Size; i++)
     a0a:	44 23       	and	r20, r20
     a0c:	d1 f0       	breq	.+52     	; 0xa42 <Compare_Passwords+0x38>
	{
		if(pass1[i] != pass2[i])
     a0e:	fc 01       	movw	r30, r24
     a10:	30 81       	ld	r19, Z
     a12:	fb 01       	movw	r30, r22
     a14:	20 81       	ld	r18, Z
     a16:	32 13       	cpse	r19, r18
     a18:	16 c0       	rjmp	.+44     	; 0xa46 <Compare_Passwords+0x3c>
     a1a:	fc 01       	movw	r30, r24
     a1c:	31 96       	adiw	r30, 0x01	; 1
     a1e:	db 01       	movw	r26, r22
     a20:	11 96       	adiw	r26, 0x01	; 1
     a22:	41 50       	subi	r20, 0x01	; 1
     a24:	50 e0       	ldi	r21, 0x00	; 0
     a26:	4f 5f       	subi	r20, 0xFF	; 255
     a28:	5f 4f       	sbci	r21, 0xFF	; 255
     a2a:	48 0f       	add	r20, r24
     a2c:	59 1f       	adc	r21, r25
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <Compare_Passwords+0x2e>
     a30:	21 91       	ld	r18, Z+
     a32:	9d 91       	ld	r25, X+
     a34:	29 13       	cpse	r18, r25
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <Compare_Passwords+0x40>


char Compare_Passwords(unsigned char* pass1 , unsigned char* pass2 , unsigned char Pass_Size)
{
	unsigned char i = 0;
	for(i = 0 ; i<Pass_Size; i++)
     a38:	e4 17       	cp	r30, r20
     a3a:	f5 07       	cpc	r31, r21
     a3c:	c9 f7       	brne	.-14     	; 0xa30 <Compare_Passwords+0x26>
		{
			return '0';
		}
	}
	
	return '1';
     a3e:	81 e3       	ldi	r24, 0x31	; 49
     a40:	08 95       	ret
     a42:	81 e3       	ldi	r24, 0x31	; 49
     a44:	08 95       	ret
	unsigned char i = 0;
	for(i = 0 ; i<Pass_Size; i++)
	{
		if(pass1[i] != pass2[i])
		{
			return '0';
     a46:	80 e3       	ldi	r24, 0x30	; 48
     a48:	08 95       	ret
     a4a:	80 e3       	ldi	r24, 0x30	; 48
		}
	}
	
	return '1';
}
     a4c:	08 95       	ret

00000a4e <EEPROM_Save_Main_Admin>:

void EEPROM_Save_Main_Admin()
{
	EEPROM_writeDataStream(Main_Admin_Block,0,"1111",LOGIN_SIZE);
     a4e:	24 e0       	ldi	r18, 0x04	; 4
     a50:	4c e1       	ldi	r20, 0x1C	; 28
     a52:	51 e0       	ldi	r21, 0x01	; 1
     a54:	60 e0       	ldi	r22, 0x00	; 0
     a56:	80 ea       	ldi	r24, 0xA0	; 160
     a58:	0e 94 a1 04 	call	0x942	; 0x942 <EEPROM_writeDataStream>
     a5c:	2f ef       	ldi	r18, 0xFF	; 255
     a5e:	83 ec       	ldi	r24, 0xC3	; 195
     a60:	99 e0       	ldi	r25, 0x09	; 9
     a62:	21 50       	subi	r18, 0x01	; 1
     a64:	80 40       	sbci	r24, 0x00	; 0
     a66:	90 40       	sbci	r25, 0x00	; 0
     a68:	e1 f7       	brne	.-8      	; 0xa62 <EEPROM_Save_Main_Admin+0x14>
     a6a:	00 c0       	rjmp	.+0      	; 0xa6c <EEPROM_Save_Main_Admin+0x1e>
     a6c:	00 00       	nop
	_delay_ms(200);
	EEPROM_writeDataStream(Main_Admin_Block,8,"1111",LOGIN_SIZE);
     a6e:	24 e0       	ldi	r18, 0x04	; 4
     a70:	4c e1       	ldi	r20, 0x1C	; 28
     a72:	51 e0       	ldi	r21, 0x01	; 1
     a74:	68 e0       	ldi	r22, 0x08	; 8
     a76:	80 ea       	ldi	r24, 0xA0	; 160
     a78:	0e 94 a1 04 	call	0x942	; 0x942 <EEPROM_writeDataStream>
     a7c:	2f ef       	ldi	r18, 0xFF	; 255
     a7e:	83 ec       	ldi	r24, 0xC3	; 195
     a80:	99 e0       	ldi	r25, 0x09	; 9
     a82:	21 50       	subi	r18, 0x01	; 1
     a84:	80 40       	sbci	r24, 0x00	; 0
     a86:	90 40       	sbci	r25, 0x00	; 0
     a88:	e1 f7       	brne	.-8      	; 0xa82 <EEPROM_Save_Main_Admin+0x34>
     a8a:	00 c0       	rjmp	.+0      	; 0xa8c <EEPROM_Save_Main_Admin+0x3e>
     a8c:	00 00       	nop
     a8e:	08 95       	ret

00000a90 <EEPROM_Write_0_Counters>:
	_delay_ms(200);
}


void EEPROM_Write_0_Counters()
{
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	00 d0       	rcall	.+0      	; 0xa96 <EEPROM_Write_0_Counters+0x6>
     a96:	1f 92       	push	r1
     a98:	cd b7       	in	r28, 0x3d	; 61
     a9a:	de b7       	in	r29, 0x3e	; 62
	char admin_stored_value = 0;
     a9c:	19 82       	std	Y+1, r1	; 0x01
	char User_uart_stored_value = 0;
     a9e:	1a 82       	std	Y+2, r1	; 0x02
	char User_lcd_stored_value = 0;
     aa0:	1b 82       	std	Y+3, r1	; 0x03
	
	EEPROM_readByte(BLOCK_7,Admins_number_BIT,&admin_stored_value);
     aa2:	ae 01       	movw	r20, r28
     aa4:	4f 5f       	subi	r20, 0xFF	; 255
     aa6:	5f 4f       	sbci	r21, 0xFF	; 255
     aa8:	61 e0       	ldi	r22, 0x01	; 1
     aaa:	8e ea       	ldi	r24, 0xAE	; 174
     aac:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
     ab0:	8f e3       	ldi	r24, 0x3F	; 63
     ab2:	9c e9       	ldi	r25, 0x9C	; 156
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	f1 f7       	brne	.-4      	; 0xab4 <EEPROM_Write_0_Counters+0x24>
     ab8:	00 c0       	rjmp	.+0      	; 0xaba <EEPROM_Write_0_Counters+0x2a>
     aba:	00 00       	nop
	_delay_ms(10);
	EEPROM_readByte(BLOCK_7,Users_UART_number_BIT,&User_uart_stored_value);
     abc:	ae 01       	movw	r20, r28
     abe:	4e 5f       	subi	r20, 0xFE	; 254
     ac0:	5f 4f       	sbci	r21, 0xFF	; 255
     ac2:	62 e0       	ldi	r22, 0x02	; 2
     ac4:	8e ea       	ldi	r24, 0xAE	; 174
     ac6:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
     aca:	8f e3       	ldi	r24, 0x3F	; 63
     acc:	9c e9       	ldi	r25, 0x9C	; 156
     ace:	01 97       	sbiw	r24, 0x01	; 1
     ad0:	f1 f7       	brne	.-4      	; 0xace <EEPROM_Write_0_Counters+0x3e>
     ad2:	00 c0       	rjmp	.+0      	; 0xad4 <EEPROM_Write_0_Counters+0x44>
     ad4:	00 00       	nop
	_delay_ms(10);
	EEPROM_readByte(BLOCK_7,Users_LCD_number_BIT,&User_lcd_stored_value);
     ad6:	ae 01       	movw	r20, r28
     ad8:	4d 5f       	subi	r20, 0xFD	; 253
     ada:	5f 4f       	sbci	r21, 0xFF	; 255
     adc:	63 e0       	ldi	r22, 0x03	; 3
     ade:	8e ea       	ldi	r24, 0xAE	; 174
     ae0:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
     ae4:	8f e3       	ldi	r24, 0x3F	; 63
     ae6:	9c e9       	ldi	r25, 0x9C	; 156
     ae8:	01 97       	sbiw	r24, 0x01	; 1
     aea:	f1 f7       	brne	.-4      	; 0xae8 <EEPROM_Write_0_Counters+0x58>
     aec:	00 c0       	rjmp	.+0      	; 0xaee <EEPROM_Write_0_Counters+0x5e>
     aee:	00 00       	nop
	//admin_stored_value = EEPROM_ReadByte(BLOCK_7,Admins_number_BIT);
	//User_uart_stored_value = EEPROM_ReadByte(BLOCK_7,Users_UART_number_BIT);
	//User_lcd_stored_value = EEPROM_ReadByte(BLOCK_7,Users_LCD_number_BIT);
	
	
	if(admin_stored_value == 0xFF)
     af0:	89 81       	ldd	r24, Y+1	; 0x01
     af2:	8f 3f       	cpi	r24, 0xFF	; 255
     af4:	71 f4       	brne	.+28     	; 0xb12 <EEPROM_Write_0_Counters+0x82>
	{
		EEPROM_writeByte(BLOCK_7,Admins_number_BIT,0);	// Write 0 on Block_7 bit 0
     af6:	40 e0       	ldi	r20, 0x00	; 0
     af8:	61 e0       	ldi	r22, 0x01	; 1
     afa:	8e ea       	ldi	r24, 0xAE	; 174
     afc:	0e 94 63 04 	call	0x8c6	; 0x8c6 <EEPROM_writeByte>
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	23 ec       	ldi	r18, 0xC3	; 195
     b04:	89 e0       	ldi	r24, 0x09	; 9
     b06:	91 50       	subi	r25, 0x01	; 1
     b08:	20 40       	sbci	r18, 0x00	; 0
     b0a:	80 40       	sbci	r24, 0x00	; 0
     b0c:	e1 f7       	brne	.-8      	; 0xb06 <EEPROM_Write_0_Counters+0x76>
     b0e:	00 c0       	rjmp	.+0      	; 0xb10 <EEPROM_Write_0_Counters+0x80>
     b10:	00 00       	nop
		_delay_ms(200);
		//EEPROM_WriteByte(BLOCK_7,Admins_number_BIT,0);
	}
	
	if(User_uart_stored_value == 0xFF)
     b12:	8a 81       	ldd	r24, Y+2	; 0x02
     b14:	8f 3f       	cpi	r24, 0xFF	; 255
     b16:	71 f4       	brne	.+28     	; 0xb34 <EEPROM_Write_0_Counters+0xa4>
	{
		EEPROM_writeByte(BLOCK_7,Users_UART_number_BIT,0);	// Write 0 on Block_7 bit 1
     b18:	40 e0       	ldi	r20, 0x00	; 0
     b1a:	62 e0       	ldi	r22, 0x02	; 2
     b1c:	8e ea       	ldi	r24, 0xAE	; 174
     b1e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <EEPROM_writeByte>
     b22:	9f ef       	ldi	r25, 0xFF	; 255
     b24:	23 ec       	ldi	r18, 0xC3	; 195
     b26:	89 e0       	ldi	r24, 0x09	; 9
     b28:	91 50       	subi	r25, 0x01	; 1
     b2a:	20 40       	sbci	r18, 0x00	; 0
     b2c:	80 40       	sbci	r24, 0x00	; 0
     b2e:	e1 f7       	brne	.-8      	; 0xb28 <EEPROM_Write_0_Counters+0x98>
     b30:	00 c0       	rjmp	.+0      	; 0xb32 <EEPROM_Write_0_Counters+0xa2>
     b32:	00 00       	nop
		_delay_ms(200);
		//EEPROM_WriteByte(BLOCK_7,Users_UART_number_BIT,0);
	}
	
	if(User_lcd_stored_value == 0xFF)
     b34:	8b 81       	ldd	r24, Y+3	; 0x03
     b36:	8f 3f       	cpi	r24, 0xFF	; 255
     b38:	71 f4       	brne	.+28     	; 0xb56 <EEPROM_Write_0_Counters+0xc6>
	{
		EEPROM_writeByte(BLOCK_7,Users_LCD_number_BIT,0);	// Write 0 on Block_7 bit 1
     b3a:	40 e0       	ldi	r20, 0x00	; 0
     b3c:	63 e0       	ldi	r22, 0x03	; 3
     b3e:	8e ea       	ldi	r24, 0xAE	; 174
     b40:	0e 94 63 04 	call	0x8c6	; 0x8c6 <EEPROM_writeByte>
     b44:	9f ef       	ldi	r25, 0xFF	; 255
     b46:	23 ec       	ldi	r18, 0xC3	; 195
     b48:	89 e0       	ldi	r24, 0x09	; 9
     b4a:	91 50       	subi	r25, 0x01	; 1
     b4c:	20 40       	sbci	r18, 0x00	; 0
     b4e:	80 40       	sbci	r24, 0x00	; 0
     b50:	e1 f7       	brne	.-8      	; 0xb4a <EEPROM_Write_0_Counters+0xba>
     b52:	00 c0       	rjmp	.+0      	; 0xb54 <EEPROM_Write_0_Counters+0xc4>
     b54:	00 00       	nop
		_delay_ms(200);
		//EEPROM_WriteByte(BLOCK_7,Users_LCD_number_BIT,0);
	}
	
}
     b56:	0f 90       	pop	r0
     b58:	0f 90       	pop	r0
     b5a:	0f 90       	pop	r0
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	08 95       	ret

00000b62 <I2C_Initialization>:
#include "I2C_Master.h"
#include <avr/eeprom.h>

void I2C_Initialization()
{
	TWBR = BITRATE(TWSR=0x00);	// Get bit rate register value by formula
     b62:	11 b8       	out	0x01, r1	; 1
     b64:	8f ef       	ldi	r24, 0xFF	; 255
     b66:	80 b9       	out	0x00, r24	; 0
     b68:	08 95       	ret

00000b6a <I2C_Start>:
}

char I2C_Start(char address)
{
	char status;
	TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT);	/* Enable TWI, generate START					*/
     b6a:	94 ea       	ldi	r25, 0xA4	; 164
     b6c:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR&(1<<TWINT)));				/* Wait until TWI finish its current job		*/
     b6e:	06 b6       	in	r0, 0x36	; 54
     b70:	07 fe       	sbrs	r0, 7
     b72:	fd cf       	rjmp	.-6      	; 0xb6e <I2C_Start+0x4>
	status=TWSR&0xF8;						/* Read TWI status register						*/
     b74:	91 b1       	in	r25, 0x01	; 1
	if(status!=0x08)						/* Check weather START transmitted or not?		*/
     b76:	98 7f       	andi	r25, 0xF8	; 248
     b78:	98 30       	cpi	r25, 0x08	; 8
     b7a:	71 f4       	brne	.+28     	; 0xb98 <I2C_Start+0x2e>
	return 0;								/* Return 0 to indicate start condition fail	*/
	TWDR= address;							/* Write SLA+W in TWI data register				*/
     b7c:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWEN)|(1<<TWINT);				/* Enable TWI & clear interrupt flag			*/
     b7e:	84 e8       	ldi	r24, 0x84	; 132
     b80:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));				/* Wait until TWI finish its current job		*/
     b82:	06 b6       	in	r0, 0x36	; 54
     b84:	07 fe       	sbrs	r0, 7
     b86:	fd cf       	rjmp	.-6      	; 0xb82 <I2C_Start+0x18>
	status=TWSR&0xF8;						/* Read TWI status register */
     b88:	81 b1       	in	r24, 0x01	; 1
     b8a:	88 7f       	andi	r24, 0xF8	; 248
	if(status==0x18)						/* Check for SLA+W transmitted &ack received	*/
     b8c:	88 31       	cpi	r24, 0x18	; 24
     b8e:	31 f0       	breq	.+12     	; 0xb9c <I2C_Start+0x32>
	return 1;								/* Return 1 to indicate ack received			*/
	if(status==0x20)						/* Check for SLA+W transmitted &nack received	*/
     b90:	80 32       	cpi	r24, 0x20	; 32
     b92:	31 f0       	breq	.+12     	; 0xba0 <I2C_Start+0x36>
	return 2;								/* Return 2 to indicate nack received			*/
	else
	return 3;								/* Else return 3 to indicate SLA+W failed		*/
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	08 95       	ret
	char status;
	TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT);	/* Enable TWI, generate START					*/
	while(!(TWCR&(1<<TWINT)));				/* Wait until TWI finish its current job		*/
	status=TWSR&0xF8;						/* Read TWI status register						*/
	if(status!=0x08)						/* Check weather START transmitted or not?		*/
	return 0;								/* Return 0 to indicate start condition fail	*/
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	08 95       	ret
	TWDR= address;							/* Write SLA+W in TWI data register				*/
	TWCR=(1<<TWEN)|(1<<TWINT);				/* Enable TWI & clear interrupt flag			*/
	while(!(TWCR&(1<<TWINT)));				/* Wait until TWI finish its current job		*/
	status=TWSR&0xF8;						/* Read TWI status register */
	if(status==0x18)						/* Check for SLA+W transmitted &ack received	*/
	return 1;								/* Return 1 to indicate ack received			*/
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	08 95       	ret
	if(status==0x20)						/* Check for SLA+W transmitted &nack received	*/
	return 2;								/* Return 2 to indicate nack received			*/
     ba0:	82 e0       	ldi	r24, 0x02	; 2
	else
	return 3;								/* Else return 3 to indicate SLA+W failed		*/
}
     ba2:	08 95       	ret

00000ba4 <I2C_Repeated_Start>:

char I2C_Repeated_Start(char read_address)
{
	char status;							/* Declare variable								*/
	TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT);	/* Enable TWI, generate start					*/
     ba4:	94 ea       	ldi	r25, 0xA4	; 164
     ba6:	96 bf       	out	0x36, r25	; 54
	while(!(TWCR&(1<<TWINT)));				/* Wait until TWI finish its current job		*/
     ba8:	06 b6       	in	r0, 0x36	; 54
     baa:	07 fe       	sbrs	r0, 7
     bac:	fd cf       	rjmp	.-6      	; 0xba8 <I2C_Repeated_Start+0x4>
	status=TWSR&0xF8;						/* Read TWI status register						*/
     bae:	91 b1       	in	r25, 0x01	; 1
	if(status!=0x10)						/* Check for repeated start transmitted			*/
     bb0:	98 7f       	andi	r25, 0xF8	; 248
     bb2:	90 31       	cpi	r25, 0x10	; 16
     bb4:	71 f4       	brne	.+28     	; 0xbd2 <I2C_Repeated_Start+0x2e>
	return 0;								/* Return 0 for repeated start condition fail	*/
	TWDR=read_address;						/* Write SLA+R in TWI data register				*/
     bb6:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWEN)|(1<<TWINT);				/* Enable TWI and clear interrupt flag			*/
     bb8:	84 e8       	ldi	r24, 0x84	; 132
     bba:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));				/* Wait until TWI finish its current job		*/
     bbc:	06 b6       	in	r0, 0x36	; 54
     bbe:	07 fe       	sbrs	r0, 7
     bc0:	fd cf       	rjmp	.-6      	; 0xbbc <I2C_Repeated_Start+0x18>
	status=TWSR&0xF8;						/* Read TWI status register						*/
     bc2:	81 b1       	in	r24, 0x01	; 1
     bc4:	88 7f       	andi	r24, 0xF8	; 248
	if(status==0x40)						/* Check for SLA+R transmitted &ack received	*/
     bc6:	80 34       	cpi	r24, 0x40	; 64
     bc8:	31 f0       	breq	.+12     	; 0xbd6 <I2C_Repeated_Start+0x32>
	return 1;								/* Return 1 to indicate ack received			*/
	if(status==0x48)						/* Check for SLA+R transmitted &nack received	*/
     bca:	88 34       	cpi	r24, 0x48	; 72
     bcc:	31 f0       	breq	.+12     	; 0xbda <I2C_Repeated_Start+0x36>
	return 2;								/* Return 2 to indicate nack received			*/
	else
	return 3;								/* Else return 3 to indicate SLA+W failed		*/
     bce:	83 e0       	ldi	r24, 0x03	; 3
     bd0:	08 95       	ret
	char status;							/* Declare variable								*/
	TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT);	/* Enable TWI, generate start					*/
	while(!(TWCR&(1<<TWINT)));				/* Wait until TWI finish its current job		*/
	status=TWSR&0xF8;						/* Read TWI status register						*/
	if(status!=0x10)						/* Check for repeated start transmitted			*/
	return 0;								/* Return 0 for repeated start condition fail	*/
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	08 95       	ret
	TWDR=read_address;						/* Write SLA+R in TWI data register				*/
	TWCR=(1<<TWEN)|(1<<TWINT);				/* Enable TWI and clear interrupt flag			*/
	while(!(TWCR&(1<<TWINT)));				/* Wait until TWI finish its current job		*/
	status=TWSR&0xF8;						/* Read TWI status register						*/
	if(status==0x40)						/* Check for SLA+R transmitted &ack received	*/
	return 1;								/* Return 1 to indicate ack received			*/
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	08 95       	ret
	if(status==0x48)						/* Check for SLA+R transmitted &nack received	*/
	return 2;								/* Return 2 to indicate nack received			*/
     bda:	82 e0       	ldi	r24, 0x02	; 2
	else
	return 3;								/* Else return 3 to indicate SLA+W failed		*/
}
     bdc:	08 95       	ret

00000bde <I2C_Write>:


char I2C_Write(char data)	/* I2C write function */
{
	char status;				/* Declare variable */
	TWDR=data;					/* Copy data in TWI data register */
     bde:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
     be0:	84 e8       	ldi	r24, 0x84	; 132
     be2:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
     be4:	06 b6       	in	r0, 0x36	; 54
     be6:	07 fe       	sbrs	r0, 7
     be8:	fd cf       	rjmp	.-6      	; 0xbe4 <I2C_Write+0x6>
	status=TWSR&0xF8;			/* Read TWI status register */
     bea:	81 b1       	in	r24, 0x01	; 1
     bec:	88 7f       	andi	r24, 0xF8	; 248
	if(status==0x28)			/* Check for data transmitted &ack received */
     bee:	88 32       	cpi	r24, 0x28	; 40
     bf0:	21 f0       	breq	.+8      	; 0xbfa <I2C_Write+0x1c>
	return 0;					/* Return 0 to indicate ack received */
	if(status==0x30)			/* Check for data transmitted &nack received */
     bf2:	80 33       	cpi	r24, 0x30	; 48
     bf4:	21 f0       	breq	.+8      	; 0xbfe <I2C_Write+0x20>
	return 1;					/* Return 1 to indicate nack received */
	else
	return 2;					/* Else return 2 for data transmission failure */
     bf6:	82 e0       	ldi	r24, 0x02	; 2
     bf8:	08 95       	ret
	TWDR=data;					/* Copy data in TWI data register */
	TWCR=(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
	while(!(TWCR&(1<<TWINT)));	/* Wait until TWI finish its current job */
	status=TWSR&0xF8;			/* Read TWI status register */
	if(status==0x28)			/* Check for data transmitted &ack received */
	return 0;					/* Return 0 to indicate ack received */
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	08 95       	ret
	if(status==0x30)			/* Check for data transmitted &nack received */
	return 1;					/* Return 1 to indicate nack received */
     bfe:	81 e0       	ldi	r24, 0x01	; 1
	else
	return 2;					/* Else return 2 for data transmission failure */
}
     c00:	08 95       	ret

00000c02 <I2C_Read_Ack>:
 about data read successful and
 also tells slave to transmit another data.*/

char I2C_Read_Ack()
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);	/* Enable TWI, generation of ack */
     c02:	84 ec       	ldi	r24, 0xC4	; 196
     c04:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));				/* Wait until TWI finish its current job */
     c06:	06 b6       	in	r0, 0x36	; 54
     c08:	07 fe       	sbrs	r0, 7
     c0a:	fd cf       	rjmp	.-6      	; 0xc06 <I2C_Read_Ack+0x4>
	return TWDR;							/* Return received data */
     c0c:	83 b1       	in	r24, 0x03	; 3
}
     c0e:	08 95       	ret

00000c10 <I2C_Read_Nack>:
	want next data and want to stop communication.	*/

char I2C_Read_Nack()		
{
	// Enable TWI and clear interrupt flag 
	set_bit(TWCR,TWEN);
     c10:	86 b7       	in	r24, 0x36	; 54
     c12:	84 60       	ori	r24, 0x04	; 4
     c14:	86 bf       	out	0x36, r24	; 54
	set_bit(TWCR,TWINT);
     c16:	86 b7       	in	r24, 0x36	; 54
     c18:	80 68       	ori	r24, 0x80	; 128
     c1a:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)))		// Wait until TWI finish its current job 
     c1c:	06 b6       	in	r0, 0x36	; 54
     c1e:	07 fe       	sbrs	r0, 7
     c20:	fd cf       	rjmp	.-6      	; 0xc1c <I2C_Read_Nack+0xc>
	{
	}
	return TWDR;				// Return received data 
     c22:	83 b1       	in	r24, 0x03	; 3
}
     c24:	08 95       	ret

00000c26 <I2C_Stop>:

void I2C_Stop()								/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);	/* Enable TWI, generate stop */
     c26:	84 e9       	ldi	r24, 0x94	; 148
     c28:	86 bf       	out	0x36, r24	; 54
	while(TWCR&(1<<TWSTO));					/* Wait until stop condition execution */
     c2a:	06 b6       	in	r0, 0x36	; 54
     c2c:	04 fc       	sbrc	r0, 4
     c2e:	fd cf       	rjmp	.-6      	; 0xc2a <I2C_Stop+0x4>
}
     c30:	08 95       	ret

00000c32 <Interrupt_Start>:
#include "PINS.h"
#include "Interrupt_Start.h"

void Interrupt_Start()
{
	clear_bit(INT0_DIR,INT0_PIN); //pinMode of INT0 pin --> Input
     c32:	8a 98       	cbi	0x11, 2	; 17
	set_bit(GICR,INT0); //Enable External Interrupt
     c34:	8b b7       	in	r24, 0x3b	; 59
     c36:	80 64       	ori	r24, 0x40	; 64
     c38:	8b bf       	out	0x3b, r24	; 59
	
	//Low-level on INT0 PIN generates an interrupt request
	clear_bit(MCUCR,ISC01);
     c3a:	85 b7       	in	r24, 0x35	; 53
     c3c:	8d 7f       	andi	r24, 0xFD	; 253
     c3e:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR,ISC00);
     c40:	85 b7       	in	r24, 0x35	; 53
     c42:	8e 7f       	andi	r24, 0xFE	; 254
     c44:	85 bf       	out	0x35, r24	; 53
	sei();
     c46:	78 94       	sei
     c48:	08 95       	ret

00000c4a <Keypad_Init>:

char arr[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'C','0','=','+'}};

void Keypad_Init(void)
{	
	clear_bit(Keypad_Input_Port_Dir,input_pin_1);
     c4a:	a4 98       	cbi	0x14, 4	; 20
	clear_bit(Keypad_Input_Port_Dir,input_pin_2);
     c4c:	a5 98       	cbi	0x14, 5	; 20
	clear_bit(Keypad_Input_Port_Dir,input_pin_3);
     c4e:	a6 98       	cbi	0x14, 6	; 20
	clear_bit(Keypad_Input_Port_Dir,input_pin_4);
     c50:	a7 98       	cbi	0x14, 7	; 20
	
	set_bit(Keypad_Input_Write_Port,input_pin_1);
     c52:	ac 9a       	sbi	0x15, 4	; 21
	set_bit(Keypad_Input_Write_Port,input_pin_2);
     c54:	ad 9a       	sbi	0x15, 5	; 21
	set_bit(Keypad_Input_Write_Port,input_pin_3);
     c56:	ae 9a       	sbi	0x15, 6	; 21
	set_bit(Keypad_Input_Write_Port,input_pin_4);
     c58:	af 9a       	sbi	0x15, 7	; 21
	
	
	set_bit(Keypad_Output_Port_Dir,output_pin_1);
     c5a:	bc 9a       	sbi	0x17, 4	; 23
	set_bit(Keypad_Output_Port_Dir,output_pin_2);
     c5c:	bd 9a       	sbi	0x17, 5	; 23
	set_bit(Keypad_Output_Port_Dir,output_pin_3);
     c5e:	be 9a       	sbi	0x17, 6	; 23
	set_bit(Keypad_Output_Port_Dir,output_pin_4);
     c60:	bf 9a       	sbi	0x17, 7	; 23
	
	set_bit(Keypad_Output_Write_Port,output_pin_1);
     c62:	c4 9a       	sbi	0x18, 4	; 24
	set_bit(Keypad_Output_Write_Port,output_pin_2);
     c64:	c5 9a       	sbi	0x18, 5	; 24
	set_bit(Keypad_Output_Write_Port,output_pin_3);
     c66:	c6 9a       	sbi	0x18, 6	; 24
	set_bit(Keypad_Output_Write_Port,output_pin_4);
     c68:	c7 9a       	sbi	0x18, 7	; 24
     c6a:	08 95       	ret

00000c6c <Keypad_Get_Value>:
	
}

unsigned char Keypad_Get_Value()
{
     c6c:	0f 93       	push	r16
     c6e:	1f 93       	push	r17
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	c4 e0       	ldi	r28, 0x04	; 4
     c76:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char Value = 0;
     c78:	80 e0       	ldi	r24, 0x00	; 0
	
	for(unsigned char i = output_pin_1; i <= output_pin_4; i++)
	{
		clear_bit(Keypad_Output_Write_Port, i);
     c7a:	a1 e0       	ldi	r26, 0x01	; 1
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	98 b3       	in	r25, 0x18	; 24
     c80:	8d 01       	movw	r16, r26
     c82:	0c 2e       	mov	r0, r28
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <Keypad_Get_Value+0x1e>
     c86:	00 0f       	add	r16, r16
     c88:	11 1f       	adc	r17, r17
     c8a:	0a 94       	dec	r0
     c8c:	e2 f7       	brpl	.-8      	; 0xc86 <Keypad_Get_Value+0x1a>
     c8e:	20 2f       	mov	r18, r16
     c90:	20 95       	com	r18
     c92:	92 23       	and	r25, r18
     c94:	98 bb       	out	0x18, r25	; 24
     c96:	fe 01       	movw	r30, r28
     c98:	e4 5a       	subi	r30, 0xA4	; 164
     c9a:	ff 4f       	sbci	r31, 0xFF	; 255
     c9c:	64 e0       	ldi	r22, 0x04	; 4
     c9e:	70 e0       	ldi	r23, 0x00	; 0
		for(unsigned char j = input_pin_1; j <= input_pin_4; j++)
		{
			if(!(read_bit(Keypad_Input_Read_Port, j)))
     ca0:	23 b3       	in	r18, 0x13	; 19
     ca2:	96 2f       	mov	r25, r22
     ca4:	ad 01       	movw	r20, r26
     ca6:	06 2e       	mov	r0, r22
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <Keypad_Get_Value+0x42>
     caa:	44 0f       	add	r20, r20
     cac:	55 1f       	adc	r21, r21
     cae:	0a 94       	dec	r0
     cb0:	e2 f7       	brpl	.-8      	; 0xcaa <Keypad_Get_Value+0x3e>
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	24 23       	and	r18, r20
     cb6:	35 23       	and	r19, r21
     cb8:	06 2e       	mov	r0, r22
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <Keypad_Get_Value+0x54>
     cbc:	35 95       	asr	r19
     cbe:	27 95       	ror	r18
     cc0:	0a 94       	dec	r0
     cc2:	e2 f7       	brpl	.-8      	; 0xcbc <Keypad_Get_Value+0x50>
     cc4:	23 2b       	or	r18, r19
     cc6:	69 f4       	brne	.+26     	; 0xce2 <Keypad_Get_Value+0x76>
			{
				Value = arr[j-input_pin_1][i-output_pin_1];
     cc8:	80 81       	ld	r24, Z
				while(!(read_bit(Keypad_Input_Read_Port, j)));
     cca:	23 b3       	in	r18, 0x13	; 19
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	24 23       	and	r18, r20
     cd0:	35 23       	and	r19, r21
     cd2:	09 2e       	mov	r0, r25
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <Keypad_Get_Value+0x6e>
     cd6:	35 95       	asr	r19
     cd8:	27 95       	ror	r18
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <Keypad_Get_Value+0x6a>
     cde:	23 2b       	or	r18, r19
     ce0:	a1 f3       	breq	.-24     	; 0xcca <Keypad_Get_Value+0x5e>
     ce2:	6f 5f       	subi	r22, 0xFF	; 255
     ce4:	7f 4f       	sbci	r23, 0xFF	; 255
     ce6:	34 96       	adiw	r30, 0x04	; 4
	unsigned char Value = 0;
	
	for(unsigned char i = output_pin_1; i <= output_pin_4; i++)
	{
		clear_bit(Keypad_Output_Write_Port, i);
		for(unsigned char j = input_pin_1; j <= input_pin_4; j++)
     ce8:	68 30       	cpi	r22, 0x08	; 8
     cea:	71 05       	cpc	r23, r1
     cec:	c9 f6       	brne	.-78     	; 0xca0 <Keypad_Get_Value+0x34>
			{
				Value = arr[j-input_pin_1][i-output_pin_1];
				while(!(read_bit(Keypad_Input_Read_Port, j)));
			}
		}
		set_bit(Keypad_Output_Write_Port, i);
     cee:	98 b3       	in	r25, 0x18	; 24
     cf0:	09 2b       	or	r16, r25
     cf2:	08 bb       	out	0x18, r16	; 24
     cf4:	21 96       	adiw	r28, 0x01	; 1

unsigned char Keypad_Get_Value()
{
	unsigned char Value = 0;
	
	for(unsigned char i = output_pin_1; i <= output_pin_4; i++)
     cf6:	c8 30       	cpi	r28, 0x08	; 8
     cf8:	d1 05       	cpc	r29, r1
     cfa:	09 f6       	brne	.-126    	; 0xc7e <Keypad_Get_Value+0x12>
			}
		}
		set_bit(Keypad_Output_Write_Port, i);
	}
	return Value;
}
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	08 95       	ret

00000d06 <LCD_Send_CMD>:


void LCD_Send_CMD (unsigned char data)
{
	#if LCD_Mode == 4
	LCD_Port =  ((LCD_Port & (0x0F)) | (data & (0xF0)));	// sending upper nibble
     d06:	9b b3       	in	r25, 0x1b	; 27
     d08:	9f 70       	andi	r25, 0x0F	; 15
     d0a:	28 2f       	mov	r18, r24
     d0c:	20 7f       	andi	r18, 0xF0	; 240
     d0e:	92 2b       	or	r25, r18
     d10:	9b bb       	out	0x1b, r25	; 27
	clear_bit(LCD_Control_Pins_Port,RS);
     d12:	d8 98       	cbi	0x1b, 0	; 27
	clear_bit(LCD_Control_Pins_Port,RW);
     d14:	d9 98       	cbi	0x1b, 1	; 27
	set_bit(LCD_Control_Pins_Port,EN);
     d16:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d18:	35 e0       	ldi	r19, 0x05	; 5
     d1a:	3a 95       	dec	r19
     d1c:	f1 f7       	brne	.-4      	; 0xd1a <LCD_Send_CMD+0x14>
     d1e:	00 00       	nop
	_delay_us(1);
	clear_bit(LCD_Control_Pins_Port,EN);
     d20:	da 98       	cbi	0x1b, 2	; 27
     d22:	ef e1       	ldi	r30, 0x1F	; 31
     d24:	f3 e0       	ldi	r31, 0x03	; 3
     d26:	31 97       	sbiw	r30, 0x01	; 1
     d28:	f1 f7       	brne	.-4      	; 0xd26 <LCD_Send_CMD+0x20>
     d2a:	00 c0       	rjmp	.+0      	; 0xd2c <LCD_Send_CMD+0x26>
     d2c:	00 00       	nop
	_delay_us(200);
	LCD_Port = ((LCD_Port & (0x0F)) | (data<<4));			// sending lower nibble
     d2e:	2b b3       	in	r18, 0x1b	; 27
     d30:	2f 70       	andi	r18, 0x0F	; 15
     d32:	f0 e1       	ldi	r31, 0x10	; 16
     d34:	8f 9f       	mul	r24, r31
     d36:	c0 01       	movw	r24, r0
     d38:	11 24       	eor	r1, r1
     d3a:	82 2b       	or	r24, r18
     d3c:	8b bb       	out	0x1b, r24	; 27
	set_bit(LCD_Control_Pins_Port,EN);
     d3e:	da 9a       	sbi	0x1b, 2	; 27
     d40:	35 e0       	ldi	r19, 0x05	; 5
     d42:	3a 95       	dec	r19
     d44:	f1 f7       	brne	.-4      	; 0xd42 <LCD_Send_CMD+0x3c>
     d46:	00 00       	nop
	_delay_us(1);
	clear_bit(LCD_Control_Pins_Port,EN);
     d48:	da 98       	cbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d4a:	8f e3       	ldi	r24, 0x3F	; 63
     d4c:	9f e1       	ldi	r25, 0x1F	; 31
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	f1 f7       	brne	.-4      	; 0xd4e <LCD_Send_CMD+0x48>
     d52:	00 c0       	rjmp	.+0      	; 0xd54 <LCD_Send_CMD+0x4e>
     d54:	00 00       	nop
     d56:	08 95       	ret

00000d58 <LCD_Init>:
}

void LCD_Init()
{
	// Enabling Control Pins
	set_bit(LCD_Control_Pins_Dir,RS);	
     d58:	d0 9a       	sbi	0x1a, 0	; 26
	set_bit(LCD_Control_Pins_Dir,RW);	
     d5a:	d1 9a       	sbi	0x1a, 1	; 26
	set_bit(LCD_Control_Pins_Dir,EN);
     d5c:	d2 9a       	sbi	0x1a, 2	; 26
	
	clear_bit(LCD_Control_Pins_Port,RS);
     d5e:	d8 98       	cbi	0x1b, 0	; 27
	clear_bit(LCD_Control_Pins_Port,RW);
     d60:	d9 98       	cbi	0x1b, 1	; 27
	clear_bit(LCD_Control_Pins_Port,EN);
     d62:	da 98       	cbi	0x1b, 2	; 27
	
	#if LCD_Mode == 4
	set_bit(LCD_Dir,LCD_D4);
     d64:	d4 9a       	sbi	0x1a, 4	; 26
	set_bit(LCD_Dir,LCD_D5);
     d66:	d5 9a       	sbi	0x1a, 5	; 26
	set_bit(LCD_Dir,LCD_D6);
     d68:	d6 9a       	sbi	0x1a, 6	; 26
	set_bit(LCD_Dir,LCD_D7);
     d6a:	d7 9a       	sbi	0x1a, 7	; 26
	
	clear_bit(LCD_Port,LCD_D4);
     d6c:	dc 98       	cbi	0x1b, 4	; 27
	clear_bit(LCD_Port,LCD_D5);
     d6e:	dd 98       	cbi	0x1b, 5	; 27
	clear_bit(LCD_Port,LCD_D6);
     d70:	de 98       	cbi	0x1b, 6	; 27
	clear_bit(LCD_Port,LCD_D7);
     d72:	df 98       	cbi	0x1b, 7	; 27
	
	LCD_Send_CMD(Return_Home); // Return Home
     d74:	82 e0       	ldi	r24, 0x02	; 2
     d76:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
     d7a:	8f e9       	ldi	r24, 0x9F	; 159
     d7c:	9f e0       	ldi	r25, 0x0F	; 15
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	f1 f7       	brne	.-4      	; 0xd7e <LCD_Init+0x26>
     d82:	00 c0       	rjmp	.+0      	; 0xd84 <LCD_Init+0x2c>
     d84:	00 00       	nop
	_delay_ms(1);
	LCD_Send_CMD(Mode_4_Bit_2_Line_5x8_dots); // 4 bit mode
     d86:	88 e2       	ldi	r24, 0x28	; 40
     d88:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
     d8c:	8f e9       	ldi	r24, 0x9F	; 159
     d8e:	9f e0       	ldi	r25, 0x0F	; 15
     d90:	01 97       	sbiw	r24, 0x01	; 1
     d92:	f1 f7       	brne	.-4      	; 0xd90 <LCD_Init+0x38>
     d94:	00 c0       	rjmp	.+0      	; 0xd96 <LCD_Init+0x3e>
     d96:	00 00       	nop
	_delay_ms(1);
	LCD_Send_CMD(Clear_Display); // Clear display
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
     d9e:	8f e9       	ldi	r24, 0x9F	; 159
     da0:	9f e0       	ldi	r25, 0x0F	; 15
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	f1 f7       	brne	.-4      	; 0xda2 <LCD_Init+0x4a>
     da6:	00 c0       	rjmp	.+0      	; 0xda8 <LCD_Init+0x50>
     da8:	00 00       	nop
	_delay_ms(1);
	LCD_Send_CMD(Display_ON_Cusror_OFF_Blink_OFF); // Display ON/OFF Control
     daa:	8c e0       	ldi	r24, 0x0C	; 12
     dac:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
     db0:	8f e9       	ldi	r24, 0x9F	; 159
     db2:	9f e0       	ldi	r25, 0x0F	; 15
     db4:	01 97       	sbiw	r24, 0x01	; 1
     db6:	f1 f7       	brne	.-4      	; 0xdb4 <LCD_Init+0x5c>
     db8:	00 c0       	rjmp	.+0      	; 0xdba <LCD_Init+0x62>
     dba:	00 00       	nop
	_delay_ms(1);
	LCD_Send_CMD(Cusror_shifts_right);	// Entry set mode (cursor moves to the right)
     dbc:	86 e0       	ldi	r24, 0x06	; 6
     dbe:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
     dc2:	8f e9       	ldi	r24, 0x9F	; 159
     dc4:	9f e0       	ldi	r25, 0x0F	; 15
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	f1 f7       	brne	.-4      	; 0xdc6 <LCD_Init+0x6e>
     dca:	00 c0       	rjmp	.+0      	; 0xdcc <LCD_Init+0x74>
     dcc:	00 00       	nop
     dce:	08 95       	ret

00000dd0 <LCD_Write_Char>:
}

void LCD_Write_Char (unsigned char data)
{
	#if LCD_Mode == 4
	LCD_Port =  ( (LCD_Port & (0x0F)) | (data & (0xF0)) );	// sending upper nibble
     dd0:	9b b3       	in	r25, 0x1b	; 27
     dd2:	9f 70       	andi	r25, 0x0F	; 15
     dd4:	28 2f       	mov	r18, r24
     dd6:	20 7f       	andi	r18, 0xF0	; 240
     dd8:	92 2b       	or	r25, r18
     dda:	9b bb       	out	0x1b, r25	; 27
	set_bit(LCD_Control_Pins_Port,RS);
     ddc:	d8 9a       	sbi	0x1b, 0	; 27
	clear_bit(LCD_Control_Pins_Port,RW);
     dde:	d9 98       	cbi	0x1b, 1	; 27
	set_bit(LCD_Control_Pins_Port,EN);
     de0:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     de2:	35 e0       	ldi	r19, 0x05	; 5
     de4:	3a 95       	dec	r19
     de6:	f1 f7       	brne	.-4      	; 0xde4 <LCD_Write_Char+0x14>
     de8:	00 00       	nop
	_delay_us(1);
	clear_bit(LCD_Control_Pins_Port,EN);
     dea:	da 98       	cbi	0x1b, 2	; 27
     dec:	ef e1       	ldi	r30, 0x1F	; 31
     dee:	f3 e0       	ldi	r31, 0x03	; 3
     df0:	31 97       	sbiw	r30, 0x01	; 1
     df2:	f1 f7       	brne	.-4      	; 0xdf0 <LCD_Write_Char+0x20>
     df4:	00 c0       	rjmp	.+0      	; 0xdf6 <LCD_Write_Char+0x26>
     df6:	00 00       	nop
	_delay_us(200);
	LCD_Port = ((LCD_Port & (0x0F)) | (data<<4));				// sending lower nibble
     df8:	2b b3       	in	r18, 0x1b	; 27
     dfa:	2f 70       	andi	r18, 0x0F	; 15
     dfc:	f0 e1       	ldi	r31, 0x10	; 16
     dfe:	8f 9f       	mul	r24, r31
     e00:	c0 01       	movw	r24, r0
     e02:	11 24       	eor	r1, r1
     e04:	82 2b       	or	r24, r18
     e06:	8b bb       	out	0x1b, r24	; 27
	set_bit(LCD_Control_Pins_Port,EN);
     e08:	da 9a       	sbi	0x1b, 2	; 27
     e0a:	35 e0       	ldi	r19, 0x05	; 5
     e0c:	3a 95       	dec	r19
     e0e:	f1 f7       	brne	.-4      	; 0xe0c <LCD_Write_Char+0x3c>
     e10:	00 00       	nop
	_delay_us(1);
	clear_bit(LCD_Control_Pins_Port,EN);
     e12:	da 98       	cbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e14:	8f e3       	ldi	r24, 0x3F	; 63
     e16:	9f e1       	ldi	r25, 0x1F	; 31
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	f1 f7       	brne	.-4      	; 0xe18 <LCD_Write_Char+0x48>
     e1c:	00 c0       	rjmp	.+0      	; 0xe1e <LCD_Write_Char+0x4e>
     e1e:	00 00       	nop
     e20:	08 95       	ret

00000e22 <LCD_Write_String>:
	#endif
}


void LCD_Write_String (char* text)
{
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	fc 01       	movw	r30, r24
	unsigned char j=0;
	while(text[j] != '\0')	// Looping on the elements of array till the NULL character
     e2a:	80 81       	ld	r24, Z
     e2c:	88 23       	and	r24, r24
     e2e:	a1 f0       	breq	.+40     	; 0xe58 <LCD_Write_String+0x36>
     e30:	8f 01       	movw	r16, r30
     e32:	c0 e0       	ldi	r28, 0x00	; 0
	{	
		LCD_Write_Char(text[j]);
     e34:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <LCD_Write_Char>
     e38:	2f ef       	ldi	r18, 0xFF	; 255
     e3a:	80 e7       	ldi	r24, 0x70	; 112
     e3c:	92 e0       	ldi	r25, 0x02	; 2
     e3e:	21 50       	subi	r18, 0x01	; 1
     e40:	80 40       	sbci	r24, 0x00	; 0
     e42:	90 40       	sbci	r25, 0x00	; 0
     e44:	e1 f7       	brne	.-8      	; 0xe3e <LCD_Write_String+0x1c>
     e46:	00 c0       	rjmp	.+0      	; 0xe48 <LCD_Write_String+0x26>
     e48:	00 00       	nop
		_delay_ms(50);
		j++;
     e4a:	cf 5f       	subi	r28, 0xFF	; 255


void LCD_Write_String (char* text)
{
	unsigned char j=0;
	while(text[j] != '\0')	// Looping on the elements of array till the NULL character
     e4c:	f8 01       	movw	r30, r16
     e4e:	ec 0f       	add	r30, r28
     e50:	f1 1d       	adc	r31, r1
     e52:	80 81       	ld	r24, Z
     e54:	81 11       	cpse	r24, r1
     e56:	ee cf       	rjmp	.-36     	; 0xe34 <LCD_Write_String+0x12>
	{	
		LCD_Write_Char(text[j]);
		_delay_ms(50);
		j++;
	}
}
     e58:	cf 91       	pop	r28
     e5a:	1f 91       	pop	r17
     e5c:	0f 91       	pop	r16
     e5e:	08 95       	ret

00000e60 <LCD_Set_Cursor>:

LCD_Set_Cursor(char row, char pos)
{
	char address = 0;
	if (row < 2 && pos<16)
     e60:	82 30       	cpi	r24, 0x02	; 2
     e62:	50 f4       	brcc	.+20     	; 0xe78 <LCD_Set_Cursor+0x18>
     e64:	60 31       	cpi	r22, 0x10	; 16
     e66:	40 f4       	brcc	.+16     	; 0xe78 <LCD_Set_Cursor+0x18>
	{
		address = (row * 0x40) + pos;
     e68:	90 e4       	ldi	r25, 0x40	; 64
     e6a:	89 9f       	mul	r24, r25
     e6c:	60 0d       	add	r22, r0
     e6e:	11 24       	eor	r1, r1
     e70:	86 2f       	mov	r24, r22
		address |= (1<<7);
		LCD_Send_CMD(address);
     e72:	80 68       	ori	r24, 0x80	; 128
     e74:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
     e78:	08 95       	ret

00000e7a <LCD_Clear_Screen>:
	}
}

void LCD_Clear_Screen()
{
	LCD_Send_CMD(Clear_Display);
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
     e80:	08 95       	ret

00000e82 <LCD_Display_LED>:
unsigned char username[4];
unsigned char pass[4];

void LCD_Display_LED (unsigned char room, unsigned char status)
{
	switch(room)
     e82:	83 33       	cpi	r24, 0x33	; 51
     e84:	09 f4       	brne	.+2      	; 0xe88 <LCD_Display_LED+0x6>
     e86:	47 c0       	rjmp	.+142    	; 0xf16 <LCD_Display_LED+0x94>
     e88:	28 f4       	brcc	.+10     	; 0xe94 <LCD_Display_LED+0x12>
     e8a:	81 33       	cpi	r24, 0x31	; 49
     e8c:	51 f0       	breq	.+20     	; 0xea2 <LCD_Display_LED+0x20>
     e8e:	82 33       	cpi	r24, 0x32	; 50
     e90:	29 f1       	breq	.+74     	; 0xedc <LCD_Display_LED+0x5a>
     e92:	95 c0       	rjmp	.+298    	; 0xfbe <LCD_Display_LED+0x13c>
     e94:	84 33       	cpi	r24, 0x34	; 52
     e96:	09 f4       	brne	.+2      	; 0xe9a <LCD_Display_LED+0x18>
     e98:	5b c0       	rjmp	.+182    	; 0xf50 <LCD_Display_LED+0xce>
     e9a:	85 33       	cpi	r24, 0x35	; 53
     e9c:	09 f4       	brne	.+2      	; 0xea0 <LCD_Display_LED+0x1e>
     e9e:	74 c0       	rjmp	.+232    	; 0xf88 <LCD_Display_LED+0x106>
     ea0:	8e c0       	rjmp	.+284    	; 0xfbe <LCD_Display_LED+0x13c>
	{
		case '1':
		switch(status)
     ea2:	60 33       	cpi	r22, 0x30	; 48
     ea4:	79 f0       	breq	.+30     	; 0xec4 <LCD_Display_LED+0x42>
     ea6:	61 33       	cpi	r22, 0x31	; 49
     ea8:	09 f0       	breq	.+2      	; 0xeac <LCD_Display_LED+0x2a>
     eaa:	89 c0       	rjmp	.+274    	; 0xfbe <LCD_Display_LED+0x13c>
		{
			case '1':
			LCD_Write_String("Room 1 Led");
     eac:	81 e2       	ldi	r24, 0x21	; 33
     eae:	91 e0       	ldi	r25, 0x01	; 1
     eb0:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
     eb4:	80 ec       	ldi	r24, 0xC0	; 192
     eb6:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			LCD_Write_String ("is Turned on");
     eba:	8c e2       	ldi	r24, 0x2C	; 44
     ebc:	91 e0       	ldi	r25, 0x01	; 1
     ebe:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			break;
     ec2:	7d c0       	rjmp	.+250    	; 0xfbe <LCD_Display_LED+0x13c>
			case '0':
			LCD_Write_String("Room 1 Led");
     ec4:	81 e2       	ldi	r24, 0x21	; 33
     ec6:	91 e0       	ldi	r25, 0x01	; 1
     ec8:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
     ecc:	80 ec       	ldi	r24, 0xC0	; 192
     ece:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			LCD_Write_String ("is Turned Off");
     ed2:	89 e3       	ldi	r24, 0x39	; 57
     ed4:	91 e0       	ldi	r25, 0x01	; 1
     ed6:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			break;
     eda:	71 c0       	rjmp	.+226    	; 0xfbe <LCD_Display_LED+0x13c>
		}
		break;
		
		case '2':
		switch(status)
     edc:	60 33       	cpi	r22, 0x30	; 48
     ede:	79 f0       	breq	.+30     	; 0xefe <LCD_Display_LED+0x7c>
     ee0:	61 33       	cpi	r22, 0x31	; 49
     ee2:	09 f0       	breq	.+2      	; 0xee6 <LCD_Display_LED+0x64>
     ee4:	6c c0       	rjmp	.+216    	; 0xfbe <LCD_Display_LED+0x13c>
		{
			case '1':
			LCD_Write_String("Room 2 Led");
     ee6:	87 e4       	ldi	r24, 0x47	; 71
     ee8:	91 e0       	ldi	r25, 0x01	; 1
     eea:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
     eee:	80 ec       	ldi	r24, 0xC0	; 192
     ef0:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			LCD_Write_String ("is Turned on");
     ef4:	8c e2       	ldi	r24, 0x2C	; 44
     ef6:	91 e0       	ldi	r25, 0x01	; 1
     ef8:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			break;
     efc:	60 c0       	rjmp	.+192    	; 0xfbe <LCD_Display_LED+0x13c>
			case '0':
			LCD_Write_String("Room 2 Led");
     efe:	87 e4       	ldi	r24, 0x47	; 71
     f00:	91 e0       	ldi	r25, 0x01	; 1
     f02:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
     f06:	80 ec       	ldi	r24, 0xC0	; 192
     f08:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			LCD_Write_String ("is Turned Off");
     f0c:	89 e3       	ldi	r24, 0x39	; 57
     f0e:	91 e0       	ldi	r25, 0x01	; 1
     f10:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			break;
     f14:	54 c0       	rjmp	.+168    	; 0xfbe <LCD_Display_LED+0x13c>
		}
		break;
		
		case '3':
		switch(status)
     f16:	60 33       	cpi	r22, 0x30	; 48
     f18:	79 f0       	breq	.+30     	; 0xf38 <LCD_Display_LED+0xb6>
     f1a:	61 33       	cpi	r22, 0x31	; 49
     f1c:	09 f0       	breq	.+2      	; 0xf20 <LCD_Display_LED+0x9e>
     f1e:	4f c0       	rjmp	.+158    	; 0xfbe <LCD_Display_LED+0x13c>
		{
			case '1':
			LCD_Write_String("Room 3 Led");
     f20:	82 e5       	ldi	r24, 0x52	; 82
     f22:	91 e0       	ldi	r25, 0x01	; 1
     f24:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
     f28:	80 ec       	ldi	r24, 0xC0	; 192
     f2a:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			LCD_Write_String ("is Turned on");
     f2e:	8c e2       	ldi	r24, 0x2C	; 44
     f30:	91 e0       	ldi	r25, 0x01	; 1
     f32:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			break;
     f36:	43 c0       	rjmp	.+134    	; 0xfbe <LCD_Display_LED+0x13c>
			case '0':
			LCD_Write_String("Room 3 Led");
     f38:	82 e5       	ldi	r24, 0x52	; 82
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
     f40:	80 ec       	ldi	r24, 0xC0	; 192
     f42:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			LCD_Write_String ("is Turned Off");
     f46:	89 e3       	ldi	r24, 0x39	; 57
     f48:	91 e0       	ldi	r25, 0x01	; 1
     f4a:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			break;
     f4e:	37 c0       	rjmp	.+110    	; 0xfbe <LCD_Display_LED+0x13c>
		}
		break;
		
		case '4':
		switch(status)
     f50:	60 33       	cpi	r22, 0x30	; 48
     f52:	71 f0       	breq	.+28     	; 0xf70 <LCD_Display_LED+0xee>
     f54:	61 33       	cpi	r22, 0x31	; 49
     f56:	99 f5       	brne	.+102    	; 0xfbe <LCD_Display_LED+0x13c>
		{
			case '1':
			LCD_Write_String("Room 4 Led");
     f58:	8d e5       	ldi	r24, 0x5D	; 93
     f5a:	91 e0       	ldi	r25, 0x01	; 1
     f5c:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
     f60:	80 ec       	ldi	r24, 0xC0	; 192
     f62:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			LCD_Write_String ("is Turned on");
     f66:	8c e2       	ldi	r24, 0x2C	; 44
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			break;
     f6e:	27 c0       	rjmp	.+78     	; 0xfbe <LCD_Display_LED+0x13c>
			case '0':
			LCD_Write_String("Room 4 Led");
     f70:	8d e5       	ldi	r24, 0x5D	; 93
     f72:	91 e0       	ldi	r25, 0x01	; 1
     f74:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
     f78:	80 ec       	ldi	r24, 0xC0	; 192
     f7a:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			LCD_Write_String ("is Turned Off");
     f7e:	89 e3       	ldi	r24, 0x39	; 57
     f80:	91 e0       	ldi	r25, 0x01	; 1
     f82:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			break;
     f86:	1b c0       	rjmp	.+54     	; 0xfbe <LCD_Display_LED+0x13c>
		}
		break;
		
		case '5':
		switch(status)
     f88:	60 33       	cpi	r22, 0x30	; 48
     f8a:	71 f0       	breq	.+28     	; 0xfa8 <LCD_Display_LED+0x126>
     f8c:	61 33       	cpi	r22, 0x31	; 49
     f8e:	b9 f4       	brne	.+46     	; 0xfbe <LCD_Display_LED+0x13c>
		{
			case '1':
			LCD_Write_String("Room 5 Led");
     f90:	88 e6       	ldi	r24, 0x68	; 104
     f92:	91 e0       	ldi	r25, 0x01	; 1
     f94:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
     f98:	80 ec       	ldi	r24, 0xC0	; 192
     f9a:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			LCD_Write_String ("is Turned on");
     f9e:	8c e2       	ldi	r24, 0x2C	; 44
     fa0:	91 e0       	ldi	r25, 0x01	; 1
     fa2:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			break;
     fa6:	0b c0       	rjmp	.+22     	; 0xfbe <LCD_Display_LED+0x13c>
			case '0':
			LCD_Write_String("Room 5 Led");
     fa8:	88 e6       	ldi	r24, 0x68	; 104
     faa:	91 e0       	ldi	r25, 0x01	; 1
     fac:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
     fb0:	80 ec       	ldi	r24, 0xC0	; 192
     fb2:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			LCD_Write_String ("is Turned Off");
     fb6:	89 e3       	ldi	r24, 0x39	; 57
     fb8:	91 e0       	ldi	r25, 0x01	; 1
     fba:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
     fbe:	2f ef       	ldi	r18, 0xFF	; 255
     fc0:	83 ed       	ldi	r24, 0xD3	; 211
     fc2:	90 e3       	ldi	r25, 0x30	; 48
     fc4:	21 50       	subi	r18, 0x01	; 1
     fc6:	80 40       	sbci	r24, 0x00	; 0
     fc8:	90 40       	sbci	r25, 0x00	; 0
     fca:	e1 f7       	brne	.-8      	; 0xfc4 <LCD_Display_LED+0x142>
     fcc:	00 c0       	rjmp	.+0      	; 0xfce <LCD_Display_LED+0x14c>
     fce:	00 00       	nop
			break;
		}
		break;
	}
	_delay_ms(1000);
	LCD_Clear_Screen();
     fd0:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
     fd4:	08 95       	ret

00000fd6 <LCD_Welcome_Message>:
}

void LCD_Welcome_Message()
{
	LCD_Write_String ("Welcome to Smart");
     fd6:	83 e7       	ldi	r24, 0x73	; 115
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
	LCD_Send_CMD(Row_2_pos_0);		// Get to the second line
     fde:	80 ec       	ldi	r24, 0xC0	; 192
     fe0:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
	LCD_Write_String ("Home System");
     fe4:	84 ed       	ldi	r24, 0xD4	; 212
     fe6:	92 e0       	ldi	r25, 0x02	; 2
     fe8:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
     fec:	2f ef       	ldi	r18, 0xFF	; 255
     fee:	83 ed       	ldi	r24, 0xD3	; 211
     ff0:	90 e3       	ldi	r25, 0x30	; 48
     ff2:	21 50       	subi	r18, 0x01	; 1
     ff4:	80 40       	sbci	r24, 0x00	; 0
     ff6:	90 40       	sbci	r25, 0x00	; 0
     ff8:	e1 f7       	brne	.-8      	; 0xff2 <LCD_Welcome_Message+0x1c>
     ffa:	00 c0       	rjmp	.+0      	; 0xffc <LCD_Welcome_Message+0x26>
     ffc:	00 00       	nop
	_delay_ms(1000);
	LCD_Clear_Screen();
     ffe:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
    1002:	08 95       	ret

00001004 <LCD_Rooms_Leds_Control>:



	
void LCD_Rooms_Leds_Control()
{
    1004:	1f 93       	push	r17
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
	unsigned char Keypad_Value = 0;	
	unsigned char room_no_temp = 0;
	unsigned char room_on_off_temp = 0;
	
	LCD_Write_String ("Choose a room ");
    100a:	84 e8       	ldi	r24, 0x84	; 132
    100c:	91 e0       	ldi	r25, 0x01	; 1
    100e:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
    1012:	2f ef       	ldi	r18, 0xFF	; 255
    1014:	83 ed       	ldi	r24, 0xD3	; 211
    1016:	90 e3       	ldi	r25, 0x30	; 48
    1018:	21 50       	subi	r18, 0x01	; 1
    101a:	80 40       	sbci	r24, 0x00	; 0
    101c:	90 40       	sbci	r25, 0x00	; 0
    101e:	e1 f7       	brne	.-8      	; 0x1018 <LCD_Rooms_Leds_Control+0x14>
    1020:	00 c0       	rjmp	.+0      	; 0x1022 <LCD_Rooms_Leds_Control+0x1e>
    1022:	00 00       	nop
	_delay_ms(1000);
	LCD_Clear_Screen();
    1024:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
	
	LCD_Write_String ("1. Room 1");
    1028:	83 e9       	ldi	r24, 0x93	; 147
    102a:	91 e0       	ldi	r25, 0x01	; 1
    102c:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
	LCD_Send_CMD(Row_2_pos_0);		// Get to the second line
    1030:	80 ec       	ldi	r24, 0xC0	; 192
    1032:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
	LCD_Write_String ("2. Room 2");
    1036:	8d e9       	ldi	r24, 0x9D	; 157
    1038:	91 e0       	ldi	r25, 0x01	; 1
    103a:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
    103e:	2f ef       	ldi	r18, 0xFF	; 255
    1040:	89 e6       	ldi	r24, 0x69	; 105
    1042:	98 e1       	ldi	r25, 0x18	; 24
    1044:	21 50       	subi	r18, 0x01	; 1
    1046:	80 40       	sbci	r24, 0x00	; 0
    1048:	90 40       	sbci	r25, 0x00	; 0
    104a:	e1 f7       	brne	.-8      	; 0x1044 <LCD_Rooms_Leds_Control+0x40>
    104c:	00 c0       	rjmp	.+0      	; 0x104e <LCD_Rooms_Leds_Control+0x4a>
    104e:	00 00       	nop
	_delay_ms(500);
	LCD_Clear_Screen();
    1050:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
	
	
	LCD_Write_String ("3. Room 3");
    1054:	87 ea       	ldi	r24, 0xA7	; 167
    1056:	91 e0       	ldi	r25, 0x01	; 1
    1058:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
	LCD_Send_CMD(Row_2_pos_0);		// Get to the second line
    105c:	80 ec       	ldi	r24, 0xC0	; 192
    105e:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
	LCD_Write_String ("4. Room 4");
    1062:	81 eb       	ldi	r24, 0xB1	; 177
    1064:	91 e0       	ldi	r25, 0x01	; 1
    1066:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
    106a:	2f ef       	ldi	r18, 0xFF	; 255
    106c:	89 e6       	ldi	r24, 0x69	; 105
    106e:	98 e1       	ldi	r25, 0x18	; 24
    1070:	21 50       	subi	r18, 0x01	; 1
    1072:	80 40       	sbci	r24, 0x00	; 0
    1074:	90 40       	sbci	r25, 0x00	; 0
    1076:	e1 f7       	brne	.-8      	; 0x1070 <LCD_Rooms_Leds_Control+0x6c>
    1078:	00 c0       	rjmp	.+0      	; 0x107a <LCD_Rooms_Leds_Control+0x76>
    107a:	00 00       	nop
	_delay_ms(500);
	LCD_Clear_Screen();
    107c:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
	
	
	LCD_Write_String ("5. Room 5");
    1080:	8b eb       	ldi	r24, 0xBB	; 187
    1082:	91 e0       	ldi	r25, 0x01	; 1
    1084:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
	LCD_Send_CMD(Row_2_pos_0);		// Get to the second line
    1088:	80 ec       	ldi	r24, 0xC0	; 192
    108a:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
	LCD_Write_String ("6. All Rooms");
    108e:	85 ec       	ldi	r24, 0xC5	; 197
    1090:	91 e0       	ldi	r25, 0x01	; 1
    1092:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
    1096:	2f ef       	ldi	r18, 0xFF	; 255
    1098:	89 e6       	ldi	r24, 0x69	; 105
    109a:	98 e1       	ldi	r25, 0x18	; 24
    109c:	21 50       	subi	r18, 0x01	; 1
    109e:	80 40       	sbci	r24, 0x00	; 0
    10a0:	90 40       	sbci	r25, 0x00	; 0
    10a2:	e1 f7       	brne	.-8      	; 0x109c <LCD_Rooms_Leds_Control+0x98>
    10a4:	00 c0       	rjmp	.+0      	; 0x10a6 <LCD_Rooms_Leds_Control+0xa2>
    10a6:	00 00       	nop
	_delay_ms(500);
	LCD_Clear_Screen();
    10a8:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
	
	LCD_Write_String ("Your Choice : ");
    10ac:	82 ed       	ldi	r24, 0xD2	; 210
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
	LCD_Send_CMD(Display_ON_Cusror_ON_Blink_ON);
    10b4:	8f e0       	ldi	r24, 0x0F	; 15
    10b6:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
	
	while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
	{
		Keypad_Value = Keypad_Get_Value();
    10ba:	0e 94 36 06 	call	0xc6c	; 0xc6c <Keypad_Get_Value>
    10be:	c8 2f       	mov	r28, r24
	LCD_Clear_Screen();
	
	LCD_Write_String ("Your Choice : ");
	LCD_Send_CMD(Display_ON_Cusror_ON_Blink_ON);
	
	while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
    10c0:	80 ed       	ldi	r24, 0xD0	; 208
    10c2:	8c 0f       	add	r24, r28
    10c4:	8a 30       	cpi	r24, 0x0A	; 10
    10c6:	c8 f7       	brcc	.-14     	; 0x10ba <LCD_Rooms_Leds_Control+0xb6>
	{
		Keypad_Value = Keypad_Get_Value();
	}
	
	LCD_Write_Char(Keypad_Value);
    10c8:	8c 2f       	mov	r24, r28
    10ca:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <LCD_Write_Char>
    10ce:	2f ef       	ldi	r18, 0xFF	; 255
    10d0:	89 e6       	ldi	r24, 0x69	; 105
    10d2:	98 e1       	ldi	r25, 0x18	; 24
    10d4:	21 50       	subi	r18, 0x01	; 1
    10d6:	80 40       	sbci	r24, 0x00	; 0
    10d8:	90 40       	sbci	r25, 0x00	; 0
    10da:	e1 f7       	brne	.-8      	; 0x10d4 <LCD_Rooms_Leds_Control+0xd0>
    10dc:	00 c0       	rjmp	.+0      	; 0x10de <LCD_Rooms_Leds_Control+0xda>
    10de:	00 00       	nop
	_delay_ms(500);
	LCD_Clear_Screen();
    10e0:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
	room_no_temp = Keypad_Value;
	
	while (!((room_no_temp >= Ascii_1) && (room_no_temp <= Ascii_6)))
    10e4:	8f ec       	ldi	r24, 0xCF	; 207
    10e6:	8c 0f       	add	r24, r28
    10e8:	86 30       	cpi	r24, 0x06	; 6
    10ea:	08 f4       	brcc	.+2      	; 0x10ee <LCD_Rooms_Leds_Control+0xea>
    10ec:	da c0       	rjmp	.+436    	; 0x12a2 <LCD_Rooms_Leds_Control+0x29e>
	{
		LCD_Write_String ("Please Choose");
    10ee:	81 ee       	ldi	r24, 0xE1	; 225
    10f0:	91 e0       	ldi	r25, 0x01	; 1
    10f2:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
		LCD_Send_CMD(Row_2_pos_0);
    10f6:	80 ec       	ldi	r24, 0xC0	; 192
    10f8:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
		LCD_Write_String ("from 1 to 6");	
    10fc:	84 ea       	ldi	r24, 0xA4	; 164
    10fe:	93 e0       	ldi	r25, 0x03	; 3
    1100:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
    1104:	2f ef       	ldi	r18, 0xFF	; 255
    1106:	83 ed       	ldi	r24, 0xD3	; 211
    1108:	90 e3       	ldi	r25, 0x30	; 48
    110a:	21 50       	subi	r18, 0x01	; 1
    110c:	80 40       	sbci	r24, 0x00	; 0
    110e:	90 40       	sbci	r25, 0x00	; 0
    1110:	e1 f7       	brne	.-8      	; 0x110a <LCD_Rooms_Leds_Control+0x106>
    1112:	00 c0       	rjmp	.+0      	; 0x1114 <LCD_Rooms_Leds_Control+0x110>
    1114:	00 00       	nop
		_delay_ms(1000);
		LCD_Clear_Screen();
    1116:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
		
		Keypad_Value = 0;
		while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
		{
			Keypad_Value = Keypad_Get_Value();
    111a:	0e 94 36 06 	call	0xc6c	; 0xc6c <Keypad_Get_Value>
    111e:	c8 2f       	mov	r28, r24
		LCD_Write_String ("from 1 to 6");	
		_delay_ms(1000);
		LCD_Clear_Screen();
		
		Keypad_Value = 0;
		while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
    1120:	80 ed       	ldi	r24, 0xD0	; 208
    1122:	8c 0f       	add	r24, r28
    1124:	8a 30       	cpi	r24, 0x0A	; 10
    1126:	c8 f7       	brcc	.-14     	; 0x111a <LCD_Rooms_Leds_Control+0x116>
		{
			Keypad_Value = Keypad_Get_Value();
		}
		
		LCD_Write_Char(Keypad_Value);
    1128:	8c 2f       	mov	r24, r28
    112a:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <LCD_Write_Char>
    112e:	2f ef       	ldi	r18, 0xFF	; 255
    1130:	89 e6       	ldi	r24, 0x69	; 105
    1132:	98 e1       	ldi	r25, 0x18	; 24
    1134:	21 50       	subi	r18, 0x01	; 1
    1136:	80 40       	sbci	r24, 0x00	; 0
    1138:	90 40       	sbci	r25, 0x00	; 0
    113a:	e1 f7       	brne	.-8      	; 0x1134 <LCD_Rooms_Leds_Control+0x130>
    113c:	00 c0       	rjmp	.+0      	; 0x113e <LCD_Rooms_Leds_Control+0x13a>
    113e:	00 00       	nop
		_delay_ms(500);
		LCD_Clear_Screen();
    1140:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
	LCD_Write_Char(Keypad_Value);
	_delay_ms(500);
	LCD_Clear_Screen();
	room_no_temp = Keypad_Value;
	
	while (!((room_no_temp >= Ascii_1) && (room_no_temp <= Ascii_6)))
    1144:	8f ec       	ldi	r24, 0xCF	; 207
    1146:	8c 0f       	add	r24, r28
    1148:	86 30       	cpi	r24, 0x06	; 6
    114a:	88 f6       	brcc	.-94     	; 0x10ee <LCD_Rooms_Leds_Control+0xea>
    114c:	aa c0       	rjmp	.+340    	; 0x12a2 <LCD_Rooms_Leds_Control+0x29e>
	LCD_Clear_Screen();
	
	Keypad_Value = 0;
	while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
	{
		Keypad_Value = Keypad_Get_Value();
    114e:	0e 94 36 06 	call	0xc6c	; 0xc6c <Keypad_Get_Value>
    1152:	d8 2f       	mov	r29, r24
	LCD_Write_String ("Turn OFF : 0");
	_delay_ms(2000);
	LCD_Clear_Screen();
	
	Keypad_Value = 0;
	while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
    1154:	10 ed       	ldi	r17, 0xD0	; 208
    1156:	18 0f       	add	r17, r24
    1158:	1a 30       	cpi	r17, 0x0A	; 10
    115a:	c8 f7       	brcc	.-14     	; 0x114e <LCD_Rooms_Leds_Control+0x14a>
	{
		Keypad_Value = Keypad_Get_Value();
	}
	LCD_Write_Char(Keypad_Value);
    115c:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <LCD_Write_Char>
    1160:	2f ef       	ldi	r18, 0xFF	; 255
    1162:	83 ed       	ldi	r24, 0xD3	; 211
    1164:	90 e3       	ldi	r25, 0x30	; 48
    1166:	21 50       	subi	r18, 0x01	; 1
    1168:	80 40       	sbci	r24, 0x00	; 0
    116a:	90 40       	sbci	r25, 0x00	; 0
    116c:	e1 f7       	brne	.-8      	; 0x1166 <LCD_Rooms_Leds_Control+0x162>
    116e:	00 c0       	rjmp	.+0      	; 0x1170 <LCD_Rooms_Leds_Control+0x16c>
    1170:	00 00       	nop
	_delay_ms(1000);
	LCD_Clear_Screen();
    1172:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
	room_on_off_temp = Keypad_Value;
	
	while ((room_on_off_temp != Ascii_0) && (room_on_off_temp != Ascii_1))
    1176:	12 30       	cpi	r17, 0x02	; 2
    1178:	80 f1       	brcs	.+96     	; 0x11da <LCD_Rooms_Leds_Control+0x1d6>
	{
		LCD_Write_String ("Please Choose");
    117a:	81 ee       	ldi	r24, 0xE1	; 225
    117c:	91 e0       	ldi	r25, 0x01	; 1
    117e:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
		LCD_Send_CMD(Row_2_pos_0);
    1182:	80 ec       	ldi	r24, 0xC0	; 192
    1184:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
		LCD_Set_Cursor(1,3);
    1188:	63 e0       	ldi	r22, 0x03	; 3
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	0e 94 30 07 	call	0xe60	; 0xe60 <LCD_Set_Cursor>
		LCD_Write_String ("1 or 0");
    1190:	87 ed       	ldi	r24, 0xD7	; 215
    1192:	93 e0       	ldi	r25, 0x03	; 3
    1194:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
    1198:	2f ef       	ldi	r18, 0xFF	; 255
    119a:	83 ed       	ldi	r24, 0xD3	; 211
    119c:	90 e3       	ldi	r25, 0x30	; 48
    119e:	21 50       	subi	r18, 0x01	; 1
    11a0:	80 40       	sbci	r24, 0x00	; 0
    11a2:	90 40       	sbci	r25, 0x00	; 0
    11a4:	e1 f7       	brne	.-8      	; 0x119e <LCD_Rooms_Leds_Control+0x19a>
    11a6:	00 c0       	rjmp	.+0      	; 0x11a8 <LCD_Rooms_Leds_Control+0x1a4>
    11a8:	00 00       	nop
		_delay_ms(1000);
		LCD_Clear_Screen();
    11aa:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
		
		Keypad_Value = 0;
		while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
		{
			Keypad_Value = Keypad_Get_Value();
    11ae:	0e 94 36 06 	call	0xc6c	; 0xc6c <Keypad_Get_Value>
    11b2:	d8 2f       	mov	r29, r24
		LCD_Write_String ("1 or 0");
		_delay_ms(1000);
		LCD_Clear_Screen();
		
		Keypad_Value = 0;
		while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
    11b4:	10 ed       	ldi	r17, 0xD0	; 208
    11b6:	18 0f       	add	r17, r24
    11b8:	1a 30       	cpi	r17, 0x0A	; 10
    11ba:	c8 f7       	brcc	.-14     	; 0x11ae <LCD_Rooms_Leds_Control+0x1aa>
		{
			Keypad_Value = Keypad_Get_Value();
		}
		
		LCD_Write_Char(Keypad_Value);
    11bc:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <LCD_Write_Char>
    11c0:	2f ef       	ldi	r18, 0xFF	; 255
    11c2:	89 e6       	ldi	r24, 0x69	; 105
    11c4:	98 e1       	ldi	r25, 0x18	; 24
    11c6:	21 50       	subi	r18, 0x01	; 1
    11c8:	80 40       	sbci	r24, 0x00	; 0
    11ca:	90 40       	sbci	r25, 0x00	; 0
    11cc:	e1 f7       	brne	.-8      	; 0x11c6 <LCD_Rooms_Leds_Control+0x1c2>
    11ce:	00 c0       	rjmp	.+0      	; 0x11d0 <LCD_Rooms_Leds_Control+0x1cc>
    11d0:	00 00       	nop
		_delay_ms(500);
		LCD_Clear_Screen();
    11d2:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
	LCD_Write_Char(Keypad_Value);
	_delay_ms(1000);
	LCD_Clear_Screen();
	room_on_off_temp = Keypad_Value;
	
	while ((room_on_off_temp != Ascii_0) && (room_on_off_temp != Ascii_1))
    11d6:	12 30       	cpi	r17, 0x02	; 2
    11d8:	80 f6       	brcc	.-96     	; 0x117a <LCD_Rooms_Leds_Control+0x176>
		LCD_Clear_Screen();
		room_on_off_temp = Keypad_Value;
	}
	Keypad_Value = 0;
	
	if(room_no_temp == Ascii_6)
    11da:	c6 33       	cpi	r28, 0x36	; 54
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <LCD_Rooms_Leds_Control+0x1dc>
    11de:	58 c0       	rjmp	.+176    	; 0x1290 <LCD_Rooms_Leds_Control+0x28c>
	{
		if(room_on_off_temp == Ascii_1)
    11e0:	d1 33       	cpi	r29, 0x31	; 49
    11e2:	59 f5       	brne	.+86     	; 0x123a <LCD_Rooms_Leds_Control+0x236>
		{
			LED_STAT(ON,Room1);
    11e4:	61 e3       	ldi	r22, 0x31	; 49
    11e6:	81 e3       	ldi	r24, 0x31	; 49
    11e8:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <LED_STAT>
			LED_STAT(ON,Room2);
    11ec:	62 e3       	ldi	r22, 0x32	; 50
    11ee:	81 e3       	ldi	r24, 0x31	; 49
    11f0:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <LED_STAT>
			LED_STAT(ON,Room3);
    11f4:	63 e3       	ldi	r22, 0x33	; 51
    11f6:	81 e3       	ldi	r24, 0x31	; 49
    11f8:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <LED_STAT>
			LED_STAT(ON,Room4);
    11fc:	64 e3       	ldi	r22, 0x34	; 52
    11fe:	81 e3       	ldi	r24, 0x31	; 49
    1200:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <LED_STAT>
			LED_STAT(ON,Room5);
    1204:	65 e3       	ldi	r22, 0x35	; 53
    1206:	81 e3       	ldi	r24, 0x31	; 49
    1208:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <LED_STAT>
			
			LCD_Write_String("All Leds are ");
    120c:	8f ee       	ldi	r24, 0xEF	; 239
    120e:	91 e0       	ldi	r25, 0x01	; 1
    1210:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    1214:	80 ec       	ldi	r24, 0xC0	; 192
    1216:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			LCD_Write_String ("Turned On");
    121a:	8b ee       	ldi	r24, 0xEB	; 235
    121c:	93 e0       	ldi	r25, 0x03	; 3
    121e:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
    1222:	2f ef       	ldi	r18, 0xFF	; 255
    1224:	83 ed       	ldi	r24, 0xD3	; 211
    1226:	90 e3       	ldi	r25, 0x30	; 48
    1228:	21 50       	subi	r18, 0x01	; 1
    122a:	80 40       	sbci	r24, 0x00	; 0
    122c:	90 40       	sbci	r25, 0x00	; 0
    122e:	e1 f7       	brne	.-8      	; 0x1228 <LCD_Rooms_Leds_Control+0x224>
    1230:	00 c0       	rjmp	.+0      	; 0x1232 <LCD_Rooms_Leds_Control+0x22e>
    1232:	00 00       	nop
			_delay_ms(1000);
			LCD_Clear_Screen();
    1234:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
    1238:	4e c0       	rjmp	.+156    	; 0x12d6 <LCD_Rooms_Leds_Control+0x2d2>
		}
		else
		{
			LED_STAT(OFF,Room1);
    123a:	61 e3       	ldi	r22, 0x31	; 49
    123c:	80 e3       	ldi	r24, 0x30	; 48
    123e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <LED_STAT>
			LED_STAT(OFF,Room2);
    1242:	62 e3       	ldi	r22, 0x32	; 50
    1244:	80 e3       	ldi	r24, 0x30	; 48
    1246:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <LED_STAT>
			LED_STAT(OFF,Room3);
    124a:	63 e3       	ldi	r22, 0x33	; 51
    124c:	80 e3       	ldi	r24, 0x30	; 48
    124e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <LED_STAT>
			LED_STAT(OFF,Room4);
    1252:	64 e3       	ldi	r22, 0x34	; 52
    1254:	80 e3       	ldi	r24, 0x30	; 48
    1256:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <LED_STAT>
			LED_STAT(OFF,Room5);
    125a:	65 e3       	ldi	r22, 0x35	; 53
    125c:	80 e3       	ldi	r24, 0x30	; 48
    125e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <LED_STAT>
			
			LCD_Write_String("All Leds are ");
    1262:	8f ee       	ldi	r24, 0xEF	; 239
    1264:	91 e0       	ldi	r25, 0x01	; 1
    1266:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    126a:	80 ec       	ldi	r24, 0xC0	; 192
    126c:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			LCD_Write_String ("Turned OFF");
    1270:	8d ef       	ldi	r24, 0xFD	; 253
    1272:	91 e0       	ldi	r25, 0x01	; 1
    1274:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
    1278:	2f ef       	ldi	r18, 0xFF	; 255
    127a:	83 ed       	ldi	r24, 0xD3	; 211
    127c:	90 e3       	ldi	r25, 0x30	; 48
    127e:	21 50       	subi	r18, 0x01	; 1
    1280:	80 40       	sbci	r24, 0x00	; 0
    1282:	90 40       	sbci	r25, 0x00	; 0
    1284:	e1 f7       	brne	.-8      	; 0x127e <LCD_Rooms_Leds_Control+0x27a>
    1286:	00 c0       	rjmp	.+0      	; 0x1288 <LCD_Rooms_Leds_Control+0x284>
    1288:	00 00       	nop
			_delay_ms(1000);
			LCD_Clear_Screen();
    128a:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
    128e:	23 c0       	rjmp	.+70     	; 0x12d6 <LCD_Rooms_Leds_Control+0x2d2>
		}
	}
	else
	{
		LED_STAT(room_on_off_temp,room_no_temp);
    1290:	6c 2f       	mov	r22, r28
    1292:	8d 2f       	mov	r24, r29
    1294:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <LED_STAT>
		LCD_Display_LED (room_no_temp, room_on_off_temp);
    1298:	6d 2f       	mov	r22, r29
    129a:	8c 2f       	mov	r24, r28
    129c:	0e 94 41 07 	call	0xe82	; 0xe82 <LCD_Display_LED>
	}
}
    12a0:	1a c0       	rjmp	.+52     	; 0x12d6 <LCD_Rooms_Leds_Control+0x2d2>
		_delay_ms(500);
		LCD_Clear_Screen();
		room_no_temp = Keypad_Value;
	}
	
	LCD_Send_CMD(Display_ON_Cusror_OFF_Blink_OFF);
    12a2:	8c e0       	ldi	r24, 0x0C	; 12
    12a4:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
	
	LCD_Write_String ("Turn ON : 1");
    12a8:	88 e0       	ldi	r24, 0x08	; 8
    12aa:	92 e0       	ldi	r25, 0x02	; 2
    12ac:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
	LCD_Send_CMD(Row_2_pos_0);
    12b0:	80 ec       	ldi	r24, 0xC0	; 192
    12b2:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
	LCD_Write_String ("Turn OFF : 0");
    12b6:	84 e1       	ldi	r24, 0x14	; 20
    12b8:	92 e0       	ldi	r25, 0x02	; 2
    12ba:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
    12be:	2f ef       	ldi	r18, 0xFF	; 255
    12c0:	87 ea       	ldi	r24, 0xA7	; 167
    12c2:	91 e6       	ldi	r25, 0x61	; 97
    12c4:	21 50       	subi	r18, 0x01	; 1
    12c6:	80 40       	sbci	r24, 0x00	; 0
    12c8:	90 40       	sbci	r25, 0x00	; 0
    12ca:	e1 f7       	brne	.-8      	; 0x12c4 <LCD_Rooms_Leds_Control+0x2c0>
    12cc:	00 c0       	rjmp	.+0      	; 0x12ce <LCD_Rooms_Leds_Control+0x2ca>
    12ce:	00 00       	nop
	_delay_ms(2000);
	LCD_Clear_Screen();
    12d0:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
    12d4:	3c cf       	rjmp	.-392    	; 0x114e <LCD_Rooms_Leds_Control+0x14a>
	else
	{
		LED_STAT(room_on_off_temp,room_no_temp);
		LCD_Display_LED (room_no_temp, room_on_off_temp);
	}
}
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	1f 91       	pop	r17
    12dc:	08 95       	ret

000012de <LCD_User_Menu>:


void LCD_User_Menu()
{
	LCD_Write_String("1.Control Leds");
    12de:	81 e2       	ldi	r24, 0x21	; 33
    12e0:	92 e0       	ldi	r25, 0x02	; 2
    12e2:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
	LCD_Send_CMD(Row_2_pos_0);
    12e6:	80 ec       	ldi	r24, 0xC0	; 192
    12e8:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
	LCD_Write_String ("2.Dimming Lamp");
    12ec:	80 e3       	ldi	r24, 0x30	; 48
    12ee:	92 e0       	ldi	r25, 0x02	; 2
    12f0:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
    12f4:	2f ef       	ldi	r18, 0xFF	; 255
    12f6:	89 e6       	ldi	r24, 0x69	; 105
    12f8:	98 e1       	ldi	r25, 0x18	; 24
    12fa:	21 50       	subi	r18, 0x01	; 1
    12fc:	80 40       	sbci	r24, 0x00	; 0
    12fe:	90 40       	sbci	r25, 0x00	; 0
    1300:	e1 f7       	brne	.-8      	; 0x12fa <LCD_User_Menu+0x1c>
    1302:	00 c0       	rjmp	.+0      	; 0x1304 <LCD_User_Menu+0x26>
    1304:	00 00       	nop
	_delay_ms(500);
	LCD_Clear_Screen();
    1306:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
	
	LCD_Write_String("3.Close the Door");
    130a:	8f e3       	ldi	r24, 0x3F	; 63
    130c:	92 e0       	ldi	r25, 0x02	; 2
    130e:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
	LCD_Send_CMD(Row_2_pos_0);
    1312:	80 ec       	ldi	r24, 0xC0	; 192
    1314:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
	LCD_Write_String ("4.Logout");
    1318:	80 e5       	ldi	r24, 0x50	; 80
    131a:	92 e0       	ldi	r25, 0x02	; 2
    131c:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
    1320:	2f ef       	ldi	r18, 0xFF	; 255
    1322:	89 e6       	ldi	r24, 0x69	; 105
    1324:	98 e1       	ldi	r25, 0x18	; 24
    1326:	21 50       	subi	r18, 0x01	; 1
    1328:	80 40       	sbci	r24, 0x00	; 0
    132a:	90 40       	sbci	r25, 0x00	; 0
    132c:	e1 f7       	brne	.-8      	; 0x1326 <LCD_User_Menu+0x48>
    132e:	00 c0       	rjmp	.+0      	; 0x1330 <LCD_User_Menu+0x52>
    1330:	00 00       	nop
	_delay_ms(500);
	LCD_Clear_Screen();
    1332:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
    1336:	08 95       	ret

00001338 <LCD_User_Interfacing>:
}



void LCD_User_Interfacing()
{
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
	unsigned char option = 0;
	unsigned char brightness_level = 0;
	
	while(option != Ascii_4)
	{
		LCD_User_Menu();
    133c:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_User_Menu>
		
		LCD_Write_String ("Your Choice : ");
    1340:	82 ed       	ldi	r24, 0xD2	; 210
    1342:	91 e0       	ldi	r25, 0x01	; 1
    1344:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
		LCD_Send_CMD(Display_ON_Cusror_ON_Blink_ON);
    1348:	8f e0       	ldi	r24, 0x0F	; 15
    134a:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
		
		Keypad_Value = 0;
		while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
		{
			Keypad_Value = Keypad_Get_Value();
    134e:	0e 94 36 06 	call	0xc6c	; 0xc6c <Keypad_Get_Value>
    1352:	c8 2f       	mov	r28, r24
		
		LCD_Write_String ("Your Choice : ");
		LCD_Send_CMD(Display_ON_Cusror_ON_Blink_ON);
		
		Keypad_Value = 0;
		while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
    1354:	80 ed       	ldi	r24, 0xD0	; 208
    1356:	8c 0f       	add	r24, r28
    1358:	8a 30       	cpi	r24, 0x0A	; 10
    135a:	c8 f7       	brcc	.-14     	; 0x134e <LCD_User_Interfacing+0x16>
		{
			Keypad_Value = Keypad_Get_Value();
		}
		
		LCD_Write_Char(Keypad_Value);
    135c:	8c 2f       	mov	r24, r28
    135e:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <LCD_Write_Char>
    1362:	2f ef       	ldi	r18, 0xFF	; 255
    1364:	89 e6       	ldi	r24, 0x69	; 105
    1366:	98 e1       	ldi	r25, 0x18	; 24
    1368:	21 50       	subi	r18, 0x01	; 1
    136a:	80 40       	sbci	r24, 0x00	; 0
    136c:	90 40       	sbci	r25, 0x00	; 0
    136e:	e1 f7       	brne	.-8      	; 0x1368 <LCD_User_Interfacing+0x30>
    1370:	00 c0       	rjmp	.+0      	; 0x1372 <LCD_User_Interfacing+0x3a>
    1372:	00 00       	nop
		_delay_ms(500);
		LCD_Clear_Screen();
    1374:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
		
		while (!((Keypad_Value >= Ascii_1) && (Keypad_Value <= Ascii_4)))
    1378:	8f ec       	ldi	r24, 0xCF	; 207
    137a:	8c 0f       	add	r24, r28
    137c:	84 30       	cpi	r24, 0x04	; 4
    137e:	d8 f1       	brcs	.+118    	; 0x13f6 <LCD_User_Interfacing+0xbe>
		{
			LCD_Send_CMD(Display_ON_Cusror_ON_Blink_OFF);
    1380:	8e e0       	ldi	r24, 0x0E	; 14
    1382:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			LCD_Write_String ("Please Choose");
    1386:	81 ee       	ldi	r24, 0xE1	; 225
    1388:	91 e0       	ldi	r25, 0x01	; 1
    138a:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    138e:	80 ec       	ldi	r24, 0xC0	; 192
    1390:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			LCD_Write_String ("from 1 to 4");
    1394:	84 eb       	ldi	r24, 0xB4	; 180
    1396:	97 e0       	ldi	r25, 0x07	; 7
    1398:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
    139c:	2f ef       	ldi	r18, 0xFF	; 255
    139e:	83 ed       	ldi	r24, 0xD3	; 211
    13a0:	90 e3       	ldi	r25, 0x30	; 48
    13a2:	21 50       	subi	r18, 0x01	; 1
    13a4:	80 40       	sbci	r24, 0x00	; 0
    13a6:	90 40       	sbci	r25, 0x00	; 0
    13a8:	e1 f7       	brne	.-8      	; 0x13a2 <LCD_User_Interfacing+0x6a>
    13aa:	00 c0       	rjmp	.+0      	; 0x13ac <LCD_User_Interfacing+0x74>
    13ac:	00 00       	nop
			_delay_ms(1000);
			LCD_Clear_Screen();
    13ae:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
			
			LCD_User_Menu();
    13b2:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_User_Menu>
			LCD_Write_String ("Your Choice : ");
    13b6:	82 ed       	ldi	r24, 0xD2	; 210
    13b8:	91 e0       	ldi	r25, 0x01	; 1
    13ba:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Display_ON_Cusror_ON_Blink_ON);
    13be:	8f e0       	ldi	r24, 0x0F	; 15
    13c0:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			
			Keypad_Value = 0;
			while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
			{
				Keypad_Value = Keypad_Get_Value();
    13c4:	0e 94 36 06 	call	0xc6c	; 0xc6c <Keypad_Get_Value>
    13c8:	c8 2f       	mov	r28, r24
			LCD_User_Menu();
			LCD_Write_String ("Your Choice : ");
			LCD_Send_CMD(Display_ON_Cusror_ON_Blink_ON);
			
			Keypad_Value = 0;
			while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
    13ca:	80 ed       	ldi	r24, 0xD0	; 208
    13cc:	8c 0f       	add	r24, r28
    13ce:	8a 30       	cpi	r24, 0x0A	; 10
    13d0:	c8 f7       	brcc	.-14     	; 0x13c4 <LCD_User_Interfacing+0x8c>
			{
				Keypad_Value = Keypad_Get_Value();
			}
			
			LCD_Write_Char(Keypad_Value);
    13d2:	8c 2f       	mov	r24, r28
    13d4:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <LCD_Write_Char>
    13d8:	2f ef       	ldi	r18, 0xFF	; 255
    13da:	89 e6       	ldi	r24, 0x69	; 105
    13dc:	98 e1       	ldi	r25, 0x18	; 24
    13de:	21 50       	subi	r18, 0x01	; 1
    13e0:	80 40       	sbci	r24, 0x00	; 0
    13e2:	90 40       	sbci	r25, 0x00	; 0
    13e4:	e1 f7       	brne	.-8      	; 0x13de <LCD_User_Interfacing+0xa6>
    13e6:	00 c0       	rjmp	.+0      	; 0x13e8 <LCD_User_Interfacing+0xb0>
    13e8:	00 00       	nop
			_delay_ms(500);
			LCD_Clear_Screen();
    13ea:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
		
		LCD_Write_Char(Keypad_Value);
		_delay_ms(500);
		LCD_Clear_Screen();
		
		while (!((Keypad_Value >= Ascii_1) && (Keypad_Value <= Ascii_4)))
    13ee:	8f ec       	ldi	r24, 0xCF	; 207
    13f0:	8c 0f       	add	r24, r28
    13f2:	84 30       	cpi	r24, 0x04	; 4
    13f4:	28 f6       	brcc	.-118    	; 0x1380 <LCD_User_Interfacing+0x48>
			LCD_Write_Char(Keypad_Value);
			_delay_ms(500);
			LCD_Clear_Screen();
		}
		
		LCD_Send_CMD(Display_ON_Cusror_OFF_Blink_OFF);
    13f6:	8c e0       	ldi	r24, 0x0C	; 12
    13f8:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
		option = Keypad_Value;
		Keypad_Value = 0;
		
		
		if(option == '1')
    13fc:	c1 33       	cpi	r28, 0x31	; 49
    13fe:	19 f4       	brne	.+6      	; 0x1406 <LCD_User_Interfacing+0xce>
		{
			LCD_Rooms_Leds_Control();
    1400:	0e 94 02 08 	call	0x1004	; 0x1004 <LCD_Rooms_Leds_Control>
    1404:	9b cf       	rjmp	.-202    	; 0x133c <LCD_User_Interfacing+0x4>
		}
		else if(option == '2')
    1406:	c2 33       	cpi	r28, 0x32	; 50
    1408:	09 f0       	breq	.+2      	; 0x140c <LCD_User_Interfacing+0xd4>
    140a:	b4 c0       	rjmp	.+360    	; 0x1574 <LCD_User_Interfacing+0x23c>
		{
			LCD_Write_String ("The Brightness");
    140c:	89 e5       	ldi	r24, 0x59	; 89
    140e:	92 e0       	ldi	r25, 0x02	; 2
    1410:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    1414:	80 ec       	ldi	r24, 0xC0	; 192
    1416:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			LCD_Write_String ("percentages are");
    141a:	88 e6       	ldi	r24, 0x68	; 104
    141c:	92 e0       	ldi	r25, 0x02	; 2
    141e:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
    1422:	2f ef       	ldi	r18, 0xFF	; 255
    1424:	89 e6       	ldi	r24, 0x69	; 105
    1426:	98 e1       	ldi	r25, 0x18	; 24
    1428:	21 50       	subi	r18, 0x01	; 1
    142a:	80 40       	sbci	r24, 0x00	; 0
    142c:	90 40       	sbci	r25, 0x00	; 0
    142e:	e1 f7       	brne	.-8      	; 0x1428 <LCD_User_Interfacing+0xf0>
    1430:	00 c0       	rjmp	.+0      	; 0x1432 <LCD_User_Interfacing+0xfa>
    1432:	00 00       	nop
			_delay_ms(500);
			LCD_Clear_Screen();
    1434:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
			
			LCD_Write_String ("0. 0 % (OFF)");
    1438:	88 e7       	ldi	r24, 0x78	; 120
    143a:	92 e0       	ldi	r25, 0x02	; 2
    143c:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    1440:	80 ec       	ldi	r24, 0xC0	; 192
    1442:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			LCD_Write_String ("1. 25 % ");
    1446:	85 e8       	ldi	r24, 0x85	; 133
    1448:	92 e0       	ldi	r25, 0x02	; 2
    144a:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
    144e:	2f ef       	ldi	r18, 0xFF	; 255
    1450:	89 e6       	ldi	r24, 0x69	; 105
    1452:	98 e1       	ldi	r25, 0x18	; 24
    1454:	21 50       	subi	r18, 0x01	; 1
    1456:	80 40       	sbci	r24, 0x00	; 0
    1458:	90 40       	sbci	r25, 0x00	; 0
    145a:	e1 f7       	brne	.-8      	; 0x1454 <LCD_User_Interfacing+0x11c>
    145c:	00 c0       	rjmp	.+0      	; 0x145e <LCD_User_Interfacing+0x126>
    145e:	00 00       	nop
			_delay_ms(500);
			LCD_Clear_Screen();
    1460:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
			
			LCD_Write_String ("2. 50 % ");
    1464:	8e e8       	ldi	r24, 0x8E	; 142
    1466:	92 e0       	ldi	r25, 0x02	; 2
    1468:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    146c:	80 ec       	ldi	r24, 0xC0	; 192
    146e:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			LCD_Write_String ("3. 75 % ");
    1472:	87 e9       	ldi	r24, 0x97	; 151
    1474:	92 e0       	ldi	r25, 0x02	; 2
    1476:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
    147a:	2f ef       	ldi	r18, 0xFF	; 255
    147c:	89 e6       	ldi	r24, 0x69	; 105
    147e:	98 e1       	ldi	r25, 0x18	; 24
    1480:	21 50       	subi	r18, 0x01	; 1
    1482:	80 40       	sbci	r24, 0x00	; 0
    1484:	90 40       	sbci	r25, 0x00	; 0
    1486:	e1 f7       	brne	.-8      	; 0x1480 <LCD_User_Interfacing+0x148>
    1488:	00 c0       	rjmp	.+0      	; 0x148a <LCD_User_Interfacing+0x152>
    148a:	00 00       	nop
			_delay_ms(500);
			LCD_Clear_Screen();
    148c:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
			
			LCD_Write_String ("4. 100 % ");
    1490:	80 ea       	ldi	r24, 0xA0	; 160
    1492:	92 e0       	ldi	r25, 0x02	; 2
    1494:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    1498:	80 ec       	ldi	r24, 0xC0	; 192
    149a:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			LCD_Write_String ("(Maximum Power)");
    149e:	8f e5       	ldi	r24, 0x5F	; 95
    14a0:	95 e0       	ldi	r25, 0x05	; 5
    14a2:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
    14a6:	2f ef       	ldi	r18, 0xFF	; 255
    14a8:	89 e6       	ldi	r24, 0x69	; 105
    14aa:	98 e1       	ldi	r25, 0x18	; 24
    14ac:	21 50       	subi	r18, 0x01	; 1
    14ae:	80 40       	sbci	r24, 0x00	; 0
    14b0:	90 40       	sbci	r25, 0x00	; 0
    14b2:	e1 f7       	brne	.-8      	; 0x14ac <LCD_User_Interfacing+0x174>
    14b4:	00 c0       	rjmp	.+0      	; 0x14b6 <LCD_User_Interfacing+0x17e>
    14b6:	00 00       	nop
			_delay_ms(500);
			LCD_Clear_Screen();
    14b8:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
			
			
			LCD_Write_String ("Your Choice : ");
    14bc:	82 ed       	ldi	r24, 0xD2	; 210
    14be:	91 e0       	ldi	r25, 0x01	; 1
    14c0:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Display_ON_Cusror_ON_Blink_ON);
    14c4:	8f e0       	ldi	r24, 0x0F	; 15
    14c6:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			
			while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
			{
				Keypad_Value = Keypad_Get_Value();
    14ca:	0e 94 36 06 	call	0xc6c	; 0xc6c <Keypad_Get_Value>
    14ce:	c8 2f       	mov	r28, r24
			
			
			LCD_Write_String ("Your Choice : ");
			LCD_Send_CMD(Display_ON_Cusror_ON_Blink_ON);
			
			while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
    14d0:	d0 ed       	ldi	r29, 0xD0	; 208
    14d2:	d8 0f       	add	r29, r24
    14d4:	da 30       	cpi	r29, 0x0A	; 10
    14d6:	c8 f7       	brcc	.-14     	; 0x14ca <LCD_User_Interfacing+0x192>
			{
				Keypad_Value = Keypad_Get_Value();
			}
			
			LCD_Write_Char(Keypad_Value);
    14d8:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <LCD_Write_Char>
    14dc:	2f ef       	ldi	r18, 0xFF	; 255
    14de:	89 e6       	ldi	r24, 0x69	; 105
    14e0:	98 e1       	ldi	r25, 0x18	; 24
    14e2:	21 50       	subi	r18, 0x01	; 1
    14e4:	80 40       	sbci	r24, 0x00	; 0
    14e6:	90 40       	sbci	r25, 0x00	; 0
    14e8:	e1 f7       	brne	.-8      	; 0x14e2 <LCD_User_Interfacing+0x1aa>
    14ea:	00 c0       	rjmp	.+0      	; 0x14ec <LCD_User_Interfacing+0x1b4>
    14ec:	00 00       	nop
			_delay_ms(500);
			LCD_Clear_Screen();
    14ee:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
			
			while (!((Keypad_Value >= Ascii_0) && (Keypad_Value <= Ascii_4)))
    14f2:	d5 30       	cpi	r29, 0x05	; 5
    14f4:	c0 f1       	brcs	.+112    	; 0x1566 <LCD_User_Interfacing+0x22e>
			{
				LCD_Send_CMD(Display_ON_Cusror_ON_Blink_OFF);
    14f6:	8e e0       	ldi	r24, 0x0E	; 14
    14f8:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
				LCD_Write_String ("Please Choose");
    14fc:	81 ee       	ldi	r24, 0xE1	; 225
    14fe:	91 e0       	ldi	r25, 0x01	; 1
    1500:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
				LCD_Send_CMD(Row_2_pos_0);
    1504:	80 ec       	ldi	r24, 0xC0	; 192
    1506:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
				LCD_Write_String ("from 0 to 4");
    150a:	82 e8       	ldi	r24, 0x82	; 130
    150c:	95 e0       	ldi	r25, 0x05	; 5
    150e:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
    1512:	2f ef       	ldi	r18, 0xFF	; 255
    1514:	83 ed       	ldi	r24, 0xD3	; 211
    1516:	90 e3       	ldi	r25, 0x30	; 48
    1518:	21 50       	subi	r18, 0x01	; 1
    151a:	80 40       	sbci	r24, 0x00	; 0
    151c:	90 40       	sbci	r25, 0x00	; 0
    151e:	e1 f7       	brne	.-8      	; 0x1518 <LCD_User_Interfacing+0x1e0>
    1520:	00 c0       	rjmp	.+0      	; 0x1522 <LCD_User_Interfacing+0x1ea>
    1522:	00 00       	nop
				_delay_ms(1000);
				LCD_Clear_Screen();
    1524:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
				
				LCD_User_Menu();
    1528:	0e 94 6f 09 	call	0x12de	; 0x12de <LCD_User_Menu>
				LCD_Write_String ("Your Choice : ");
    152c:	82 ed       	ldi	r24, 0xD2	; 210
    152e:	91 e0       	ldi	r25, 0x01	; 1
    1530:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
				LCD_Send_CMD(Display_ON_Cusror_ON_Blink_ON);
    1534:	8f e0       	ldi	r24, 0x0F	; 15
    1536:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
				
				Keypad_Value = 0;
				while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
				{
					Keypad_Value = Keypad_Get_Value();
    153a:	0e 94 36 06 	call	0xc6c	; 0xc6c <Keypad_Get_Value>
    153e:	c8 2f       	mov	r28, r24
				LCD_User_Menu();
				LCD_Write_String ("Your Choice : ");
				LCD_Send_CMD(Display_ON_Cusror_ON_Blink_ON);
				
				Keypad_Value = 0;
				while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
    1540:	d0 ed       	ldi	r29, 0xD0	; 208
    1542:	d8 0f       	add	r29, r24
    1544:	da 30       	cpi	r29, 0x0A	; 10
    1546:	c8 f7       	brcc	.-14     	; 0x153a <LCD_User_Interfacing+0x202>
				{
					Keypad_Value = Keypad_Get_Value();
				}
				
				LCD_Write_Char(Keypad_Value);
    1548:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <LCD_Write_Char>
    154c:	2f ef       	ldi	r18, 0xFF	; 255
    154e:	89 e6       	ldi	r24, 0x69	; 105
    1550:	98 e1       	ldi	r25, 0x18	; 24
    1552:	21 50       	subi	r18, 0x01	; 1
    1554:	80 40       	sbci	r24, 0x00	; 0
    1556:	90 40       	sbci	r25, 0x00	; 0
    1558:	e1 f7       	brne	.-8      	; 0x1552 <LCD_User_Interfacing+0x21a>
    155a:	00 c0       	rjmp	.+0      	; 0x155c <LCD_User_Interfacing+0x224>
    155c:	00 00       	nop
				_delay_ms(500);
				LCD_Clear_Screen();
    155e:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
			
			LCD_Write_Char(Keypad_Value);
			_delay_ms(500);
			LCD_Clear_Screen();
			
			while (!((Keypad_Value >= Ascii_0) && (Keypad_Value <= Ascii_4)))
    1562:	d5 30       	cpi	r29, 0x05	; 5
    1564:	40 f6       	brcc	.-112    	; 0x14f6 <LCD_User_Interfacing+0x1be>
				LCD_Write_Char(Keypad_Value);
				_delay_ms(500);
				LCD_Clear_Screen();
			}
			
			LCD_Send_CMD(Display_ON_Cusror_OFF_Blink_OFF);
    1566:	8c e0       	ldi	r24, 0x0C	; 12
    1568:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			brightness_level = Keypad_Value;
			Keypad_Value = 0;
			
			DIMMER_CONTROL(brightness_level);
    156c:	8c 2f       	mov	r24, r28
    156e:	0e 94 37 0b 	call	0x166e	; 0x166e <DIMMER_CONTROL>
    1572:	e4 ce       	rjmp	.-568    	; 0x133c <LCD_User_Interfacing+0x4>
		}
		
		
		else if(option == '3')
    1574:	c3 33       	cpi	r28, 0x33	; 51
    1576:	c9 f4       	brne	.+50     	; 0x15aa <LCD_User_Interfacing+0x272>
		{
			closeDoor();
    1578:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <closeDoor>
			
			LCD_Write_String("  The door is");
    157c:	8a ea       	ldi	r24, 0xAA	; 170
    157e:	92 e0       	ldi	r25, 0x02	; 2
    1580:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    1584:	80 ec       	ldi	r24, 0xC0	; 192
    1586:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			LCD_Write_String("    Closed");
    158a:	88 eb       	ldi	r24, 0xB8	; 184
    158c:	92 e0       	ldi	r25, 0x02	; 2
    158e:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
    1592:	2f ef       	ldi	r18, 0xFF	; 255
    1594:	83 ed       	ldi	r24, 0xD3	; 211
    1596:	90 e3       	ldi	r25, 0x30	; 48
    1598:	21 50       	subi	r18, 0x01	; 1
    159a:	80 40       	sbci	r24, 0x00	; 0
    159c:	90 40       	sbci	r25, 0x00	; 0
    159e:	e1 f7       	brne	.-8      	; 0x1598 <LCD_User_Interfacing+0x260>
    15a0:	00 c0       	rjmp	.+0      	; 0x15a2 <LCD_User_Interfacing+0x26a>
    15a2:	00 00       	nop
			_delay_ms(1000);
			LCD_Clear_Screen();
    15a4:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
    15a8:	c9 ce       	rjmp	.-622    	; 0x133c <LCD_User_Interfacing+0x4>
{
	unsigned char Keypad_Value = 0;
	unsigned char option = 0;
	unsigned char brightness_level = 0;
	
	while(option != Ascii_4)
    15aa:	c4 33       	cpi	r28, 0x34	; 52
    15ac:	09 f0       	breq	.+2      	; 0x15b0 <LCD_User_Interfacing+0x278>
    15ae:	c6 ce       	rjmp	.-628    	; 0x133c <LCD_User_Interfacing+0x4>
		{
			
		}
		
	}
    15b0:	df 91       	pop	r29
    15b2:	cf 91       	pop	r28
    15b4:	08 95       	ret

000015b6 <BUZZER_START>:
#include "TimerFunc.h"

/*--------> Buzzer <---------*/
void BUZZER_START()
{
	set_bit(BUZZER_DIR,BUZZER_PIN);
    15b6:	8f 9a       	sbi	0x11, 7	; 17
    15b8:	08 95       	ret

000015ba <LED_START>:
}

/*--------> LEDs <---------*/
void LED_START()
{
	set_bit(LED_1_DIR,LED_1_PIN);
    15ba:	b8 9a       	sbi	0x17, 0	; 23
	set_bit(LED_2_DIR,LED_2_PIN);
    15bc:	b9 9a       	sbi	0x17, 1	; 23
	set_bit(LED_3_DIR,LED_3_PIN);
    15be:	a2 9a       	sbi	0x14, 2	; 20
	set_bit(LED_4_DIR,LED_4_PIN);
    15c0:	a3 9a       	sbi	0x14, 3	; 20
	set_bit(LED_5_DIR,LED_5_PIN);
    15c2:	8e 9a       	sbi	0x11, 6	; 17
	
	set_bit(AC_LED_DIR,AC_LED_PIN);
    15c4:	ba 9a       	sbi	0x17, 2	; 23
    15c6:	08 95       	ret

000015c8 <LED_STAT>:
}

void LED_STAT(unsigned char status,unsigned char R_Num)
{
	if (status == ON)
    15c8:	81 33       	cpi	r24, 0x31	; 49
    15ca:	a1 f4       	brne	.+40     	; 0x15f4 <LED_STAT+0x2c>
	{
		if (R_Num == Room1)
    15cc:	61 33       	cpi	r22, 0x31	; 49
    15ce:	11 f4       	brne	.+4      	; 0x15d4 <LED_STAT+0xc>
		{
			set_bit(LED_1_PORT,LED_1_PIN);
    15d0:	c0 9a       	sbi	0x18, 0	; 24
    15d2:	08 95       	ret
		}
		else if (R_Num == Room2)
    15d4:	62 33       	cpi	r22, 0x32	; 50
    15d6:	11 f4       	brne	.+4      	; 0x15dc <LED_STAT+0x14>
		{
			set_bit(LED_2_PORT,LED_2_PIN);
    15d8:	c1 9a       	sbi	0x18, 1	; 24
    15da:	08 95       	ret
		}
		else if (R_Num == Room3)
    15dc:	63 33       	cpi	r22, 0x33	; 51
    15de:	11 f4       	brne	.+4      	; 0x15e4 <LED_STAT+0x1c>
		{
			set_bit(LED_3_PORT,LED_3_PIN);
    15e0:	aa 9a       	sbi	0x15, 2	; 21
    15e2:	08 95       	ret
		}
		else if (R_Num == Room4)
    15e4:	64 33       	cpi	r22, 0x34	; 52
    15e6:	11 f4       	brne	.+4      	; 0x15ec <LED_STAT+0x24>
		{
			set_bit(LED_4_PORT,LED_4_PIN);
    15e8:	ab 9a       	sbi	0x15, 3	; 21
    15ea:	08 95       	ret
		}
		else if (R_Num == Room5)
    15ec:	65 33       	cpi	r22, 0x35	; 53
    15ee:	b9 f4       	brne	.+46     	; 0x161e <LED_STAT+0x56>
		{
			set_bit(LED_5_PORT,LED_5_PIN);
    15f0:	96 9a       	sbi	0x12, 6	; 18
    15f2:	08 95       	ret
		}
	}
	else if (status == OFF)
    15f4:	80 33       	cpi	r24, 0x30	; 48
    15f6:	99 f4       	brne	.+38     	; 0x161e <LED_STAT+0x56>
	{
		if (R_Num == Room1)
    15f8:	61 33       	cpi	r22, 0x31	; 49
    15fa:	11 f4       	brne	.+4      	; 0x1600 <LED_STAT+0x38>
		{
			clear_bit(LED_1_PORT,LED_1_PIN);
    15fc:	c0 98       	cbi	0x18, 0	; 24
    15fe:	08 95       	ret
		}
		else if (R_Num == Room2)
    1600:	62 33       	cpi	r22, 0x32	; 50
    1602:	11 f4       	brne	.+4      	; 0x1608 <LED_STAT+0x40>
		{
			clear_bit(LED_2_PORT,LED_2_PIN);
    1604:	c1 98       	cbi	0x18, 1	; 24
    1606:	08 95       	ret
		}
		else if (R_Num == Room3)
    1608:	63 33       	cpi	r22, 0x33	; 51
    160a:	11 f4       	brne	.+4      	; 0x1610 <LED_STAT+0x48>
		{
			clear_bit(LED_3_PORT,LED_3_PIN);
    160c:	aa 98       	cbi	0x15, 2	; 21
    160e:	08 95       	ret
		}
		else if (R_Num == Room4)
    1610:	64 33       	cpi	r22, 0x34	; 52
    1612:	11 f4       	brne	.+4      	; 0x1618 <LED_STAT+0x50>
		{
			clear_bit(LED_4_PORT,LED_4_PIN);
    1614:	ab 98       	cbi	0x15, 3	; 21
    1616:	08 95       	ret
		}
		else if (R_Num == Room5)
    1618:	65 33       	cpi	r22, 0x35	; 53
    161a:	09 f4       	brne	.+2      	; 0x161e <LED_STAT+0x56>
		{
			clear_bit(LED_5_PORT,LED_5_PIN);
    161c:	96 98       	cbi	0x12, 6	; 18
    161e:	08 95       	ret

00001620 <Alarm_On>:
void Alarm_On ()
{
	while(1)
	{
		set_bit(BUZZER_PORT,BUZZER_PIN);
		toggle_bit(LED_1_PORT,LED_1_PIN);
    1620:	51 e0       	ldi	r21, 0x01	; 1
		toggle_bit(LED_2_PORT,LED_2_PIN);
    1622:	42 e0       	ldi	r20, 0x02	; 2
		toggle_bit(LED_3_PORT,LED_3_PIN);
    1624:	34 e0       	ldi	r19, 0x04	; 4
		toggle_bit(LED_4_PORT,LED_4_PIN);
    1626:	28 e0       	ldi	r18, 0x08	; 8
		toggle_bit(LED_5_PORT,LED_5_PIN);
    1628:	90 e4       	ldi	r25, 0x40	; 64
/*--------> Alarm <---------*/
void Alarm_On ()
{
	while(1)
	{
		set_bit(BUZZER_PORT,BUZZER_PIN);
    162a:	97 9a       	sbi	0x12, 7	; 18
		toggle_bit(LED_1_PORT,LED_1_PIN);
    162c:	88 b3       	in	r24, 0x18	; 24
    162e:	85 27       	eor	r24, r21
    1630:	88 bb       	out	0x18, r24	; 24
		toggle_bit(LED_2_PORT,LED_2_PIN);
    1632:	88 b3       	in	r24, 0x18	; 24
    1634:	84 27       	eor	r24, r20
    1636:	88 bb       	out	0x18, r24	; 24
		toggle_bit(LED_3_PORT,LED_3_PIN);
    1638:	85 b3       	in	r24, 0x15	; 21
    163a:	83 27       	eor	r24, r19
    163c:	85 bb       	out	0x15, r24	; 21
		toggle_bit(LED_4_PORT,LED_4_PIN);
    163e:	85 b3       	in	r24, 0x15	; 21
    1640:	82 27       	eor	r24, r18
    1642:	85 bb       	out	0x15, r24	; 21
		toggle_bit(LED_5_PORT,LED_5_PIN);
    1644:	82 b3       	in	r24, 0x12	; 18
    1646:	89 27       	eor	r24, r25
    1648:	82 bb       	out	0x12, r24	; 18
    164a:	6f ef       	ldi	r22, 0xFF	; 255
    164c:	79 e6       	ldi	r23, 0x69	; 105
    164e:	88 e1       	ldi	r24, 0x18	; 24
    1650:	61 50       	subi	r22, 0x01	; 1
    1652:	70 40       	sbci	r23, 0x00	; 0
    1654:	80 40       	sbci	r24, 0x00	; 0
    1656:	e1 f7       	brne	.-8      	; 0x1650 <Alarm_On+0x30>
    1658:	00 c0       	rjmp	.+0      	; 0x165a <Alarm_On+0x3a>
    165a:	00 00       	nop
    165c:	e6 cf       	rjmp	.-52     	; 0x162a <Alarm_On+0xa>

0000165e <DIMMER_Init>:

/*--------> Dimmer <---------*/

void DIMMER_Init()
{
	set_bit(DIMMER_DIR,DIMMER_PIN);	
    165e:	bb 9a       	sbi	0x17, 3	; 23
	Timer(0,PWM_Phase_Correct,COM_Clear,fclk8);
    1660:	22 e3       	ldi	r18, 0x32	; 50
    1662:	42 e3       	ldi	r20, 0x32	; 50
    1664:	61 e3       	ldi	r22, 0x31	; 49
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <Timer>
    166c:	08 95       	ret

0000166e <DIMMER_CONTROL>:
}

void DIMMER_CONTROL(unsigned char LEVEL)
{
	
	if (LEVEL == LEVEL0)
    166e:	80 33       	cpi	r24, 0x30	; 48
    1670:	11 f4       	brne	.+4      	; 0x1676 <DIMMER_CONTROL+0x8>
	{
		OCR0 = LEVEL0_PERCENT;
    1672:	1c be       	out	0x3c, r1	; 60
    1674:	08 95       	ret
	}
	else if (LEVEL == LEVEL1)
    1676:	81 33       	cpi	r24, 0x31	; 49
    1678:	19 f4       	brne	.+6      	; 0x1680 <DIMMER_CONTROL+0x12>
	{
		OCR0 = LEVEL1_PERCENT*MAX/maxPercent;
    167a:	8f e3       	ldi	r24, 0x3F	; 63
    167c:	8c bf       	out	0x3c, r24	; 60
    167e:	08 95       	ret
	}
	else if (LEVEL == LEVEL2)
    1680:	82 33       	cpi	r24, 0x32	; 50
    1682:	19 f4       	brne	.+6      	; 0x168a <DIMMER_CONTROL+0x1c>
	{
		OCR0 = LEVEL2_PERCENT*MAX/maxPercent;
    1684:	8f e7       	ldi	r24, 0x7F	; 127
    1686:	8c bf       	out	0x3c, r24	; 60
    1688:	08 95       	ret
	}
	else if (LEVEL == LEVEL3)
    168a:	83 33       	cpi	r24, 0x33	; 51
    168c:	19 f4       	brne	.+6      	; 0x1694 <DIMMER_CONTROL+0x26>
	{
		OCR0 = LEVEL3_PERCENT*MAX/maxPercent;
    168e:	8f eb       	ldi	r24, 0xBF	; 191
    1690:	8c bf       	out	0x3c, r24	; 60
    1692:	08 95       	ret
	}
	else if (LEVEL == LEVEL4)
    1694:	84 33       	cpi	r24, 0x34	; 52
    1696:	11 f4       	brne	.+4      	; 0x169c <DIMMER_CONTROL+0x2e>
	{
		OCR0 = LEVEL4_PERCENT*MAX/maxPercent;
    1698:	8f ef       	ldi	r24, 0xFF	; 255
    169a:	8c bf       	out	0x3c, r24	; 60
    169c:	08 95       	ret

0000169e <main>:



int main(void)
{
	App_Initialization();	// Initialization of all peripherals in the application (system)	
    169e:	0e 94 19 02 	call	0x432	; 0x432 <App_Initialization>
	EEPROM_Save_Main_Admin();	// Save Admin 
    16a2:	0e 94 27 05 	call	0xa4e	; 0xa4e <EEPROM_Save_Main_Admin>
	EEPROM_Write_0_Counters();	// Writing 0 on the bits of counters if the system is operated for the first time
    16a6:	0e 94 48 05 	call	0xa90	; 0xa90 <EEPROM_Write_0_Counters>
	UART_Welcome_Message();
    16aa:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <UART_Welcome_Message>
	
	while (1)
	{
		App();	
    16ae:	0e 94 36 02 	call	0x46c	; 0x46c <App>
    16b2:	fd cf       	rjmp	.-6      	; 0x16ae <main+0x10>

000016b4 <Sensor_ON>:
#include "PINS.h"
#include "Sensor_ON.h"

void Sensor_ON()
{
	clear_bit(LM35_DIR,LM35_PIN); // LM35 Input Pin
    16b4:	d3 98       	cbi	0x1a, 3	; 26
    16b6:	08 95       	ret

000016b8 <Servo_Initialization>:
#include "Servo.h"
#include "TimerFunc.h"

void Servo_Initialization()
{
	set_bit(Servo_DIR,servoControl);
    16b8:	8d 9a       	sbi	0x11, 5	; 17
	Timer(1,PWM_Fast,COM_Clear,fclk8);
    16ba:	22 e3       	ldi	r18, 0x32	; 50
    16bc:	42 e3       	ldi	r20, 0x32	; 50
    16be:	62 e3       	ldi	r22, 0x32	; 50
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <Timer>
	ICR1 = 39999;	//FPWM = 50 Hz
    16c6:	8f e3       	ldi	r24, 0x3F	; 63
    16c8:	9c e9       	ldi	r25, 0x9C	; 156
    16ca:	97 bd       	out	0x27, r25	; 39
    16cc:	86 bd       	out	0x26, r24	; 38
	TCNT1 = 0;		//Begin the timer count from "0"
    16ce:	1d bc       	out	0x2d, r1	; 45
    16d0:	1c bc       	out	0x2c, r1	; 44
	OCR1A = Deg0;	// Setting the door as closed in the beginning of the system 
    16d2:	87 eb       	ldi	r24, 0xB7	; 183
    16d4:	9b e0       	ldi	r25, 0x0B	; 11
    16d6:	9b bd       	out	0x2b, r25	; 43
    16d8:	8a bd       	out	0x2a, r24	; 42
    16da:	08 95       	ret

000016dc <openDoor>:
}

void openDoor()
{
	OCR1A = Deg90; // Rotates Servo by 90 deg position
    16dc:	82 e8       	ldi	r24, 0x82	; 130
    16de:	94 e1       	ldi	r25, 0x14	; 20
    16e0:	9b bd       	out	0x2b, r25	; 43
    16e2:	8a bd       	out	0x2a, r24	; 42
    16e4:	08 95       	ret

000016e6 <closeDoor>:
}
void closeDoor()
{
	OCR1A = Deg0; // Rotates Servo to 0 deg position
    16e6:	87 eb       	ldi	r24, 0xB7	; 183
    16e8:	9b e0       	ldi	r25, 0x0B	; 11
    16ea:	9b bd       	out	0x2b, r25	; 43
    16ec:	8a bd       	out	0x2a, r24	; 42
    16ee:	08 95       	ret

000016f0 <Timer>:
#include "TimerFunc.h"
#include "Bit_Op.h"

void Timer(char timerNum,char Mode,char COM,char Prescaler)
{
	if (timerNum == 0)
    16f0:	81 11       	cpse	r24, r1
    16f2:	86 c0       	rjmp	.+268    	; 0x1800 <Timer+0x110>
	{
		
		if (Prescaler == fclkOFF)
    16f4:	20 33       	cpi	r18, 0x30	; 48
    16f6:	51 f4       	brne	.+20     	; 0x170c <Timer+0x1c>
		{
			clear_bit(TCCR0,CS00);
    16f8:	83 b7       	in	r24, 0x33	; 51
    16fa:	8e 7f       	andi	r24, 0xFE	; 254
    16fc:	83 bf       	out	0x33, r24	; 51
			clear_bit(TCCR0,CS01);
    16fe:	83 b7       	in	r24, 0x33	; 51
    1700:	8d 7f       	andi	r24, 0xFD	; 253
    1702:	83 bf       	out	0x33, r24	; 51
			clear_bit(TCCR0,CS02);
    1704:	83 b7       	in	r24, 0x33	; 51
    1706:	8b 7f       	andi	r24, 0xFB	; 251
    1708:	83 bf       	out	0x33, r24	; 51
    170a:	3b c0       	rjmp	.+118    	; 0x1782 <Timer+0x92>
		}
		else if (Prescaler == fclk0)
    170c:	21 33       	cpi	r18, 0x31	; 49
    170e:	51 f4       	brne	.+20     	; 0x1724 <Timer+0x34>
		{
			set_bit(TCCR0,CS00);
    1710:	83 b7       	in	r24, 0x33	; 51
    1712:	81 60       	ori	r24, 0x01	; 1
    1714:	83 bf       	out	0x33, r24	; 51
			clear_bit(TCCR0,CS01);
    1716:	83 b7       	in	r24, 0x33	; 51
    1718:	8d 7f       	andi	r24, 0xFD	; 253
    171a:	83 bf       	out	0x33, r24	; 51
			clear_bit(TCCR0,CS02);
    171c:	83 b7       	in	r24, 0x33	; 51
    171e:	8b 7f       	andi	r24, 0xFB	; 251
    1720:	83 bf       	out	0x33, r24	; 51
    1722:	2f c0       	rjmp	.+94     	; 0x1782 <Timer+0x92>

		}
		else if (Prescaler == fclk8)
    1724:	22 33       	cpi	r18, 0x32	; 50
    1726:	51 f4       	brne	.+20     	; 0x173c <Timer+0x4c>
		{
			clear_bit(TCCR0,CS00);
    1728:	83 b7       	in	r24, 0x33	; 51
    172a:	8e 7f       	andi	r24, 0xFE	; 254
    172c:	83 bf       	out	0x33, r24	; 51
			set_bit(TCCR0,CS01);
    172e:	83 b7       	in	r24, 0x33	; 51
    1730:	82 60       	ori	r24, 0x02	; 2
    1732:	83 bf       	out	0x33, r24	; 51
			clear_bit(TCCR0,CS02);
    1734:	83 b7       	in	r24, 0x33	; 51
    1736:	8b 7f       	andi	r24, 0xFB	; 251
    1738:	83 bf       	out	0x33, r24	; 51
    173a:	23 c0       	rjmp	.+70     	; 0x1782 <Timer+0x92>
		}
		else if (Prescaler == fclk64)
    173c:	23 33       	cpi	r18, 0x33	; 51
    173e:	51 f4       	brne	.+20     	; 0x1754 <Timer+0x64>
		{
			set_bit(TCCR0,CS00);
    1740:	83 b7       	in	r24, 0x33	; 51
    1742:	81 60       	ori	r24, 0x01	; 1
    1744:	83 bf       	out	0x33, r24	; 51
			set_bit(TCCR0,CS01);
    1746:	83 b7       	in	r24, 0x33	; 51
    1748:	82 60       	ori	r24, 0x02	; 2
    174a:	83 bf       	out	0x33, r24	; 51
			clear_bit(TCCR0,CS02);
    174c:	83 b7       	in	r24, 0x33	; 51
    174e:	8b 7f       	andi	r24, 0xFB	; 251
    1750:	83 bf       	out	0x33, r24	; 51
    1752:	17 c0       	rjmp	.+46     	; 0x1782 <Timer+0x92>
		}
		else if (Prescaler == fclk256)
    1754:	24 33       	cpi	r18, 0x34	; 52
    1756:	51 f4       	brne	.+20     	; 0x176c <Timer+0x7c>
		{
			clear_bit(TCCR0,CS00);
    1758:	83 b7       	in	r24, 0x33	; 51
    175a:	8e 7f       	andi	r24, 0xFE	; 254
    175c:	83 bf       	out	0x33, r24	; 51
			clear_bit(TCCR0,CS01);
    175e:	83 b7       	in	r24, 0x33	; 51
    1760:	8d 7f       	andi	r24, 0xFD	; 253
    1762:	83 bf       	out	0x33, r24	; 51
			set_bit(TCCR0,CS02);
    1764:	83 b7       	in	r24, 0x33	; 51
    1766:	84 60       	ori	r24, 0x04	; 4
    1768:	83 bf       	out	0x33, r24	; 51
    176a:	0b c0       	rjmp	.+22     	; 0x1782 <Timer+0x92>
		}
		else if (Prescaler == fclk1024)
    176c:	25 33       	cpi	r18, 0x35	; 53
    176e:	49 f4       	brne	.+18     	; 0x1782 <Timer+0x92>
		{
			set_bit(TCCR0,CS00);
    1770:	83 b7       	in	r24, 0x33	; 51
    1772:	81 60       	ori	r24, 0x01	; 1
    1774:	83 bf       	out	0x33, r24	; 51
			clear_bit(TCCR0,CS01);
    1776:	83 b7       	in	r24, 0x33	; 51
    1778:	8d 7f       	andi	r24, 0xFD	; 253
    177a:	83 bf       	out	0x33, r24	; 51
			set_bit(TCCR0,CS02);
    177c:	83 b7       	in	r24, 0x33	; 51
    177e:	84 60       	ori	r24, 0x04	; 4
    1780:	83 bf       	out	0x33, r24	; 51
		}
		
		
		if (Mode == Normal)
    1782:	60 33       	cpi	r22, 0x30	; 48
    1784:	39 f4       	brne	.+14     	; 0x1794 <Timer+0xa4>
		{
			//Enable Normal Mode
			clear_bit(TCCR0,WGM01);
    1786:	83 b7       	in	r24, 0x33	; 51
    1788:	87 7f       	andi	r24, 0xF7	; 247
    178a:	83 bf       	out	0x33, r24	; 51
			clear_bit(TCCR0,WGM00);
    178c:	83 b7       	in	r24, 0x33	; 51
    178e:	8f 7b       	andi	r24, 0xBF	; 191
    1790:	83 bf       	out	0x33, r24	; 51
    1792:	11 c0       	rjmp	.+34     	; 0x17b6 <Timer+0xc6>
		}
		
		else if (Mode == PWM_Fast)
    1794:	62 33       	cpi	r22, 0x32	; 50
    1796:	39 f4       	brne	.+14     	; 0x17a6 <Timer+0xb6>
		{
			//Enable Fast PWM Mode
			set_bit(TCCR0,WGM01);
    1798:	83 b7       	in	r24, 0x33	; 51
    179a:	88 60       	ori	r24, 0x08	; 8
    179c:	83 bf       	out	0x33, r24	; 51
			set_bit(TCCR0,WGM00);
    179e:	83 b7       	in	r24, 0x33	; 51
    17a0:	80 64       	ori	r24, 0x40	; 64
    17a2:	83 bf       	out	0x33, r24	; 51
    17a4:	08 c0       	rjmp	.+16     	; 0x17b6 <Timer+0xc6>
		}
		else if (Mode == PWM_Phase_Correct)
    17a6:	61 33       	cpi	r22, 0x31	; 49
    17a8:	31 f4       	brne	.+12     	; 0x17b6 <Timer+0xc6>
		{
			//Enable Phase Correct Mode
			clear_bit(TCCR0,WGM01);
    17aa:	83 b7       	in	r24, 0x33	; 51
    17ac:	87 7f       	andi	r24, 0xF7	; 247
    17ae:	83 bf       	out	0x33, r24	; 51
			set_bit(TCCR0,WGM00);
    17b0:	83 b7       	in	r24, 0x33	; 51
    17b2:	80 64       	ori	r24, 0x40	; 64
    17b4:	83 bf       	out	0x33, r24	; 51
		}
		
		
		if (COM == COM_OFF)
    17b6:	40 33       	cpi	r20, 0x30	; 48
    17b8:	39 f4       	brne	.+14     	; 0x17c8 <Timer+0xd8>
		{
			clear_bit(TCCR0,COM00);
    17ba:	83 b7       	in	r24, 0x33	; 51
    17bc:	8f 7e       	andi	r24, 0xEF	; 239
    17be:	83 bf       	out	0x33, r24	; 51
			clear_bit(TCCR0,COM01);
    17c0:	83 b7       	in	r24, 0x33	; 51
    17c2:	8f 7d       	andi	r24, 0xDF	; 223
    17c4:	83 bf       	out	0x33, r24	; 51
    17c6:	08 95       	ret
		}
		else if (COM == COM_Toggle) //reserved if not Normal Mode
    17c8:	41 33       	cpi	r20, 0x31	; 49
    17ca:	39 f4       	brne	.+14     	; 0x17da <Timer+0xea>
		{
			clear_bit(TCCR0,COM01);
    17cc:	83 b7       	in	r24, 0x33	; 51
    17ce:	8f 7d       	andi	r24, 0xDF	; 223
    17d0:	83 bf       	out	0x33, r24	; 51
			set_bit(TCCR0,COM00);
    17d2:	83 b7       	in	r24, 0x33	; 51
    17d4:	80 61       	ori	r24, 0x10	; 16
    17d6:	83 bf       	out	0x33, r24	; 51
    17d8:	08 95       	ret
		}
		else if (COM == COM_Clear)
    17da:	42 33       	cpi	r20, 0x32	; 50
    17dc:	39 f4       	brne	.+14     	; 0x17ec <Timer+0xfc>
		{
			clear_bit(TCCR0,COM00);
    17de:	83 b7       	in	r24, 0x33	; 51
    17e0:	8f 7e       	andi	r24, 0xEF	; 239
    17e2:	83 bf       	out	0x33, r24	; 51
			set_bit(TCCR0,COM01);
    17e4:	83 b7       	in	r24, 0x33	; 51
    17e6:	80 62       	ori	r24, 0x20	; 32
    17e8:	83 bf       	out	0x33, r24	; 51
    17ea:	08 95       	ret
		}
		else if (COM == COM_Set)
    17ec:	43 33       	cpi	r20, 0x33	; 51
    17ee:	09 f0       	breq	.+2      	; 0x17f2 <Timer+0x102>
    17f0:	a0 c0       	rjmp	.+320    	; 0x1932 <Timer+0x242>
		{
			set_bit(TCCR0,COM00);
    17f2:	83 b7       	in	r24, 0x33	; 51
    17f4:	80 61       	ori	r24, 0x10	; 16
    17f6:	83 bf       	out	0x33, r24	; 51
			set_bit(TCCR0,COM01);
    17f8:	83 b7       	in	r24, 0x33	; 51
    17fa:	80 62       	ori	r24, 0x20	; 32
    17fc:	83 bf       	out	0x33, r24	; 51
    17fe:	08 95       	ret
		}
	}
	
	else if (timerNum == 1)
    1800:	81 30       	cpi	r24, 0x01	; 1
    1802:	09 f0       	breq	.+2      	; 0x1806 <Timer+0x116>
    1804:	96 c0       	rjmp	.+300    	; 0x1932 <Timer+0x242>
	{
		if (Prescaler == fclkOFF)
    1806:	20 33       	cpi	r18, 0x30	; 48
    1808:	51 f4       	brne	.+20     	; 0x181e <Timer+0x12e>
		{
			clear_bit(TCCR1B,CS10);
    180a:	8e b5       	in	r24, 0x2e	; 46
    180c:	8e 7f       	andi	r24, 0xFE	; 254
    180e:	8e bd       	out	0x2e, r24	; 46
			clear_bit(TCCR1B,CS11);
    1810:	8e b5       	in	r24, 0x2e	; 46
    1812:	8d 7f       	andi	r24, 0xFD	; 253
    1814:	8e bd       	out	0x2e, r24	; 46
			clear_bit(TCCR1B,CS12);
    1816:	8e b5       	in	r24, 0x2e	; 46
    1818:	8b 7f       	andi	r24, 0xFB	; 251
    181a:	8e bd       	out	0x2e, r24	; 46
    181c:	3b c0       	rjmp	.+118    	; 0x1894 <Timer+0x1a4>
		}
		else if (Prescaler == fclk0)
    181e:	21 33       	cpi	r18, 0x31	; 49
    1820:	51 f4       	brne	.+20     	; 0x1836 <Timer+0x146>
		{
			set_bit(TCCR1B,CS10);
    1822:	8e b5       	in	r24, 0x2e	; 46
    1824:	81 60       	ori	r24, 0x01	; 1
    1826:	8e bd       	out	0x2e, r24	; 46
			clear_bit(TCCR1B,CS11);
    1828:	8e b5       	in	r24, 0x2e	; 46
    182a:	8d 7f       	andi	r24, 0xFD	; 253
    182c:	8e bd       	out	0x2e, r24	; 46
			clear_bit(TCCR1B,CS12);
    182e:	8e b5       	in	r24, 0x2e	; 46
    1830:	8b 7f       	andi	r24, 0xFB	; 251
    1832:	8e bd       	out	0x2e, r24	; 46
    1834:	2f c0       	rjmp	.+94     	; 0x1894 <Timer+0x1a4>

		}
		else if (Prescaler == fclk8)
    1836:	22 33       	cpi	r18, 0x32	; 50
    1838:	51 f4       	brne	.+20     	; 0x184e <Timer+0x15e>
		{
			clear_bit(TCCR1B,CS10);
    183a:	8e b5       	in	r24, 0x2e	; 46
    183c:	8e 7f       	andi	r24, 0xFE	; 254
    183e:	8e bd       	out	0x2e, r24	; 46
			set_bit(TCCR1B,CS11);
    1840:	8e b5       	in	r24, 0x2e	; 46
    1842:	82 60       	ori	r24, 0x02	; 2
    1844:	8e bd       	out	0x2e, r24	; 46
			clear_bit(TCCR1B,CS12);
    1846:	8e b5       	in	r24, 0x2e	; 46
    1848:	8b 7f       	andi	r24, 0xFB	; 251
    184a:	8e bd       	out	0x2e, r24	; 46
    184c:	23 c0       	rjmp	.+70     	; 0x1894 <Timer+0x1a4>
		}
		else if (Prescaler == fclk64)
    184e:	23 33       	cpi	r18, 0x33	; 51
    1850:	51 f4       	brne	.+20     	; 0x1866 <Timer+0x176>
		{
			set_bit(TCCR1B,CS10);
    1852:	8e b5       	in	r24, 0x2e	; 46
    1854:	81 60       	ori	r24, 0x01	; 1
    1856:	8e bd       	out	0x2e, r24	; 46
			set_bit(TCCR1B,CS11);
    1858:	8e b5       	in	r24, 0x2e	; 46
    185a:	82 60       	ori	r24, 0x02	; 2
    185c:	8e bd       	out	0x2e, r24	; 46
			clear_bit(TCCR1B,CS12);
    185e:	8e b5       	in	r24, 0x2e	; 46
    1860:	8b 7f       	andi	r24, 0xFB	; 251
    1862:	8e bd       	out	0x2e, r24	; 46
    1864:	17 c0       	rjmp	.+46     	; 0x1894 <Timer+0x1a4>
		}
		else if (Prescaler == fclk256)
    1866:	24 33       	cpi	r18, 0x34	; 52
    1868:	51 f4       	brne	.+20     	; 0x187e <Timer+0x18e>
		{
			clear_bit(TCCR1B,CS10);
    186a:	8e b5       	in	r24, 0x2e	; 46
    186c:	8e 7f       	andi	r24, 0xFE	; 254
    186e:	8e bd       	out	0x2e, r24	; 46
			clear_bit(TCCR1B,CS11);
    1870:	8e b5       	in	r24, 0x2e	; 46
    1872:	8d 7f       	andi	r24, 0xFD	; 253
    1874:	8e bd       	out	0x2e, r24	; 46
			set_bit(TCCR1B,CS12);
    1876:	8e b5       	in	r24, 0x2e	; 46
    1878:	84 60       	ori	r24, 0x04	; 4
    187a:	8e bd       	out	0x2e, r24	; 46
    187c:	0b c0       	rjmp	.+22     	; 0x1894 <Timer+0x1a4>
		}
		else if (Prescaler == fclk1024)
    187e:	25 33       	cpi	r18, 0x35	; 53
    1880:	49 f4       	brne	.+18     	; 0x1894 <Timer+0x1a4>
		{
			set_bit(TCCR1B,CS10);
    1882:	8e b5       	in	r24, 0x2e	; 46
    1884:	81 60       	ori	r24, 0x01	; 1
    1886:	8e bd       	out	0x2e, r24	; 46
			clear_bit(TCCR1B,CS11);
    1888:	8e b5       	in	r24, 0x2e	; 46
    188a:	8d 7f       	andi	r24, 0xFD	; 253
    188c:	8e bd       	out	0x2e, r24	; 46
			set_bit(TCCR1B,CS12);
    188e:	8e b5       	in	r24, 0x2e	; 46
    1890:	84 60       	ori	r24, 0x04	; 4
    1892:	8e bd       	out	0x2e, r24	; 46
		}
		
		
		if (Mode == Normal)
    1894:	60 33       	cpi	r22, 0x30	; 48
    1896:	69 f4       	brne	.+26     	; 0x18b2 <Timer+0x1c2>
		{
			//Enable Normal Mode
			clear_bit(TCCR1A,WGM10);
    1898:	8f b5       	in	r24, 0x2f	; 47
    189a:	8e 7f       	andi	r24, 0xFE	; 254
    189c:	8f bd       	out	0x2f, r24	; 47
			clear_bit(TCCR1A,WGM11);
    189e:	8f b5       	in	r24, 0x2f	; 47
    18a0:	8d 7f       	andi	r24, 0xFD	; 253
    18a2:	8f bd       	out	0x2f, r24	; 47
			clear_bit(TCCR1B,WGM12);
    18a4:	8e b5       	in	r24, 0x2e	; 46
    18a6:	87 7f       	andi	r24, 0xF7	; 247
    18a8:	8e bd       	out	0x2e, r24	; 46
			clear_bit(TCCR1B,WGM13);
    18aa:	8e b5       	in	r24, 0x2e	; 46
    18ac:	8f 7e       	andi	r24, 0xEF	; 239
    18ae:	8e bd       	out	0x2e, r24	; 46
    18b0:	1d c0       	rjmp	.+58     	; 0x18ec <Timer+0x1fc>
		}
		
		else if (Mode == PWM_Fast)
    18b2:	62 33       	cpi	r22, 0x32	; 50
    18b4:	69 f4       	brne	.+26     	; 0x18d0 <Timer+0x1e0>
		{
			//Enable Fast PWM Mode --> ICR1
			clear_bit(TCCR1A,WGM10);
    18b6:	8f b5       	in	r24, 0x2f	; 47
    18b8:	8e 7f       	andi	r24, 0xFE	; 254
    18ba:	8f bd       	out	0x2f, r24	; 47
			set_bit(TCCR1A,WGM11);
    18bc:	8f b5       	in	r24, 0x2f	; 47
    18be:	82 60       	ori	r24, 0x02	; 2
    18c0:	8f bd       	out	0x2f, r24	; 47
			set_bit(TCCR1B,WGM12);
    18c2:	8e b5       	in	r24, 0x2e	; 46
    18c4:	88 60       	ori	r24, 0x08	; 8
    18c6:	8e bd       	out	0x2e, r24	; 46
			set_bit(TCCR1B,WGM13);
    18c8:	8e b5       	in	r24, 0x2e	; 46
    18ca:	80 61       	ori	r24, 0x10	; 16
    18cc:	8e bd       	out	0x2e, r24	; 46
    18ce:	0e c0       	rjmp	.+28     	; 0x18ec <Timer+0x1fc>
		}
		
		else if (Mode == PWM_Phase_Correct)
    18d0:	61 33       	cpi	r22, 0x31	; 49
    18d2:	61 f4       	brne	.+24     	; 0x18ec <Timer+0x1fc>
		{
			//Enable Phase Correct Mode --> ICR1
			clear_bit(TCCR1A,WGM10);
    18d4:	8f b5       	in	r24, 0x2f	; 47
    18d6:	8e 7f       	andi	r24, 0xFE	; 254
    18d8:	8f bd       	out	0x2f, r24	; 47
			set_bit(TCCR1A,WGM11);
    18da:	8f b5       	in	r24, 0x2f	; 47
    18dc:	82 60       	ori	r24, 0x02	; 2
    18de:	8f bd       	out	0x2f, r24	; 47
			clear_bit(TCCR1B,WGM12);
    18e0:	8e b5       	in	r24, 0x2e	; 46
    18e2:	87 7f       	andi	r24, 0xF7	; 247
    18e4:	8e bd       	out	0x2e, r24	; 46
			set_bit(TCCR1B,WGM13);
    18e6:	8e b5       	in	r24, 0x2e	; 46
    18e8:	80 61       	ori	r24, 0x10	; 16
    18ea:	8e bd       	out	0x2e, r24	; 46
		}
		
		
		if (COM == COM_OFF)
    18ec:	40 33       	cpi	r20, 0x30	; 48
    18ee:	39 f4       	brne	.+14     	; 0x18fe <Timer+0x20e>
		{
			clear_bit(TCCR1A,COM1A0);
    18f0:	8f b5       	in	r24, 0x2f	; 47
    18f2:	8f 7b       	andi	r24, 0xBF	; 191
    18f4:	8f bd       	out	0x2f, r24	; 47
			clear_bit(TCCR1A,COM1A1);
    18f6:	8f b5       	in	r24, 0x2f	; 47
    18f8:	8f 77       	andi	r24, 0x7F	; 127
    18fa:	8f bd       	out	0x2f, r24	; 47
    18fc:	08 95       	ret
		}
		else if (COM == COM_Toggle) //reserved if not Normal Mode
    18fe:	41 33       	cpi	r20, 0x31	; 49
    1900:	39 f4       	brne	.+14     	; 0x1910 <Timer+0x220>
		{
			set_bit(TCCR1A,COM1A0);
    1902:	8f b5       	in	r24, 0x2f	; 47
    1904:	80 64       	ori	r24, 0x40	; 64
    1906:	8f bd       	out	0x2f, r24	; 47
			clear_bit(TCCR1A,COM1A1);
    1908:	8f b5       	in	r24, 0x2f	; 47
    190a:	8f 77       	andi	r24, 0x7F	; 127
    190c:	8f bd       	out	0x2f, r24	; 47
    190e:	08 95       	ret
		}
		else if (COM == COM_Clear)
    1910:	42 33       	cpi	r20, 0x32	; 50
    1912:	39 f4       	brne	.+14     	; 0x1922 <Timer+0x232>
		{
			clear_bit(TCCR1A,COM1A0);
    1914:	8f b5       	in	r24, 0x2f	; 47
    1916:	8f 7b       	andi	r24, 0xBF	; 191
    1918:	8f bd       	out	0x2f, r24	; 47
			set_bit(TCCR1A,COM1A1);
    191a:	8f b5       	in	r24, 0x2f	; 47
    191c:	80 68       	ori	r24, 0x80	; 128
    191e:	8f bd       	out	0x2f, r24	; 47
    1920:	08 95       	ret
		}
		else if (COM == COM_Set)
    1922:	43 33       	cpi	r20, 0x33	; 51
    1924:	31 f4       	brne	.+12     	; 0x1932 <Timer+0x242>
		{
			set_bit(TCCR1A,COM1A0);
    1926:	8f b5       	in	r24, 0x2f	; 47
    1928:	80 64       	ori	r24, 0x40	; 64
    192a:	8f bd       	out	0x2f, r24	; 47
			set_bit(TCCR1A,COM1A1);
    192c:	8f b5       	in	r24, 0x2f	; 47
    192e:	80 68       	ori	r24, 0x80	; 128
    1930:	8f bd       	out	0x2f, r24	; 47
    1932:	08 95       	ret

00001934 <UART_Bit_Stops>:
void UART_Bit_Stops()
{
	#if Bit_Stops == 1
		clear_bit(UCSRC,USBS);	// Clearing this bit means 1-bit stops
	#elif Bit_Stops == 2
		set_bit(UCSRC,USBS);	// Setting this bit means 2-bit stops
    1934:	80 b5       	in	r24, 0x20	; 32
    1936:	88 60       	ori	r24, 0x08	; 8
    1938:	80 bd       	out	0x20, r24	; 32
    193a:	08 95       	ret

0000193c <UART_Mode_Select>:
}

void UART_Mode_Select()
{
	#if Mode_Select == 0
	clear_bit(UCSRB,UMSEL);	// Asynchronous operation	
    193c:	56 98       	cbi	0x0a, 6	; 10
    193e:	08 95       	ret

00001940 <UART_Init>:
	#endif
}

void UART_Init (unsigned int baud)
{
	UBRRH = (unsigned char) (baud>>8);		// to write on the upper register
    1940:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char) (baud);			// to write on the lower register
    1942:	89 b9       	out	0x09, r24	; 9
	
	UART_Mode_Select();		// Determining Synchronous/Asynchronous operation
    1944:	0e 94 9e 0c 	call	0x193c	; 0x193c <UART_Mode_Select>
	
	set_bit(UCSRB,TXEN);	// Enable Transmitter
    1948:	53 9a       	sbi	0x0a, 3	; 10
	set_bit(UCSRB,RXEN);	// Enable Receiver
    194a:	54 9a       	sbi	0x0a, 4	; 10
	set_bit(UCSRC,URSEL);	// Setting this bit means that UCSRC setting will be updated otherwise, UBRRH setting will be updated
    194c:	80 b5       	in	r24, 0x20	; 32
    194e:	80 68       	ori	r24, 0x80	; 128
    1950:	80 bd       	out	0x20, r24	; 32
	
	UART_Bit_Stops();		// Determining 1 / 2 bits stops
    1952:	0e 94 9a 0c 	call	0x1934	; 0x1934 <UART_Bit_Stops>
	
	// character size 8-bit
	set_bit(UCSRC,UCSZ0);	
    1956:	80 b5       	in	r24, 0x20	; 32
    1958:	82 60       	ori	r24, 0x02	; 2
    195a:	80 bd       	out	0x20, r24	; 32
	set_bit(UCSRC,UCSZ1);	
    195c:	80 b5       	in	r24, 0x20	; 32
    195e:	84 60       	ori	r24, 0x04	; 4
    1960:	80 bd       	out	0x20, r24	; 32
    1962:	08 95       	ret

00001964 <UART_Transmit>:
}

void UART_Transmit(unsigned char data)
{
	// If UDRE is one, the buffer is empty, and therefore ready to be written.
	while(!(UCSRA & (1<<UDRE)))		// stuck in a loop when UDRE is not one (the data is not ready to be transmitted)
    1964:	5d 9b       	sbis	0x0b, 5	; 11
    1966:	fe cf       	rjmp	.-4      	; 0x1964 <UART_Transmit>
	{
	}
	UDR = data;		// USART Data Register (UDR) stores the data to be transmitted 
    1968:	8c b9       	out	0x0c, r24	; 12
    196a:	08 95       	ret

0000196c <UART_Receive>:


unsigned char UART_Receive()
{
	// USART Receive Complete (RXC) flag is one when there are unread data in the receive buffer
	while(!(UCSRA & (1<<RXC)))		// stuck in a loop when RXC is not one (the receive buffer is empty. that is, does not contain any unread data)
    196c:	5f 99       	sbic	0x0b, 7	; 11
    196e:	04 c0       	rjmp	.+8      	; 0x1978 <UART_Receive+0xc>
	{
		AC_ON();
    1970:	0e 94 53 00 	call	0xa6	; 0xa6 <AC_ON>


unsigned char UART_Receive()
{
	// USART Receive Complete (RXC) flag is one when there are unread data in the receive buffer
	while(!(UCSRA & (1<<RXC)))		// stuck in a loop when RXC is not one (the receive buffer is empty. that is, does not contain any unread data)
    1974:	5f 9b       	sbis	0x0b, 7	; 11
    1976:	fc cf       	rjmp	.-8      	; 0x1970 <UART_Receive+0x4>
	{
		AC_ON();
	}
	
	return UDR;		// returning the data stored in the USART Data Register (UDR)
    1978:	8c b1       	in	r24, 0x0c	; 12
}
    197a:	08 95       	ret

0000197c <UART_Send_String>:


void UART_Send_String (char* text)
{
    197c:	0f 93       	push	r16
    197e:	1f 93       	push	r17
    1980:	cf 93       	push	r28
    1982:	fc 01       	movw	r30, r24
	unsigned char j=0;
	while(text[j]!= '\0')	// Looping on the elements of array till the NULL character
    1984:	80 81       	ld	r24, Z
    1986:	88 23       	and	r24, r24
    1988:	59 f0       	breq	.+22     	; 0x19a0 <UART_Send_String+0x24>
    198a:	8f 01       	movw	r16, r30
    198c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		UART_Transmit(text[j]);
    198e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		j++;
    1992:	cf 5f       	subi	r28, 0xFF	; 255


void UART_Send_String (char* text)
{
	unsigned char j=0;
	while(text[j]!= '\0')	// Looping on the elements of array till the NULL character
    1994:	f8 01       	movw	r30, r16
    1996:	ec 0f       	add	r30, r28
    1998:	f1 1d       	adc	r31, r1
    199a:	80 81       	ld	r24, Z
    199c:	81 11       	cpse	r24, r1
    199e:	f7 cf       	rjmp	.-18     	; 0x198e <UART_Send_String+0x12>
	{
		UART_Transmit(text[j]);
		j++;
	}	
}
    19a0:	cf 91       	pop	r28
    19a2:	1f 91       	pop	r17
    19a4:	0f 91       	pop	r16
    19a6:	08 95       	ret

000019a8 <UART_Welcome_Message>:
}*/


void UART_Welcome_Message()
{
	UART_Send_String ("Welcome to Smart Home System");
    19a8:	83 ec       	ldi	r24, 0xC3	; 195
    19aa:	92 e0       	ldi	r25, 0x02	; 2
    19ac:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
	UART_Transmit('\r');
    19b0:	8d e0       	ldi	r24, 0x0D	; 13
    19b2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
	UART_Transmit('\r');
    19b6:	8d e0       	ldi	r24, 0x0D	; 13
    19b8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
    19bc:	2f ef       	ldi	r18, 0xFF	; 255
    19be:	85 ea       	ldi	r24, 0xA5	; 165
    19c0:	9e e0       	ldi	r25, 0x0E	; 14
    19c2:	21 50       	subi	r18, 0x01	; 1
    19c4:	80 40       	sbci	r24, 0x00	; 0
    19c6:	90 40       	sbci	r25, 0x00	; 0
    19c8:	e1 f7       	brne	.-8      	; 0x19c2 <UART_Welcome_Message+0x1a>
    19ca:	00 c0       	rjmp	.+0      	; 0x19cc <UART_Welcome_Message+0x24>
    19cc:	00 00       	nop
    19ce:	08 95       	ret

000019d0 <UART_Mode_Choice>:
	_delay_ms(300);
}

unsigned char UART_Mode_Choice()
{
    19d0:	cf 93       	push	r28
	unsigned char uart_var = 0;
	
	UART_Send_String ("Please choose your Mode (Admin/User) ");
    19d2:	80 ee       	ldi	r24, 0xE0	; 224
    19d4:	92 e0       	ldi	r25, 0x02	; 2
    19d6:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
	UART_Transmit('\r');
    19da:	8d e0       	ldi	r24, 0x0D	; 13
    19dc:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
	UART_Send_String ("1. Admin Mode ");
    19e0:	86 e0       	ldi	r24, 0x06	; 6
    19e2:	93 e0       	ldi	r25, 0x03	; 3
    19e4:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
	UART_Transmit('\r');
    19e8:	8d e0       	ldi	r24, 0x0D	; 13
    19ea:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
	UART_Send_String ("2. User Mode ");
    19ee:	85 e1       	ldi	r24, 0x15	; 21
    19f0:	93 e0       	ldi	r25, 0x03	; 3
    19f2:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
	UART_Transmit('\r');
    19f6:	8d e0       	ldi	r24, 0x0D	; 13
    19f8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
	UART_Transmit('\r');
    19fc:	8d e0       	ldi	r24, 0x0D	; 13
    19fe:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
    1a02:	2f ef       	ldi	r18, 0xFF	; 255
    1a04:	85 ea       	ldi	r24, 0xA5	; 165
    1a06:	9e e0       	ldi	r25, 0x0E	; 14
    1a08:	21 50       	subi	r18, 0x01	; 1
    1a0a:	80 40       	sbci	r24, 0x00	; 0
    1a0c:	90 40       	sbci	r25, 0x00	; 0
    1a0e:	e1 f7       	brne	.-8      	; 0x1a08 <UART_Mode_Choice+0x38>
    1a10:	00 c0       	rjmp	.+0      	; 0x1a12 <UART_Mode_Choice+0x42>
    1a12:	00 00       	nop
	_delay_ms(300);
	
	UART_Send_String ("Your Choice : ");
    1a14:	82 ed       	ldi	r24, 0xD2	; 210
    1a16:	91 e0       	ldi	r25, 0x01	; 1
    1a18:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
	while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
	{
		uart_var = UART_Receive();
    1a1c:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
    1a20:	c8 2f       	mov	r28, r24
		UART_Transmit(uart_var);
    1a22:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
	UART_Transmit('\r');
	UART_Transmit('\r');
	_delay_ms(300);
	
	UART_Send_String ("Your Choice : ");
	while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1a26:	80 ed       	ldi	r24, 0xD0	; 208
    1a28:	8c 0f       	add	r24, r28
    1a2a:	8a 30       	cpi	r24, 0x0A	; 10
    1a2c:	b8 f7       	brcc	.-18     	; 0x1a1c <UART_Mode_Choice+0x4c>
	{
		uart_var = UART_Receive();
		UART_Transmit(uart_var);
	}
	
	UART_Transmit('\r');
    1a2e:	8d e0       	ldi	r24, 0x0D	; 13
    1a30:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
	UART_Transmit('\r');
    1a34:	8d e0       	ldi	r24, 0x0D	; 13
    1a36:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
	
	while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_2)))
    1a3a:	8f ec       	ldi	r24, 0xCF	; 207
    1a3c:	8c 0f       	add	r24, r28
    1a3e:	82 30       	cpi	r24, 0x02	; 2
    1a40:	08 f1       	brcs	.+66     	; 0x1a84 <UART_Mode_Choice+0xb4>
	{
		UART_Send_String ("Please Choose only 1 or 2");
    1a42:	83 e2       	ldi	r24, 0x23	; 35
    1a44:	93 e0       	ldi	r25, 0x03	; 3
    1a46:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
		UART_Transmit('\r');
    1a4a:	8d e0       	ldi	r24, 0x0D	; 13
    1a4c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		UART_Transmit('\r');
    1a50:	8d e0       	ldi	r24, 0x0D	; 13
    1a52:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		uart_var = 0;
		UART_Send_String("Your choice : ");
    1a56:	8d e3       	ldi	r24, 0x3D	; 61
    1a58:	93 e0       	ldi	r25, 0x03	; 3
    1a5a:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
		{
			uart_var = UART_Receive();
    1a5e:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
    1a62:	c8 2f       	mov	r28, r24
			UART_Transmit(uart_var);	
    1a64:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		UART_Send_String ("Please Choose only 1 or 2");
		UART_Transmit('\r');
		UART_Transmit('\r');
		uart_var = 0;
		UART_Send_String("Your choice : ");
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1a68:	80 ed       	ldi	r24, 0xD0	; 208
    1a6a:	8c 0f       	add	r24, r28
    1a6c:	8a 30       	cpi	r24, 0x0A	; 10
    1a6e:	b8 f7       	brcc	.-18     	; 0x1a5e <UART_Mode_Choice+0x8e>
		{
			uart_var = UART_Receive();
			UART_Transmit(uart_var);	
		}
		
		UART_Transmit('\r');
    1a70:	8d e0       	ldi	r24, 0x0D	; 13
    1a72:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		UART_Transmit('\r');
    1a76:	8d e0       	ldi	r24, 0x0D	; 13
    1a78:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
	}
	
	UART_Transmit('\r');
	UART_Transmit('\r');
	
	while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_2)))
    1a7c:	8f ec       	ldi	r24, 0xCF	; 207
    1a7e:	8c 0f       	add	r24, r28
    1a80:	82 30       	cpi	r24, 0x02	; 2
    1a82:	f8 f6       	brcc	.-66     	; 0x1a42 <UART_Mode_Choice+0x72>
		UART_Transmit('\r');
		UART_Transmit('\r');
	}
	
	return uart_var;
}
    1a84:	8c 2f       	mov	r24, r28
    1a86:	cf 91       	pop	r28
    1a88:	08 95       	ret

00001a8a <UART_Rooms_Leds_Control>:
//}



void UART_Rooms_Leds_Control()
{
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
	unsigned char room_no_temp = 0;
	unsigned char room_on_off_temp = 0;
	unsigned char uart_var = 0;
	
	UART_Send_String ("1. Room 1 ");
    1a8e:	8c e4       	ldi	r24, 0x4C	; 76
    1a90:	93 e0       	ldi	r25, 0x03	; 3
    1a92:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
	UART_Transmit('\r');
    1a96:	8d e0       	ldi	r24, 0x0D	; 13
    1a98:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
	UART_Send_String ("2. Room 2 ");
    1a9c:	87 e5       	ldi	r24, 0x57	; 87
    1a9e:	93 e0       	ldi	r25, 0x03	; 3
    1aa0:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
	UART_Transmit('\r');
    1aa4:	8d e0       	ldi	r24, 0x0D	; 13
    1aa6:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
	UART_Send_String ("3. Room 3 ");
    1aaa:	82 e6       	ldi	r24, 0x62	; 98
    1aac:	93 e0       	ldi	r25, 0x03	; 3
    1aae:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
	UART_Transmit('\r');
    1ab2:	8d e0       	ldi	r24, 0x0D	; 13
    1ab4:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
	UART_Send_String ("4. Room 4 ");
    1ab8:	8d e6       	ldi	r24, 0x6D	; 109
    1aba:	93 e0       	ldi	r25, 0x03	; 3
    1abc:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
	UART_Transmit('\r');
    1ac0:	8d e0       	ldi	r24, 0x0D	; 13
    1ac2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
	UART_Send_String ("5. Room 5 ");
    1ac6:	88 e7       	ldi	r24, 0x78	; 120
    1ac8:	93 e0       	ldi	r25, 0x03	; 3
    1aca:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
	UART_Transmit('\r');
    1ace:	8d e0       	ldi	r24, 0x0D	; 13
    1ad0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
	UART_Send_String ("6. All rooms ");
    1ad4:	83 e8       	ldi	r24, 0x83	; 131
    1ad6:	93 e0       	ldi	r25, 0x03	; 3
    1ad8:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
	UART_Transmit('\r');
    1adc:	8d e0       	ldi	r24, 0x0D	; 13
    1ade:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
	UART_Transmit('\r');
    1ae2:	8d e0       	ldi	r24, 0x0D	; 13
    1ae4:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
	UART_Send_String("Your choice : ");
    1ae8:	8d e3       	ldi	r24, 0x3D	; 61
    1aea:	93 e0       	ldi	r25, 0x03	; 3
    1aec:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
	
	while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
	{
		uart_var = UART_Receive();
    1af0:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
    1af4:	c8 2f       	mov	r28, r24
		UART_Transmit(uart_var);
    1af6:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		UART_Transmit('\r');
    1afa:	8d e0       	ldi	r24, 0x0D	; 13
    1afc:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		UART_Transmit('\r');
    1b00:	8d e0       	ldi	r24, 0x0D	; 13
    1b02:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
	UART_Send_String ("6. All rooms ");
	UART_Transmit('\r');
	UART_Transmit('\r');
	UART_Send_String("Your choice : ");
	
	while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1b06:	80 ed       	ldi	r24, 0xD0	; 208
    1b08:	8c 0f       	add	r24, r28
    1b0a:	8a 30       	cpi	r24, 0x0A	; 10
    1b0c:	88 f7       	brcc	.-30     	; 0x1af0 <UART_Rooms_Leds_Control+0x66>
    1b0e:	1d c0       	rjmp	.+58     	; 0x1b4a <UART_Rooms_Leds_Control+0xc0>
	}
	room_no_temp = uart_var;
	
	while (!((room_no_temp >= Ascii_1) && (room_no_temp <= Ascii_6)))
	{
		UART_Send_String ("Please Choose only from 1 to 6");
    1b10:	81 e9       	ldi	r24, 0x91	; 145
    1b12:	93 e0       	ldi	r25, 0x03	; 3
    1b14:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
		UART_Transmit('\r');
    1b18:	8d e0       	ldi	r24, 0x0D	; 13
    1b1a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		UART_Transmit('\r');
    1b1e:	8d e0       	ldi	r24, 0x0D	; 13
    1b20:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		UART_Send_String("Your choice : ");
    1b24:	8d e3       	ldi	r24, 0x3D	; 61
    1b26:	93 e0       	ldi	r25, 0x03	; 3
    1b28:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
		
		uart_var = 0;
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
		{
			uart_var = UART_Receive();
    1b2c:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
    1b30:	c8 2f       	mov	r28, r24
			UART_Transmit(uart_var);
    1b32:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Transmit('\r');
    1b36:	8d e0       	ldi	r24, 0x0D	; 13
    1b38:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Transmit('\r');
    1b3c:	8d e0       	ldi	r24, 0x0D	; 13
    1b3e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		UART_Transmit('\r');
		UART_Transmit('\r');
		UART_Send_String("Your choice : ");
		
		uart_var = 0;
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1b42:	80 ed       	ldi	r24, 0xD0	; 208
    1b44:	8c 0f       	add	r24, r28
    1b46:	8a 30       	cpi	r24, 0x0A	; 10
    1b48:	88 f7       	brcc	.-30     	; 0x1b2c <UART_Rooms_Leds_Control+0xa2>
		UART_Transmit('\r');
		UART_Transmit('\r');
	}
	room_no_temp = uart_var;
	
	while (!((room_no_temp >= Ascii_1) && (room_no_temp <= Ascii_6)))
    1b4a:	8f ec       	ldi	r24, 0xCF	; 207
    1b4c:	8c 0f       	add	r24, r28
    1b4e:	86 30       	cpi	r24, 0x06	; 6
    1b50:	f8 f6       	brcc	.-66     	; 0x1b10 <UART_Rooms_Leds_Control+0x86>
		}
		room_no_temp = uart_var;
	}
	uart_var = 0;
	
	UART_Send_String ("Turn On : 1");
    1b52:	80 eb       	ldi	r24, 0xB0	; 176
    1b54:	93 e0       	ldi	r25, 0x03	; 3
    1b56:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
	UART_Transmit('\r');
    1b5a:	8d e0       	ldi	r24, 0x0D	; 13
    1b5c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
	UART_Send_String ("Turn Off : 0");
    1b60:	8c eb       	ldi	r24, 0xBC	; 188
    1b62:	93 e0       	ldi	r25, 0x03	; 3
    1b64:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
	UART_Transmit('\r');
    1b68:	8d e0       	ldi	r24, 0x0D	; 13
    1b6a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
	UART_Transmit('\r');
    1b6e:	8d e0       	ldi	r24, 0x0D	; 13
    1b70:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
	UART_Send_String("Your Choice : ");
    1b74:	82 ed       	ldi	r24, 0xD2	; 210
    1b76:	91 e0       	ldi	r25, 0x01	; 1
    1b78:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
	while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
	{
		uart_var = UART_Receive();
    1b7c:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
    1b80:	d8 2f       	mov	r29, r24
		UART_Transmit(uart_var);
    1b82:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		UART_Transmit('\r');
    1b86:	8d e0       	ldi	r24, 0x0D	; 13
    1b88:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		UART_Transmit('\r');
    1b8c:	8d e0       	ldi	r24, 0x0D	; 13
    1b8e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
	UART_Transmit('\r');
	UART_Send_String ("Turn Off : 0");
	UART_Transmit('\r');
	UART_Transmit('\r');
	UART_Send_String("Your Choice : ");
	while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1b92:	80 ed       	ldi	r24, 0xD0	; 208
    1b94:	8d 0f       	add	r24, r29
    1b96:	8a 30       	cpi	r24, 0x0A	; 10
    1b98:	88 f7       	brcc	.-30     	; 0x1b7c <UART_Rooms_Leds_Control+0xf2>
    1b9a:	1d c0       	rjmp	.+58     	; 0x1bd6 <UART_Rooms_Leds_Control+0x14c>
	}
	room_on_off_temp = uart_var;
	
	while ((room_on_off_temp != Ascii_1) && (room_on_off_temp != Ascii_0))
	{
		UART_Send_String ("Please Choose 1 or 0");
    1b9c:	89 ec       	ldi	r24, 0xC9	; 201
    1b9e:	93 e0       	ldi	r25, 0x03	; 3
    1ba0:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
		UART_Transmit('\r');
    1ba4:	8d e0       	ldi	r24, 0x0D	; 13
    1ba6:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		UART_Transmit('\r');
    1baa:	8d e0       	ldi	r24, 0x0D	; 13
    1bac:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		
		uart_var = 0;
		UART_Send_String("Your choice : ");
    1bb0:	8d e3       	ldi	r24, 0x3D	; 61
    1bb2:	93 e0       	ldi	r25, 0x03	; 3
    1bb4:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
		{
			uart_var = UART_Receive();
    1bb8:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
    1bbc:	d8 2f       	mov	r29, r24
			UART_Transmit(uart_var);
    1bbe:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Transmit('\r');
    1bc2:	8d e0       	ldi	r24, 0x0D	; 13
    1bc4:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Transmit('\r');
    1bc8:	8d e0       	ldi	r24, 0x0D	; 13
    1bca:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		UART_Transmit('\r');
		UART_Transmit('\r');
		
		uart_var = 0;
		UART_Send_String("Your choice : ");
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1bce:	80 ed       	ldi	r24, 0xD0	; 208
    1bd0:	8d 0f       	add	r24, r29
    1bd2:	8a 30       	cpi	r24, 0x0A	; 10
    1bd4:	88 f7       	brcc	.-30     	; 0x1bb8 <UART_Rooms_Leds_Control+0x12e>
		UART_Transmit('\r');
		UART_Transmit('\r');
	}
	room_on_off_temp = uart_var;
	
	while ((room_on_off_temp != Ascii_1) && (room_on_off_temp != Ascii_0))
    1bd6:	80 ed       	ldi	r24, 0xD0	; 208
    1bd8:	8d 0f       	add	r24, r29
    1bda:	82 30       	cpi	r24, 0x02	; 2
    1bdc:	f8 f6       	brcc	.-66     	; 0x1b9c <UART_Rooms_Leds_Control+0x112>
		}
		room_on_off_temp = uart_var;
	}
	uart_var = 0;
	
	if(room_no_temp == Ascii_6)
    1bde:	c6 33       	cpi	r28, 0x36	; 54
    1be0:	09 f0       	breq	.+2      	; 0x1be4 <UART_Rooms_Leds_Control+0x15a>
    1be2:	6c c0       	rjmp	.+216    	; 0x1cbc <UART_Rooms_Leds_Control+0x232>
	{
		if(room_on_off_temp == Ascii_1)
    1be4:	d1 33       	cpi	r29, 0x31	; 49
    1be6:	a9 f5       	brne	.+106    	; 0x1c52 <UART_Rooms_Leds_Control+0x1c8>
		{
			LED_STAT(ON,Room1);
    1be8:	61 e3       	ldi	r22, 0x31	; 49
    1bea:	81 e3       	ldi	r24, 0x31	; 49
    1bec:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <LED_STAT>
			LED_STAT(ON,Room2);
    1bf0:	62 e3       	ldi	r22, 0x32	; 50
    1bf2:	81 e3       	ldi	r24, 0x31	; 49
    1bf4:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <LED_STAT>
			LED_STAT(ON,Room3);
    1bf8:	63 e3       	ldi	r22, 0x33	; 51
    1bfa:	81 e3       	ldi	r24, 0x31	; 49
    1bfc:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <LED_STAT>
			LED_STAT(ON,Room4);
    1c00:	64 e3       	ldi	r22, 0x34	; 52
    1c02:	81 e3       	ldi	r24, 0x31	; 49
    1c04:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <LED_STAT>
			LED_STAT(ON,Room5);
    1c08:	65 e3       	ldi	r22, 0x35	; 53
    1c0a:	81 e3       	ldi	r24, 0x31	; 49
    1c0c:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <LED_STAT>
			
			UART_Send_String("All Leds are Turned On");
    1c10:	8e ed       	ldi	r24, 0xDE	; 222
    1c12:	93 e0       	ldi	r25, 0x03	; 3
    1c14:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Transmit('\r');
    1c18:	8d e0       	ldi	r24, 0x0D	; 13
    1c1a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Transmit('\r');
    1c1e:	8d e0       	ldi	r24, 0x0D	; 13
    1c20:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			
			
			LCD_Write_String("All Leds are ");
    1c24:	8f ee       	ldi	r24, 0xEF	; 239
    1c26:	91 e0       	ldi	r25, 0x01	; 1
    1c28:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    1c2c:	80 ec       	ldi	r24, 0xC0	; 192
    1c2e:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			LCD_Write_String ("Turned On");
    1c32:	8b ee       	ldi	r24, 0xEB	; 235
    1c34:	93 e0       	ldi	r25, 0x03	; 3
    1c36:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
    1c3a:	2f ef       	ldi	r18, 0xFF	; 255
    1c3c:	83 ed       	ldi	r24, 0xD3	; 211
    1c3e:	90 e3       	ldi	r25, 0x30	; 48
    1c40:	21 50       	subi	r18, 0x01	; 1
    1c42:	80 40       	sbci	r24, 0x00	; 0
    1c44:	90 40       	sbci	r25, 0x00	; 0
    1c46:	e1 f7       	brne	.-8      	; 0x1c40 <UART_Rooms_Leds_Control+0x1b6>
    1c48:	00 c0       	rjmp	.+0      	; 0x1c4a <UART_Rooms_Leds_Control+0x1c0>
    1c4a:	00 00       	nop
			_delay_ms(1000);
			LCD_Clear_Screen();
    1c4c:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
    1c50:	3d c0       	rjmp	.+122    	; 0x1ccc <UART_Rooms_Leds_Control+0x242>
		}
		else
		{
			LED_STAT(OFF,Room1);
    1c52:	61 e3       	ldi	r22, 0x31	; 49
    1c54:	80 e3       	ldi	r24, 0x30	; 48
    1c56:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <LED_STAT>
			LED_STAT(OFF,Room2);
    1c5a:	62 e3       	ldi	r22, 0x32	; 50
    1c5c:	80 e3       	ldi	r24, 0x30	; 48
    1c5e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <LED_STAT>
			LED_STAT(OFF,Room3);
    1c62:	63 e3       	ldi	r22, 0x33	; 51
    1c64:	80 e3       	ldi	r24, 0x30	; 48
    1c66:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <LED_STAT>
			LED_STAT(OFF,Room4);
    1c6a:	64 e3       	ldi	r22, 0x34	; 52
    1c6c:	80 e3       	ldi	r24, 0x30	; 48
    1c6e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <LED_STAT>
			LED_STAT(OFF,Room5);
    1c72:	65 e3       	ldi	r22, 0x35	; 53
    1c74:	80 e3       	ldi	r24, 0x30	; 48
    1c76:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <LED_STAT>
			
			UART_Send_String("All Leds are Turned Off");
    1c7a:	85 ef       	ldi	r24, 0xF5	; 245
    1c7c:	93 e0       	ldi	r25, 0x03	; 3
    1c7e:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Transmit('\r');
    1c82:	8d e0       	ldi	r24, 0x0D	; 13
    1c84:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Transmit('\r');
    1c88:	8d e0       	ldi	r24, 0x0D	; 13
    1c8a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			
			LCD_Write_String("All Leds are ");
    1c8e:	8f ee       	ldi	r24, 0xEF	; 239
    1c90:	91 e0       	ldi	r25, 0x01	; 1
    1c92:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    1c96:	80 ec       	ldi	r24, 0xC0	; 192
    1c98:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			LCD_Write_String ("Turned Off");
    1c9c:	82 e0       	ldi	r24, 0x02	; 2
    1c9e:	94 e0       	ldi	r25, 0x04	; 4
    1ca0:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
    1ca4:	2f ef       	ldi	r18, 0xFF	; 255
    1ca6:	83 ed       	ldi	r24, 0xD3	; 211
    1ca8:	90 e3       	ldi	r25, 0x30	; 48
    1caa:	21 50       	subi	r18, 0x01	; 1
    1cac:	80 40       	sbci	r24, 0x00	; 0
    1cae:	90 40       	sbci	r25, 0x00	; 0
    1cb0:	e1 f7       	brne	.-8      	; 0x1caa <UART_Rooms_Leds_Control+0x220>
    1cb2:	00 c0       	rjmp	.+0      	; 0x1cb4 <UART_Rooms_Leds_Control+0x22a>
    1cb4:	00 00       	nop
			_delay_ms(1000);
			LCD_Clear_Screen();
    1cb6:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
    1cba:	08 c0       	rjmp	.+16     	; 0x1ccc <UART_Rooms_Leds_Control+0x242>
		}
	}
	else
	{
		LED_STAT(room_on_off_temp,room_no_temp);
    1cbc:	6c 2f       	mov	r22, r28
    1cbe:	8d 2f       	mov	r24, r29
    1cc0:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <LED_STAT>
		//UART_Display_LED (room_no_temp, room_on_off_temp);
		LCD_Display_LED (room_no_temp, room_on_off_temp);	
    1cc4:	6d 2f       	mov	r22, r29
    1cc6:	8c 2f       	mov	r24, r28
    1cc8:	0e 94 41 07 	call	0xe82	; 0xe82 <LCD_Display_LED>
	}
	
	UART_Transmit('\r');
    1ccc:	8d e0       	ldi	r24, 0x0D	; 13
    1cce:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
	UART_Transmit('\r');
    1cd2:	8d e0       	ldi	r24, 0x0D	; 13
    1cd4:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
	UART_Transmit('\r');
    1cd8:	8d e0       	ldi	r24, 0x0D	; 13
    1cda:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
}
    1cde:	df 91       	pop	r29
    1ce0:	cf 91       	pop	r28
    1ce2:	08 95       	ret

00001ce4 <UART_Admin_Interfacing>:



void UART_Admin_Interfacing()
{
    1ce4:	2f 92       	push	r2
    1ce6:	3f 92       	push	r3
    1ce8:	4f 92       	push	r4
    1cea:	5f 92       	push	r5
    1cec:	6f 92       	push	r6
    1cee:	7f 92       	push	r7
    1cf0:	8f 92       	push	r8
    1cf2:	9f 92       	push	r9
    1cf4:	af 92       	push	r10
    1cf6:	bf 92       	push	r11
    1cf8:	cf 92       	push	r12
    1cfa:	df 92       	push	r13
    1cfc:	ef 92       	push	r14
    1cfe:	ff 92       	push	r15
    1d00:	0f 93       	push	r16
    1d02:	1f 93       	push	r17
    1d04:	cf 93       	push	r28
    1d06:	df 93       	push	r29
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	a0 97       	sbiw	r28, 0x20	; 32
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	f8 94       	cli
    1d12:	de bf       	out	0x3e, r29	; 62
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	cd bf       	out	0x3d, r28	; 61
	char password_temp_arr[4];	// array taken from eeprom to compare.
	char username_arr_2[4];		// array taken from eeprom in deleting user part.
	char password_arr_2[4];		// array taken from eeprom in deleting user part.
	unsigned char Compare_Var = 0;
	unsigned char user_type = 0;
	char admin_counter = 0;
    1d18:	19 8e       	std	Y+25, r1	; 0x19
	char user_counter = 0;
    1d1a:	1a 8e       	std	Y+26, r1	; 0x1a
	char max_number_var = 0;
    1d1c:	1b 8e       	std	Y+27, r1	; 0x1b
	char password_arr[4];		// array filled by user interface (ADMIN/USER)
	char username_temp_arr[4];	// array taken from eeprom to compare.
	char password_temp_arr[4];	// array taken from eeprom to compare.
	char username_arr_2[4];		// array taken from eeprom in deleting user part.
	char password_arr_2[4];		// array taken from eeprom in deleting user part.
	unsigned char Compare_Var = 0;
    1d1e:	1c 8e       	std	Y+28, r1	; 0x1c
void UART_Admin_Interfacing()
{
	unsigned char uart_var = 0;
	unsigned char option = 0;
	unsigned char brightness_level = 0;
	unsigned char looping_counter = 0;
    1d20:	71 2c       	mov	r7, r1
    1d22:	4e 01       	movw	r8, r28
    1d24:	25 e0       	ldi	r18, 0x05	; 5
    1d26:	82 0e       	add	r8, r18
    1d28:	91 1c       	adc	r9, r1
    1d2a:	5e 01       	movw	r10, r28
    1d2c:	89 e0       	ldi	r24, 0x09	; 9
    1d2e:	a8 0e       	add	r10, r24
    1d30:	b1 1c       	adc	r11, r1
						EEPROM_readByte(LCD_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
						_delay_ms(10);
					}
					
					
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
    1d32:	fe 01       	movw	r30, r28
    1d34:	31 96       	adiw	r30, 0x01	; 1
    1d36:	6f 01       	movw	r12, r30
    1d38:	4a 2c       	mov	r4, r10
    1d3a:	bd 8e       	std	Y+29, r11	; 0x1d
    1d3c:	6e 2e       	mov	r6, r30
    1d3e:	5d 2c       	mov	r5, r13
    1d40:	8e 8e       	std	Y+30, r8	; 0x1e
    1d42:	9f 8e       	std	Y+31, r9	; 0x1f
	char user_counter = 0;
	char max_number_var = 0;
	
	while (option != Ascii_8)	// Corresponding to Logout
	{
		UART_Send_String ("1. Controlling Lighting (Room 1 to Room 5)");
    1d44:	8d e0       	ldi	r24, 0x0D	; 13
    1d46:	94 e0       	ldi	r25, 0x04	; 4
    1d48:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
		UART_Transmit('\r');
    1d4c:	8d e0       	ldi	r24, 0x0D	; 13
    1d4e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		UART_Send_String ("2. Dimming lamp");
    1d52:	88 e3       	ldi	r24, 0x38	; 56
    1d54:	94 e0       	ldi	r25, 0x04	; 4
    1d56:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
		UART_Transmit('\r');
    1d5a:	8d e0       	ldi	r24, 0x0D	; 13
    1d5c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		UART_Send_String ("3. Open the Door");
    1d60:	88 e4       	ldi	r24, 0x48	; 72
    1d62:	94 e0       	ldi	r25, 0x04	; 4
    1d64:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
		UART_Transmit('\r');
    1d68:	8d e0       	ldi	r24, 0x0D	; 13
    1d6a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		UART_Send_String ("4. Close the Door");
    1d6e:	89 e5       	ldi	r24, 0x59	; 89
    1d70:	94 e0       	ldi	r25, 0x04	; 4
    1d72:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
		UART_Transmit('\r');
    1d76:	8d e0       	ldi	r24, 0x0D	; 13
    1d78:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		UART_Send_String ("5. Add admin to the system");
    1d7c:	8b e6       	ldi	r24, 0x6B	; 107
    1d7e:	94 e0       	ldi	r25, 0x04	; 4
    1d80:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
		UART_Transmit('\r');
    1d84:	8d e0       	ldi	r24, 0x0D	; 13
    1d86:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		UART_Send_String ("6. Add user to the system");
    1d8a:	86 e8       	ldi	r24, 0x86	; 134
    1d8c:	94 e0       	ldi	r25, 0x04	; 4
    1d8e:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
		UART_Transmit('\r');
    1d92:	8d e0       	ldi	r24, 0x0D	; 13
    1d94:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		UART_Send_String ("7. Remove a user from the system");
    1d98:	80 ea       	ldi	r24, 0xA0	; 160
    1d9a:	94 e0       	ldi	r25, 0x04	; 4
    1d9c:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
		UART_Transmit('\r');
    1da0:	8d e0       	ldi	r24, 0x0D	; 13
    1da2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		UART_Send_String ("8. Log out");	// return to Mode choice function (Admin / User)
    1da6:	81 ec       	ldi	r24, 0xC1	; 193
    1da8:	94 e0       	ldi	r25, 0x04	; 4
    1daa:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
		UART_Transmit('\r');
    1dae:	8d e0       	ldi	r24, 0x0D	; 13
    1db0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		UART_Transmit('\r');	
    1db4:	8d e0       	ldi	r24, 0x0D	; 13
    1db6:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		
		UART_Send_String ("Your Choice : ");
    1dba:	82 ed       	ldi	r24, 0xD2	; 210
    1dbc:	91 e0       	ldi	r25, 0x01	; 1
    1dbe:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
		
		uart_var = 0; 
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
		{
			uart_var = UART_Receive();
    1dc2:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
    1dc6:	18 2f       	mov	r17, r24
		UART_Transmit('\r');	
		
		UART_Send_String ("Your Choice : ");
		
		uart_var = 0; 
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1dc8:	80 ed       	ldi	r24, 0xD0	; 208
    1dca:	81 0f       	add	r24, r17
    1dcc:	8a 30       	cpi	r24, 0x0A	; 10
    1dce:	c8 f7       	brcc	.-14     	; 0x1dc2 <UART_Admin_Interfacing+0xde>
		{
			uart_var = UART_Receive();
		}	
		UART_Transmit(uart_var);
    1dd0:	81 2f       	mov	r24, r17
    1dd2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		
		while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_8)))
    1dd6:	8f ec       	ldi	r24, 0xCF	; 207
    1dd8:	81 0f       	add	r24, r17
    1dda:	88 30       	cpi	r24, 0x08	; 8
    1ddc:	08 f1       	brcs	.+66     	; 0x1e20 <UART_Admin_Interfacing+0x13c>
		{
			UART_Send_String ("Please Choose only from 1 to 8");
    1dde:	8c ec       	ldi	r24, 0xCC	; 204
    1de0:	94 e0       	ldi	r25, 0x04	; 4
    1de2:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Transmit('\r');
    1de6:	8d e0       	ldi	r24, 0x0D	; 13
    1de8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Transmit('\r');
    1dec:	8d e0       	ldi	r24, 0x0D	; 13
    1dee:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			uart_var = 0;
			UART_Send_String("Your choice : ");
    1df2:	8d e3       	ldi	r24, 0x3D	; 61
    1df4:	93 e0       	ldi	r25, 0x03	; 3
    1df6:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
			{
				uart_var = UART_Receive();
    1dfa:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
    1dfe:	18 2f       	mov	r17, r24
				UART_Transmit(uart_var);
    1e00:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Send_String ("Please Choose only from 1 to 8");
			UART_Transmit('\r');
			UART_Transmit('\r');
			uart_var = 0;
			UART_Send_String("Your choice : ");
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1e04:	80 ed       	ldi	r24, 0xD0	; 208
    1e06:	81 0f       	add	r24, r17
    1e08:	8a 30       	cpi	r24, 0x0A	; 10
    1e0a:	b8 f7       	brcc	.-18     	; 0x1dfa <UART_Admin_Interfacing+0x116>
			{
				uart_var = UART_Receive();
				UART_Transmit(uart_var);
			}
			UART_Transmit('\r');
    1e0c:	8d e0       	ldi	r24, 0x0D	; 13
    1e0e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Transmit('\r');
    1e12:	8d e0       	ldi	r24, 0x0D	; 13
    1e14:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		{
			uart_var = UART_Receive();
		}	
		UART_Transmit(uart_var);
		
		while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_8)))
    1e18:	8f ec       	ldi	r24, 0xCF	; 207
    1e1a:	81 0f       	add	r24, r17
    1e1c:	88 30       	cpi	r24, 0x08	; 8
    1e1e:	f8 f6       	brcc	.-66     	; 0x1dde <UART_Admin_Interfacing+0xfa>
			UART_Transmit('\r');
		}
		option = uart_var;
	
	
		if(option == '1')
    1e20:	11 33       	cpi	r17, 0x31	; 49
    1e22:	19 f4       	brne	.+6      	; 0x1e2a <UART_Admin_Interfacing+0x146>
		{	
			UART_Rooms_Leds_Control();
    1e24:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <UART_Rooms_Leds_Control>
    1e28:	8d cf       	rjmp	.-230    	; 0x1d44 <UART_Admin_Interfacing+0x60>
		}
		else if(option == '2')
    1e2a:	12 33       	cpi	r17, 0x32	; 50
    1e2c:	09 f0       	breq	.+2      	; 0x1e30 <UART_Admin_Interfacing+0x14c>
    1e2e:	6c c0       	rjmp	.+216    	; 0x1f08 <UART_Admin_Interfacing+0x224>
		{
			UART_Transmit('\r');
    1e30:	8d e0       	ldi	r24, 0x0D	; 13
    1e32:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Transmit('\r');
    1e36:	8d e0       	ldi	r24, 0x0D	; 13
    1e38:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Send_String ("Please Choose one of the following brightness percentages :  ");
    1e3c:	8b ee       	ldi	r24, 0xEB	; 235
    1e3e:	94 e0       	ldi	r25, 0x04	; 4
    1e40:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Transmit('\r');
    1e44:	8d e0       	ldi	r24, 0x0D	; 13
    1e46:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Transmit('\r');
    1e4a:	8d e0       	ldi	r24, 0x0D	; 13
    1e4c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		
			UART_Send_String ("0. 0% (Turn Off Led)");
    1e50:	89 e2       	ldi	r24, 0x29	; 41
    1e52:	95 e0       	ldi	r25, 0x05	; 5
    1e54:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Transmit('\r');
    1e58:	8d e0       	ldi	r24, 0x0D	; 13
    1e5a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Send_String ("1. 25% ");
    1e5e:	8e e3       	ldi	r24, 0x3E	; 62
    1e60:	95 e0       	ldi	r25, 0x05	; 5
    1e62:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Transmit('\r');
    1e66:	8d e0       	ldi	r24, 0x0D	; 13
    1e68:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Send_String ("2. 50% ");
    1e6c:	86 e4       	ldi	r24, 0x46	; 70
    1e6e:	95 e0       	ldi	r25, 0x05	; 5
    1e70:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Transmit('\r');
    1e74:	8d e0       	ldi	r24, 0x0D	; 13
    1e76:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Send_String ("3. 75% ");
    1e7a:	8e e4       	ldi	r24, 0x4E	; 78
    1e7c:	95 e0       	ldi	r25, 0x05	; 5
    1e7e:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Transmit('\r');
    1e82:	8d e0       	ldi	r24, 0x0D	; 13
    1e84:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Send_String ("4. 100%  (Maximum Power)");
    1e88:	86 e5       	ldi	r24, 0x56	; 86
    1e8a:	95 e0       	ldi	r25, 0x05	; 5
    1e8c:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Transmit('\r');
    1e90:	8d e0       	ldi	r24, 0x0D	; 13
    1e92:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		
			UART_Send_String("Your choice : ");
    1e96:	8d e3       	ldi	r24, 0x3D	; 61
    1e98:	93 e0       	ldi	r25, 0x03	; 3
    1e9a:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			uart_var = 0;
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
			{
				uart_var = UART_Receive();
    1e9e:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
    1ea2:	18 2f       	mov	r17, r24
				UART_Transmit(uart_var);
    1ea4:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				UART_Transmit('\r');
    1ea8:	8d e0       	ldi	r24, 0x0D	; 13
    1eaa:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				UART_Transmit('\r');
    1eae:	8d e0       	ldi	r24, 0x0D	; 13
    1eb0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Send_String ("4. 100%  (Maximum Power)");
			UART_Transmit('\r');
		
			UART_Send_String("Your choice : ");
			uart_var = 0;
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1eb4:	80 ed       	ldi	r24, 0xD0	; 208
    1eb6:	81 0f       	add	r24, r17
    1eb8:	8a 30       	cpi	r24, 0x0A	; 10
    1eba:	88 f7       	brcc	.-30     	; 0x1e9e <UART_Admin_Interfacing+0x1ba>
    1ebc:	1d c0       	rjmp	.+58     	; 0x1ef8 <UART_Admin_Interfacing+0x214>
				UART_Transmit('\r');
			}
		
			while (!((uart_var >= Ascii_0) && (uart_var <= Ascii_4)))
			{
				UART_Send_String ("Please Choose only from 0 to 4");
    1ebe:	8f e6       	ldi	r24, 0x6F	; 111
    1ec0:	95 e0       	ldi	r25, 0x05	; 5
    1ec2:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
				UART_Transmit('\r');
    1ec6:	8d e0       	ldi	r24, 0x0D	; 13
    1ec8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				UART_Transmit('\r');
    1ecc:	8d e0       	ldi	r24, 0x0D	; 13
    1ece:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				uart_var = 0;
				UART_Send_String("Your choice : ");
    1ed2:	8d e3       	ldi	r24, 0x3D	; 61
    1ed4:	93 e0       	ldi	r25, 0x03	; 3
    1ed6:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
				{
					uart_var = UART_Receive();
    1eda:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
    1ede:	18 2f       	mov	r17, r24
					UART_Transmit(uart_var);
    1ee0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Transmit('\r');
    1ee4:	8d e0       	ldi	r24, 0x0D	; 13
    1ee6:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Transmit('\r');
    1eea:	8d e0       	ldi	r24, 0x0D	; 13
    1eec:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				UART_Send_String ("Please Choose only from 0 to 4");
				UART_Transmit('\r');
				UART_Transmit('\r');
				uart_var = 0;
				UART_Send_String("Your choice : ");
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1ef0:	80 ed       	ldi	r24, 0xD0	; 208
    1ef2:	81 0f       	add	r24, r17
    1ef4:	8a 30       	cpi	r24, 0x0A	; 10
    1ef6:	88 f7       	brcc	.-30     	; 0x1eda <UART_Admin_Interfacing+0x1f6>
				UART_Transmit(uart_var);
				UART_Transmit('\r');
				UART_Transmit('\r');
			}
		
			while (!((uart_var >= Ascii_0) && (uart_var <= Ascii_4)))
    1ef8:	80 ed       	ldi	r24, 0xD0	; 208
    1efa:	81 0f       	add	r24, r17
    1efc:	85 30       	cpi	r24, 0x05	; 5
    1efe:	f8 f6       	brcc	.-66     	; 0x1ebe <UART_Admin_Interfacing+0x1da>
				}
			}
		
			brightness_level = uart_var;
			uart_var = 0;
			DIMMER_CONTROL(brightness_level); 
    1f00:	81 2f       	mov	r24, r17
    1f02:	0e 94 37 0b 	call	0x166e	; 0x166e <DIMMER_CONTROL>
    1f06:	1e cf       	rjmp	.-452    	; 0x1d44 <UART_Admin_Interfacing+0x60>
					
		}	
		else if(option == '3')
    1f08:	13 33       	cpi	r17, 0x33	; 51
    1f0a:	59 f5       	brne	.+86     	; 0x1f62 <UART_Admin_Interfacing+0x27e>
		{
			openDoor();
    1f0c:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <openDoor>
			UART_Send_String("\r");
    1f10:	8e e8       	ldi	r24, 0x8E	; 142
    1f12:	95 e0       	ldi	r25, 0x05	; 5
    1f14:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Transmit('\r');
    1f18:	8d e0       	ldi	r24, 0x0D	; 13
    1f1a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Send_String("The door is opened");
    1f1e:	80 e9       	ldi	r24, 0x90	; 144
    1f20:	95 e0       	ldi	r25, 0x05	; 5
    1f22:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Send_String("\r");
    1f26:	8e e8       	ldi	r24, 0x8E	; 142
    1f28:	95 e0       	ldi	r25, 0x05	; 5
    1f2a:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Transmit('\r');
    1f2e:	8d e0       	ldi	r24, 0x0D	; 13
    1f30:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		
			LCD_Write_String("  The door is");
    1f34:	8a ea       	ldi	r24, 0xAA	; 170
    1f36:	92 e0       	ldi	r25, 0x02	; 2
    1f38:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    1f3c:	80 ec       	ldi	r24, 0xC0	; 192
    1f3e:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			LCD_Write_String("     Opened");
    1f42:	83 ea       	ldi	r24, 0xA3	; 163
    1f44:	95 e0       	ldi	r25, 0x05	; 5
    1f46:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
    1f4a:	ff ef       	ldi	r31, 0xFF	; 255
    1f4c:	29 e6       	ldi	r18, 0x69	; 105
    1f4e:	88 e1       	ldi	r24, 0x18	; 24
    1f50:	f1 50       	subi	r31, 0x01	; 1
    1f52:	20 40       	sbci	r18, 0x00	; 0
    1f54:	80 40       	sbci	r24, 0x00	; 0
    1f56:	e1 f7       	brne	.-8      	; 0x1f50 <UART_Admin_Interfacing+0x26c>
    1f58:	00 c0       	rjmp	.+0      	; 0x1f5a <UART_Admin_Interfacing+0x276>
    1f5a:	00 00       	nop
			_delay_ms(500);
			LCD_Clear_Screen();
    1f5c:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
    1f60:	f1 ce       	rjmp	.-542    	; 0x1d44 <UART_Admin_Interfacing+0x60>
		}
		else if(option == '4')
    1f62:	14 33       	cpi	r17, 0x34	; 52
    1f64:	59 f5       	brne	.+86     	; 0x1fbc <UART_Admin_Interfacing+0x2d8>
		{
			closeDoor();
    1f66:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <closeDoor>
			UART_Send_String("\r");
    1f6a:	8e e8       	ldi	r24, 0x8E	; 142
    1f6c:	95 e0       	ldi	r25, 0x05	; 5
    1f6e:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Transmit('\r');
    1f72:	8d e0       	ldi	r24, 0x0D	; 13
    1f74:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Send_String("The door is closed");
    1f78:	8f ea       	ldi	r24, 0xAF	; 175
    1f7a:	95 e0       	ldi	r25, 0x05	; 5
    1f7c:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Send_String("\r");
    1f80:	8e e8       	ldi	r24, 0x8E	; 142
    1f82:	95 e0       	ldi	r25, 0x05	; 5
    1f84:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Transmit('\r');
    1f88:	8d e0       	ldi	r24, 0x0D	; 13
    1f8a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		
			LCD_Write_String("  The door is");
    1f8e:	8a ea       	ldi	r24, 0xAA	; 170
    1f90:	92 e0       	ldi	r25, 0x02	; 2
    1f92:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    1f96:	80 ec       	ldi	r24, 0xC0	; 192
    1f98:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			LCD_Write_String("    Closed");
    1f9c:	88 eb       	ldi	r24, 0xB8	; 184
    1f9e:	92 e0       	ldi	r25, 0x02	; 2
    1fa0:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
    1fa4:	9f ef       	ldi	r25, 0xFF	; 255
    1fa6:	e9 e6       	ldi	r30, 0x69	; 105
    1fa8:	f8 e1       	ldi	r31, 0x18	; 24
    1faa:	91 50       	subi	r25, 0x01	; 1
    1fac:	e0 40       	sbci	r30, 0x00	; 0
    1fae:	f0 40       	sbci	r31, 0x00	; 0
    1fb0:	e1 f7       	brne	.-8      	; 0x1faa <UART_Admin_Interfacing+0x2c6>
    1fb2:	00 c0       	rjmp	.+0      	; 0x1fb4 <UART_Admin_Interfacing+0x2d0>
    1fb4:	00 00       	nop
			_delay_ms(500);
			LCD_Clear_Screen();
    1fb6:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
    1fba:	c4 ce       	rjmp	.-632    	; 0x1d44 <UART_Admin_Interfacing+0x60>
		}
	
		else if(option == '5')	// Add Admin to the system
    1fbc:	15 33       	cpi	r17, 0x35	; 53
    1fbe:	09 f0       	breq	.+2      	; 0x1fc2 <UART_Admin_Interfacing+0x2de>
    1fc0:	cf c0       	rjmp	.+414    	; 0x2160 <UART_Admin_Interfacing+0x47c>
		{
				EEPROM_readByte(Counters_Block,Admins_number_BIT,&max_number_var);
    1fc2:	ae 01       	movw	r20, r28
    1fc4:	45 5e       	subi	r20, 0xE5	; 229
    1fc6:	5f 4f       	sbci	r21, 0xFF	; 255
    1fc8:	61 e0       	ldi	r22, 0x01	; 1
    1fca:	8e ea       	ldi	r24, 0xAE	; 174
    1fcc:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
    1fd0:	8f e3       	ldi	r24, 0x3F	; 63
    1fd2:	9c e9       	ldi	r25, 0x9C	; 156
    1fd4:	01 97       	sbiw	r24, 0x01	; 1
    1fd6:	f1 f7       	brne	.-4      	; 0x1fd4 <UART_Admin_Interfacing+0x2f0>
    1fd8:	00 c0       	rjmp	.+0      	; 0x1fda <UART_Admin_Interfacing+0x2f6>
    1fda:	00 00       	nop
				_delay_ms(10);
				
				if(max_number_var < ADMINS_MAX_NO)
    1fdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fde:	80 34       	cpi	r24, 0x40	; 64
    1fe0:	08 f0       	brcs	.+2      	; 0x1fe4 <UART_Admin_Interfacing+0x300>
    1fe2:	a3 c0       	rjmp	.+326    	; 0x212a <UART_Admin_Interfacing+0x446>
				{
					/*-----------------	Writing the username -----------------*/
					UART_Transmit('\r');
    1fe4:	8d e0       	ldi	r24, 0x0D	; 13
    1fe6:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Transmit('\r');
    1fea:	8d e0       	ldi	r24, 0x0D	; 13
    1fec:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Send_String("Enter Username : ");
    1ff0:	87 ea       	ldi	r24, 0xA7	; 167
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>

					while(looping_counter < LOGIN_SIZE)
    1ff8:	93 e0       	ldi	r25, 0x03	; 3
    1ffa:	97 15       	cp	r25, r7
    1ffc:	90 f0       	brcs	.+36     	; 0x2022 <UART_Admin_Interfacing+0x33e>
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
						{
							uart_var = UART_Receive();
    1ffe:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
    2002:	18 2f       	mov	r17, r24
					UART_Send_String("Enter Username : ");

					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    2004:	80 ed       	ldi	r24, 0xD0	; 208
    2006:	81 0f       	add	r24, r17
    2008:	8a 30       	cpi	r24, 0x0A	; 10
    200a:	c8 f7       	brcc	.-14     	; 0x1ffe <UART_Admin_Interfacing+0x31a>
						{
							uart_var = UART_Receive();
						}
						
						UART_Transmit(uart_var);
    200c:	81 2f       	mov	r24, r17
    200e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
						username_arr[looping_counter] = uart_var;
    2012:	f6 01       	movw	r30, r12
    2014:	e7 0d       	add	r30, r7
    2016:	f1 1d       	adc	r31, r1
    2018:	10 83       	st	Z, r17
						looping_counter++;
    201a:	73 94       	inc	r7
					/*-----------------	Writing the username -----------------*/
					UART_Transmit('\r');
					UART_Transmit('\r');
					UART_Send_String("Enter Username : ");

					while(looping_counter < LOGIN_SIZE)
    201c:	e4 e0       	ldi	r30, 0x04	; 4
    201e:	7e 12       	cpse	r7, r30
    2020:	ee cf       	rjmp	.-36     	; 0x1ffe <UART_Admin_Interfacing+0x31a>
						UART_Transmit(uart_var);
						username_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
					UART_Transmit('\r');
    2022:	8d e0       	ldi	r24, 0x0D	; 13
    2024:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					
					/*-----------------	Writing the password -----------------*/
					UART_Send_String("Enter Password : ");
    2028:	89 eb       	ldi	r24, 0xB9	; 185
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
    2030:	7e 01       	movw	r14, r28
    2032:	f5 e0       	ldi	r31, 0x05	; 5
    2034:	ef 0e       	add	r14, r31
    2036:	f1 1c       	adc	r15, r1
					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
						{
							uart_var = UART_Receive();
    2038:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
    203c:	18 2f       	mov	r17, r24
					UART_Send_String("Enter Password : ");

					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    203e:	80 ed       	ldi	r24, 0xD0	; 208
    2040:	81 0f       	add	r24, r17
    2042:	8a 30       	cpi	r24, 0x0A	; 10
    2044:	c8 f7       	brcc	.-14     	; 0x2038 <UART_Admin_Interfacing+0x354>
						{
							uart_var = UART_Receive();
						}
						
						UART_Transmit(uart_var);
    2046:	81 2f       	mov	r24, r17
    2048:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
						password_arr[looping_counter] = uart_var;
    204c:	f7 01       	movw	r30, r14
    204e:	11 93       	st	Z+, r17
    2050:	7f 01       	movw	r14, r30
					UART_Transmit('\r');
					
					/*-----------------	Writing the password -----------------*/
					UART_Send_String("Enter Password : ");

					while(looping_counter < LOGIN_SIZE)
    2052:	ea 15       	cp	r30, r10
    2054:	fb 05       	cpc	r31, r11
    2056:	81 f7       	brne	.-32     	; 0x2038 <UART_Admin_Interfacing+0x354>
						UART_Transmit(uart_var);
						password_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
					UART_Transmit('\r');
    2058:	8d e0       	ldi	r24, 0x0D	; 13
    205a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					
					EEPROM_readByte(Counters_Block,Admins_number_BIT,&admin_counter);
    205e:	ae 01       	movw	r20, r28
    2060:	47 5e       	subi	r20, 0xE7	; 231
    2062:	5f 4f       	sbci	r21, 0xFF	; 255
    2064:	61 e0       	ldi	r22, 0x01	; 1
    2066:	8e ea       	ldi	r24, 0xAE	; 174
    2068:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
    206c:	8f e3       	ldi	r24, 0x3F	; 63
    206e:	9c e9       	ldi	r25, 0x9C	; 156
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	f1 f7       	brne	.-4      	; 0x2070 <UART_Admin_Interfacing+0x38c>
    2074:	00 c0       	rjmp	.+0      	; 0x2076 <UART_Admin_Interfacing+0x392>
    2076:	00 00       	nop
					
						EEPROM_writeByte(Admin_Password_Block,i,password_arr[looping_counter]);
						_delay_ms(1);
					}*/
				
					EEPROM_writeDataStream(Admin_Username_Block,LOGIN_SIZE*admin_counter,username_arr,LOGIN_SIZE);
    2078:	69 8d       	ldd	r22, Y+25	; 0x19
    207a:	66 0f       	add	r22, r22
    207c:	66 0f       	add	r22, r22
    207e:	24 e0       	ldi	r18, 0x04	; 4
    2080:	46 2d       	mov	r20, r6
    2082:	55 2d       	mov	r21, r5
    2084:	82 ea       	ldi	r24, 0xA2	; 162
    2086:	0e 94 a1 04 	call	0x942	; 0x942 <EEPROM_writeDataStream>
    208a:	9f ef       	ldi	r25, 0xFF	; 255
    208c:	e3 ec       	ldi	r30, 0xC3	; 195
    208e:	f9 e0       	ldi	r31, 0x09	; 9
    2090:	91 50       	subi	r25, 0x01	; 1
    2092:	e0 40       	sbci	r30, 0x00	; 0
    2094:	f0 40       	sbci	r31, 0x00	; 0
    2096:	e1 f7       	brne	.-8      	; 0x2090 <UART_Admin_Interfacing+0x3ac>
    2098:	00 c0       	rjmp	.+0      	; 0x209a <UART_Admin_Interfacing+0x3b6>
    209a:	00 00       	nop
					_delay_ms(200);
					EEPROM_writeDataStream(Admin_Password_Block,LOGIN_SIZE*admin_counter,password_arr,LOGIN_SIZE);
    209c:	69 8d       	ldd	r22, Y+25	; 0x19
    209e:	66 0f       	add	r22, r22
    20a0:	66 0f       	add	r22, r22
    20a2:	24 e0       	ldi	r18, 0x04	; 4
    20a4:	4e 8d       	ldd	r20, Y+30	; 0x1e
    20a6:	5f 8d       	ldd	r21, Y+31	; 0x1f
    20a8:	84 ea       	ldi	r24, 0xA4	; 164
    20aa:	0e 94 a1 04 	call	0x942	; 0x942 <EEPROM_writeDataStream>
    20ae:	2f ef       	ldi	r18, 0xFF	; 255
    20b0:	83 ec       	ldi	r24, 0xC3	; 195
    20b2:	99 e0       	ldi	r25, 0x09	; 9
    20b4:	21 50       	subi	r18, 0x01	; 1
    20b6:	80 40       	sbci	r24, 0x00	; 0
    20b8:	90 40       	sbci	r25, 0x00	; 0
    20ba:	e1 f7       	brne	.-8      	; 0x20b4 <UART_Admin_Interfacing+0x3d0>
    20bc:	00 c0       	rjmp	.+0      	; 0x20be <UART_Admin_Interfacing+0x3da>
    20be:	00 00       	nop
					_delay_ms(200);
					admin_counter++;
    20c0:	49 8d       	ldd	r20, Y+25	; 0x19
    20c2:	4f 5f       	subi	r20, 0xFF	; 255
    20c4:	49 8f       	std	Y+25, r20	; 0x19
					EEPROM_writeByte(Counters_Block,Admins_number_BIT,admin_counter);
    20c6:	61 e0       	ldi	r22, 0x01	; 1
    20c8:	8e ea       	ldi	r24, 0xAE	; 174
    20ca:	0e 94 63 04 	call	0x8c6	; 0x8c6 <EEPROM_writeByte>
    20ce:	ef ef       	ldi	r30, 0xFF	; 255
    20d0:	f3 ec       	ldi	r31, 0xC3	; 195
    20d2:	29 e0       	ldi	r18, 0x09	; 9
    20d4:	e1 50       	subi	r30, 0x01	; 1
    20d6:	f0 40       	sbci	r31, 0x00	; 0
    20d8:	20 40       	sbci	r18, 0x00	; 0
    20da:	e1 f7       	brne	.-8      	; 0x20d4 <UART_Admin_Interfacing+0x3f0>
    20dc:	00 c0       	rjmp	.+0      	; 0x20de <UART_Admin_Interfacing+0x3fa>
    20de:	00 00       	nop
					_delay_ms(200);		
				
					UART_Send_String("The admin is added successfully");
    20e0:	82 ec       	ldi	r24, 0xC2	; 194
    20e2:	95 e0       	ldi	r25, 0x05	; 5
    20e4:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
					UART_Transmit('\r');
    20e8:	8d e0       	ldi	r24, 0x0D	; 13
    20ea:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Transmit('\r');
    20ee:	8d e0       	ldi	r24, 0x0D	; 13
    20f0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					
					
					LCD_Set_Cursor(0,1);
    20f4:	61 e0       	ldi	r22, 0x01	; 1
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	0e 94 30 07 	call	0xe60	; 0xe60 <LCD_Set_Cursor>
					LCD_Write_String("Admin is added");
    20fc:	82 ee       	ldi	r24, 0xE2	; 226
    20fe:	95 e0       	ldi	r25, 0x05	; 5
    2100:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
					LCD_Set_Cursor(1,2);
    2104:	62 e0       	ldi	r22, 0x02	; 2
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	0e 94 30 07 	call	0xe60	; 0xe60 <LCD_Set_Cursor>
					LCD_Write_String("successfully");
    210c:	85 ed       	ldi	r24, 0xD5	; 213
    210e:	95 e0       	ldi	r25, 0x05	; 5
    2110:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
    2114:	8f ef       	ldi	r24, 0xFF	; 255
    2116:	99 e6       	ldi	r25, 0x69	; 105
    2118:	e8 e1       	ldi	r30, 0x18	; 24
    211a:	81 50       	subi	r24, 0x01	; 1
    211c:	90 40       	sbci	r25, 0x00	; 0
    211e:	e0 40       	sbci	r30, 0x00	; 0
    2120:	e1 f7       	brne	.-8      	; 0x211a <UART_Admin_Interfacing+0x436>
    2122:	00 c0       	rjmp	.+0      	; 0x2124 <UART_Admin_Interfacing+0x440>
    2124:	00 00       	nop
						
						UART_Transmit(uart_var);
						password_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
    2126:	71 2c       	mov	r7, r1
    2128:	0d ce       	rjmp	.-998    	; 0x1d44 <UART_Admin_Interfacing+0x60>
					_delay_ms(500);
					
				}
				else
				{
					UART_Send_String("Sorry, the maximum number for users is 64 users");
    212a:	81 ef       	ldi	r24, 0xF1	; 241
    212c:	95 e0       	ldi	r25, 0x05	; 5
    212e:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
					UART_Transmit('\r');
    2132:	8d e0       	ldi	r24, 0x0D	; 13
    2134:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Send_String("The system can't add more");
    2138:	81 e2       	ldi	r24, 0x21	; 33
    213a:	96 e0       	ldi	r25, 0x06	; 6
    213c:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
					UART_Transmit('\r');
    2140:	8d e0       	ldi	r24, 0x0D	; 13
    2142:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Transmit('\r');
    2146:	8d e0       	ldi	r24, 0x0D	; 13
    2148:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
    214c:	ff ef       	ldi	r31, 0xFF	; 255
    214e:	29 e6       	ldi	r18, 0x69	; 105
    2150:	88 e1       	ldi	r24, 0x18	; 24
    2152:	f1 50       	subi	r31, 0x01	; 1
    2154:	20 40       	sbci	r18, 0x00	; 0
    2156:	80 40       	sbci	r24, 0x00	; 0
    2158:	e1 f7       	brne	.-8      	; 0x2152 <UART_Admin_Interfacing+0x46e>
    215a:	00 c0       	rjmp	.+0      	; 0x215c <UART_Admin_Interfacing+0x478>
    215c:	00 00       	nop
    215e:	f2 cd       	rjmp	.-1052   	; 0x1d44 <UART_Admin_Interfacing+0x60>
					_delay_ms(500);	
				}
		}
	
		else if(option == '6')	// Add a user to the system
    2160:	16 33       	cpi	r17, 0x36	; 54
    2162:	09 f0       	breq	.+2      	; 0x2166 <UART_Admin_Interfacing+0x482>
    2164:	d1 c1       	rjmp	.+930    	; 0x2508 <UART_Admin_Interfacing+0x824>
		{
			UART_Transmit('\r');
    2166:	8d e0       	ldi	r24, 0x0D	; 13
    2168:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Transmit('\r');
    216c:	8d e0       	ldi	r24, 0x0D	; 13
    216e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Send_String("1. Remote User (UART)");
    2172:	8b e3       	ldi	r24, 0x3B	; 59
    2174:	96 e0       	ldi	r25, 0x06	; 6
    2176:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Transmit('\r');
    217a:	8d e0       	ldi	r24, 0x0D	; 13
    217c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Send_String("2. LCD & Keypad User ");
    2180:	81 e5       	ldi	r24, 0x51	; 81
    2182:	96 e0       	ldi	r25, 0x06	; 6
    2184:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Transmit('\r');
    2188:	8d e0       	ldi	r24, 0x0D	; 13
    218a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Transmit('\r');
    218e:	8d e0       	ldi	r24, 0x0D	; 13
    2190:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			
			UART_Send_String("Your choice : ");
    2194:	8d e3       	ldi	r24, 0x3D	; 61
    2196:	93 e0       	ldi	r25, 0x03	; 3
    2198:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			
			uart_var = 0;
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
			{
				uart_var = UART_Receive();
    219c:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
    21a0:	18 2f       	mov	r17, r24
				UART_Transmit(uart_var);
    21a2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Transmit('\r');
			
			UART_Send_String("Your choice : ");
			
			uart_var = 0;
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    21a6:	80 ed       	ldi	r24, 0xD0	; 208
    21a8:	81 0f       	add	r24, r17
    21aa:	8a 30       	cpi	r24, 0x0A	; 10
    21ac:	b8 f7       	brcc	.-18     	; 0x219c <UART_Admin_Interfacing+0x4b8>
			{
				uart_var = UART_Receive();
				UART_Transmit(uart_var);
			}
			
			while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_2)))
    21ae:	8f ec       	ldi	r24, 0xCF	; 207
    21b0:	81 0f       	add	r24, r17
    21b2:	82 30       	cpi	r24, 0x02	; 2
    21b4:	e0 f0       	brcs	.+56     	; 0x21ee <UART_Admin_Interfacing+0x50a>
			{
				UART_Send_String ("Please Choose only 1 or 2");
    21b6:	83 e2       	ldi	r24, 0x23	; 35
    21b8:	93 e0       	ldi	r25, 0x03	; 3
    21ba:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
				UART_Transmit('\r');
    21be:	8d e0       	ldi	r24, 0x0D	; 13
    21c0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				UART_Transmit('\r');
    21c4:	8d e0       	ldi	r24, 0x0D	; 13
    21c6:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				uart_var = 0;
				UART_Send_String("Your choice : ");
    21ca:	8d e3       	ldi	r24, 0x3D	; 61
    21cc:	93 e0       	ldi	r25, 0x03	; 3
    21ce:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
				{
					uart_var = UART_Receive();
    21d2:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
    21d6:	18 2f       	mov	r17, r24
				UART_Send_String ("Please Choose only 1 or 2");
				UART_Transmit('\r');
				UART_Transmit('\r');
				uart_var = 0;
				UART_Send_String("Your choice : ");
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    21d8:	80 ed       	ldi	r24, 0xD0	; 208
    21da:	81 0f       	add	r24, r17
    21dc:	8a 30       	cpi	r24, 0x0A	; 10
    21de:	c8 f7       	brcc	.-14     	; 0x21d2 <UART_Admin_Interfacing+0x4ee>
				{
					uart_var = UART_Receive();
				}
				UART_Transmit(uart_var);
    21e0:	81 2f       	mov	r24, r17
    21e2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			{
				uart_var = UART_Receive();
				UART_Transmit(uart_var);
			}
			
			while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_2)))
    21e6:	8f ec       	ldi	r24, 0xCF	; 207
    21e8:	81 0f       	add	r24, r17
    21ea:	82 30       	cpi	r24, 0x02	; 2
    21ec:	20 f7       	brcc	.-56     	; 0x21b6 <UART_Admin_Interfacing+0x4d2>
				UART_Transmit(uart_var);
			}
			user_type = uart_var;
			
			
			if(user_type == '1')	// uart_user
    21ee:	11 33       	cpi	r17, 0x31	; 49
    21f0:	09 f0       	breq	.+2      	; 0x21f4 <UART_Admin_Interfacing+0x510>
    21f2:	ce c0       	rjmp	.+412    	; 0x2390 <UART_Admin_Interfacing+0x6ac>
			{
				EEPROM_readByte(Counters_Block,Users_UART_number_BIT,&max_number_var);
    21f4:	ae 01       	movw	r20, r28
    21f6:	45 5e       	subi	r20, 0xE5	; 229
    21f8:	5f 4f       	sbci	r21, 0xFF	; 255
    21fa:	62 e0       	ldi	r22, 0x02	; 2
    21fc:	8e ea       	ldi	r24, 0xAE	; 174
    21fe:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
    2202:	ef e3       	ldi	r30, 0x3F	; 63
    2204:	fc e9       	ldi	r31, 0x9C	; 156
    2206:	31 97       	sbiw	r30, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <UART_Admin_Interfacing+0x522>
    220a:	00 c0       	rjmp	.+0      	; 0x220c <UART_Admin_Interfacing+0x528>
    220c:	00 00       	nop
				_delay_ms(10);
				
				if(max_number_var < USERS_MAX_NO)
    220e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2210:	80 34       	cpi	r24, 0x40	; 64
    2212:	08 f0       	brcs	.+2      	; 0x2216 <UART_Admin_Interfacing+0x532>
    2214:	a2 c0       	rjmp	.+324    	; 0x235a <UART_Admin_Interfacing+0x676>
				{
					/*-----------------	Writing the username -----------------*/
					UART_Transmit('\r');
    2216:	8d e0       	ldi	r24, 0x0D	; 13
    2218:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Transmit('\r');
    221c:	8d e0       	ldi	r24, 0x0D	; 13
    221e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Send_String("Enter Username : ");
    2222:	87 ea       	ldi	r24, 0xA7	; 167
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>

					while(looping_counter < LOGIN_SIZE)
    222a:	f3 e0       	ldi	r31, 0x03	; 3
    222c:	f7 15       	cp	r31, r7
    222e:	90 f0       	brcs	.+36     	; 0x2254 <UART_Admin_Interfacing+0x570>
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
						{
							uart_var = UART_Receive();
    2230:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
    2234:	18 2f       	mov	r17, r24
					UART_Send_String("Enter Username : ");

					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    2236:	80 ed       	ldi	r24, 0xD0	; 208
    2238:	81 0f       	add	r24, r17
    223a:	8a 30       	cpi	r24, 0x0A	; 10
    223c:	c8 f7       	brcc	.-14     	; 0x2230 <UART_Admin_Interfacing+0x54c>
						{
							uart_var = UART_Receive();
						}
						
						UART_Transmit(uart_var);
    223e:	81 2f       	mov	r24, r17
    2240:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
						username_arr[looping_counter] = uart_var;
    2244:	f6 01       	movw	r30, r12
    2246:	e7 0d       	add	r30, r7
    2248:	f1 1d       	adc	r31, r1
    224a:	10 83       	st	Z, r17
						looping_counter++;
    224c:	73 94       	inc	r7
					/*-----------------	Writing the username -----------------*/
					UART_Transmit('\r');
					UART_Transmit('\r');
					UART_Send_String("Enter Username : ");

					while(looping_counter < LOGIN_SIZE)
    224e:	24 e0       	ldi	r18, 0x04	; 4
    2250:	72 12       	cpse	r7, r18
    2252:	ee cf       	rjmp	.-36     	; 0x2230 <UART_Admin_Interfacing+0x54c>
						UART_Transmit(uart_var);
						username_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
					UART_Transmit('\r');
    2254:	8d e0       	ldi	r24, 0x0D	; 13
    2256:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					
					/*-----------------	Writing the password -----------------*/
					UART_Send_String("Enter Password : ");
    225a:	89 eb       	ldi	r24, 0xB9	; 185
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
    2262:	8e 01       	movw	r16, r28
    2264:	0b 5f       	subi	r16, 0xFB	; 251
    2266:	1f 4f       	sbci	r17, 0xFF	; 255
					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
						{
							uart_var = UART_Receive();
    2268:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
    226c:	f8 2e       	mov	r15, r24
					UART_Send_String("Enter Password : ");

					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    226e:	80 ed       	ldi	r24, 0xD0	; 208
    2270:	8f 0d       	add	r24, r15
    2272:	8a 30       	cpi	r24, 0x0A	; 10
    2274:	c8 f7       	brcc	.-14     	; 0x2268 <UART_Admin_Interfacing+0x584>
						{
							uart_var = UART_Receive();
						}
						
						UART_Transmit(uart_var);
    2276:	8f 2d       	mov	r24, r15
    2278:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
						password_arr[looping_counter] = uart_var;
    227c:	f8 01       	movw	r30, r16
    227e:	f1 92       	st	Z+, r15
    2280:	8f 01       	movw	r16, r30
					UART_Transmit('\r');
					
					/*-----------------	Writing the password -----------------*/
					UART_Send_String("Enter Password : ");

					while(looping_counter < LOGIN_SIZE)
    2282:	ea 15       	cp	r30, r10
    2284:	fb 05       	cpc	r31, r11
    2286:	81 f7       	brne	.-32     	; 0x2268 <UART_Admin_Interfacing+0x584>
						UART_Transmit(uart_var);
						password_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
					UART_Transmit('\r');
    2288:	8d e0       	ldi	r24, 0x0D	; 13
    228a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					
					EEPROM_readByte(Counters_Block,Users_UART_number_BIT,&user_counter);
    228e:	ae 01       	movw	r20, r28
    2290:	46 5e       	subi	r20, 0xE6	; 230
    2292:	5f 4f       	sbci	r21, 0xFF	; 255
    2294:	62 e0       	ldi	r22, 0x02	; 2
    2296:	8e ea       	ldi	r24, 0xAE	; 174
    2298:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
    229c:	8f e3       	ldi	r24, 0x3F	; 63
    229e:	9c e9       	ldi	r25, 0x9C	; 156
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	f1 f7       	brne	.-4      	; 0x22a0 <UART_Admin_Interfacing+0x5bc>
    22a4:	00 c0       	rjmp	.+0      	; 0x22a6 <UART_Admin_Interfacing+0x5c2>
    22a6:	00 00       	nop
					_delay_ms(10);
					}*/
					
					//84
				
					EEPROM_writeDataStream(UART_User_Username_Block,(LOGIN_SIZE*user_counter),username_arr,LOGIN_SIZE);
    22a8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    22aa:	66 0f       	add	r22, r22
    22ac:	66 0f       	add	r22, r22
    22ae:	24 e0       	ldi	r18, 0x04	; 4
    22b0:	46 2d       	mov	r20, r6
    22b2:	55 2d       	mov	r21, r5
    22b4:	86 ea       	ldi	r24, 0xA6	; 166
    22b6:	0e 94 a1 04 	call	0x942	; 0x942 <EEPROM_writeDataStream>
    22ba:	9f ef       	ldi	r25, 0xFF	; 255
    22bc:	e3 ec       	ldi	r30, 0xC3	; 195
    22be:	f9 e0       	ldi	r31, 0x09	; 9
    22c0:	91 50       	subi	r25, 0x01	; 1
    22c2:	e0 40       	sbci	r30, 0x00	; 0
    22c4:	f0 40       	sbci	r31, 0x00	; 0
    22c6:	e1 f7       	brne	.-8      	; 0x22c0 <UART_Admin_Interfacing+0x5dc>
    22c8:	00 c0       	rjmp	.+0      	; 0x22ca <UART_Admin_Interfacing+0x5e6>
    22ca:	00 00       	nop
					_delay_ms(200);
					EEPROM_writeDataStream(UART_User_Password_Block,(LOGIN_SIZE*user_counter),password_arr,LOGIN_SIZE);
    22cc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    22ce:	66 0f       	add	r22, r22
    22d0:	66 0f       	add	r22, r22
    22d2:	24 e0       	ldi	r18, 0x04	; 4
    22d4:	4e 8d       	ldd	r20, Y+30	; 0x1e
    22d6:	5f 8d       	ldd	r21, Y+31	; 0x1f
    22d8:	88 ea       	ldi	r24, 0xA8	; 168
    22da:	0e 94 a1 04 	call	0x942	; 0x942 <EEPROM_writeDataStream>
    22de:	2f ef       	ldi	r18, 0xFF	; 255
    22e0:	83 ec       	ldi	r24, 0xC3	; 195
    22e2:	99 e0       	ldi	r25, 0x09	; 9
    22e4:	21 50       	subi	r18, 0x01	; 1
    22e6:	80 40       	sbci	r24, 0x00	; 0
    22e8:	90 40       	sbci	r25, 0x00	; 0
    22ea:	e1 f7       	brne	.-8      	; 0x22e4 <UART_Admin_Interfacing+0x600>
    22ec:	00 c0       	rjmp	.+0      	; 0x22ee <UART_Admin_Interfacing+0x60a>
    22ee:	00 00       	nop
					_delay_ms(200);
					user_counter++;
    22f0:	4a 8d       	ldd	r20, Y+26	; 0x1a
    22f2:	4f 5f       	subi	r20, 0xFF	; 255
    22f4:	4a 8f       	std	Y+26, r20	; 0x1a
					EEPROM_writeByte(Counters_Block,Users_UART_number_BIT,user_counter);
    22f6:	62 e0       	ldi	r22, 0x02	; 2
    22f8:	8e ea       	ldi	r24, 0xAE	; 174
    22fa:	0e 94 63 04 	call	0x8c6	; 0x8c6 <EEPROM_writeByte>
    22fe:	ef ef       	ldi	r30, 0xFF	; 255
    2300:	f3 ec       	ldi	r31, 0xC3	; 195
    2302:	29 e0       	ldi	r18, 0x09	; 9
    2304:	e1 50       	subi	r30, 0x01	; 1
    2306:	f0 40       	sbci	r31, 0x00	; 0
    2308:	20 40       	sbci	r18, 0x00	; 0
    230a:	e1 f7       	brne	.-8      	; 0x2304 <UART_Admin_Interfacing+0x620>
    230c:	00 c0       	rjmp	.+0      	; 0x230e <UART_Admin_Interfacing+0x62a>
    230e:	00 00       	nop
					_delay_ms(200);		
				
					UART_Send_String("The user is added successfully");
    2310:	87 e6       	ldi	r24, 0x67	; 103
    2312:	96 e0       	ldi	r25, 0x06	; 6
    2314:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
					UART_Transmit('\r');
    2318:	8d e0       	ldi	r24, 0x0D	; 13
    231a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Transmit('\r');
    231e:	8d e0       	ldi	r24, 0x0D	; 13
    2320:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					
					LCD_Set_Cursor(0,1);
    2324:	61 e0       	ldi	r22, 0x01	; 1
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	0e 94 30 07 	call	0xe60	; 0xe60 <LCD_Set_Cursor>
					LCD_Write_String("User is added");
    232c:	86 e8       	ldi	r24, 0x86	; 134
    232e:	96 e0       	ldi	r25, 0x06	; 6
    2330:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
					LCD_Set_Cursor(1,2);
    2334:	62 e0       	ldi	r22, 0x02	; 2
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	0e 94 30 07 	call	0xe60	; 0xe60 <LCD_Set_Cursor>
					LCD_Write_String("successfully");
    233c:	85 ed       	ldi	r24, 0xD5	; 213
    233e:	95 e0       	ldi	r25, 0x05	; 5
    2340:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
    2344:	8f ef       	ldi	r24, 0xFF	; 255
    2346:	91 ee       	ldi	r25, 0xE1	; 225
    2348:	e4 e0       	ldi	r30, 0x04	; 4
    234a:	81 50       	subi	r24, 0x01	; 1
    234c:	90 40       	sbci	r25, 0x00	; 0
    234e:	e0 40       	sbci	r30, 0x00	; 0
    2350:	e1 f7       	brne	.-8      	; 0x234a <UART_Admin_Interfacing+0x666>
    2352:	00 c0       	rjmp	.+0      	; 0x2354 <UART_Admin_Interfacing+0x670>
    2354:	00 00       	nop
						
						UART_Transmit(uart_var);
						password_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
    2356:	71 2c       	mov	r7, r1
    2358:	f5 cc       	rjmp	.-1558   	; 0x1d44 <UART_Admin_Interfacing+0x60>
					
					_delay_ms(100);	
				}
				else
				{
					UART_Send_String("Sorry, the maximum number for users is 64 users");
    235a:	81 ef       	ldi	r24, 0xF1	; 241
    235c:	95 e0       	ldi	r25, 0x05	; 5
    235e:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
					UART_Transmit('\r');
    2362:	8d e0       	ldi	r24, 0x0D	; 13
    2364:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Send_String("The system can't add more");
    2368:	81 e2       	ldi	r24, 0x21	; 33
    236a:	96 e0       	ldi	r25, 0x06	; 6
    236c:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
					UART_Transmit('\r');
    2370:	8d e0       	ldi	r24, 0x0D	; 13
    2372:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Transmit('\r');
    2376:	8d e0       	ldi	r24, 0x0D	; 13
    2378:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
    237c:	ff ef       	ldi	r31, 0xFF	; 255
    237e:	29 e6       	ldi	r18, 0x69	; 105
    2380:	88 e1       	ldi	r24, 0x18	; 24
    2382:	f1 50       	subi	r31, 0x01	; 1
    2384:	20 40       	sbci	r18, 0x00	; 0
    2386:	80 40       	sbci	r24, 0x00	; 0
    2388:	e1 f7       	brne	.-8      	; 0x2382 <UART_Admin_Interfacing+0x69e>
    238a:	00 c0       	rjmp	.+0      	; 0x238c <UART_Admin_Interfacing+0x6a8>
    238c:	00 00       	nop
    238e:	da cc       	rjmp	.-1612   	; 0x1d44 <UART_Admin_Interfacing+0x60>
					_delay_ms(500);	
				}
			}
			else  // lcd_user
			{
				EEPROM_readByte(Counters_Block,Users_LCD_number_BIT,&max_number_var);
    2390:	ae 01       	movw	r20, r28
    2392:	45 5e       	subi	r20, 0xE5	; 229
    2394:	5f 4f       	sbci	r21, 0xFF	; 255
    2396:	63 e0       	ldi	r22, 0x03	; 3
    2398:	8e ea       	ldi	r24, 0xAE	; 174
    239a:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
    239e:	ef e3       	ldi	r30, 0x3F	; 63
    23a0:	fc e9       	ldi	r31, 0x9C	; 156
    23a2:	31 97       	sbiw	r30, 0x01	; 1
    23a4:	f1 f7       	brne	.-4      	; 0x23a2 <UART_Admin_Interfacing+0x6be>
    23a6:	00 c0       	rjmp	.+0      	; 0x23a8 <UART_Admin_Interfacing+0x6c4>
    23a8:	00 00       	nop
				_delay_ms(10);
				
				if(max_number_var < USERS_MAX_NO)
    23aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ac:	80 34       	cpi	r24, 0x40	; 64
    23ae:	08 f0       	brcs	.+2      	; 0x23b2 <UART_Admin_Interfacing+0x6ce>
    23b0:	90 c0       	rjmp	.+288    	; 0x24d2 <UART_Admin_Interfacing+0x7ee>
				{
					/*-----------------	Writing the username -----------------*/
					UART_Transmit('\r');
    23b2:	8d e0       	ldi	r24, 0x0D	; 13
    23b4:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Transmit('\r');
    23b8:	8d e0       	ldi	r24, 0x0D	; 13
    23ba:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Send_String("Enter Username : ");
    23be:	87 ea       	ldi	r24, 0xA7	; 167
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>

					while(looping_counter < LOGIN_SIZE)
    23c6:	f3 e0       	ldi	r31, 0x03	; 3
    23c8:	f7 15       	cp	r31, r7
    23ca:	90 f0       	brcs	.+36     	; 0x23f0 <UART_Admin_Interfacing+0x70c>
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
						{
							uart_var = UART_Receive();
    23cc:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
    23d0:	18 2f       	mov	r17, r24
					UART_Send_String("Enter Username : ");

					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    23d2:	80 ed       	ldi	r24, 0xD0	; 208
    23d4:	81 0f       	add	r24, r17
    23d6:	8a 30       	cpi	r24, 0x0A	; 10
    23d8:	c8 f7       	brcc	.-14     	; 0x23cc <UART_Admin_Interfacing+0x6e8>
						{
							uart_var = UART_Receive();
						}
						
						UART_Transmit(uart_var);
    23da:	81 2f       	mov	r24, r17
    23dc:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
						username_arr[looping_counter] = uart_var;
    23e0:	f6 01       	movw	r30, r12
    23e2:	e7 0d       	add	r30, r7
    23e4:	f1 1d       	adc	r31, r1
    23e6:	10 83       	st	Z, r17
						looping_counter++;
    23e8:	73 94       	inc	r7
					/*-----------------	Writing the username -----------------*/
					UART_Transmit('\r');
					UART_Transmit('\r');
					UART_Send_String("Enter Username : ");

					while(looping_counter < LOGIN_SIZE)
    23ea:	24 e0       	ldi	r18, 0x04	; 4
    23ec:	72 12       	cpse	r7, r18
    23ee:	ee cf       	rjmp	.-36     	; 0x23cc <UART_Admin_Interfacing+0x6e8>
						UART_Transmit(uart_var);
						username_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
					UART_Transmit('\r');
    23f0:	8d e0       	ldi	r24, 0x0D	; 13
    23f2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					
					/*-----------------	Writing the password -----------------*/
					UART_Send_String("Enter Password : ");
    23f6:	89 eb       	ldi	r24, 0xB9	; 185
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
    23fe:	7e 01       	movw	r14, r28
    2400:	85 e0       	ldi	r24, 0x05	; 5
    2402:	e8 0e       	add	r14, r24
    2404:	f1 1c       	adc	r15, r1
					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
						{
							uart_var = UART_Receive();
    2406:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
    240a:	18 2f       	mov	r17, r24
					UART_Send_String("Enter Password : ");

					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    240c:	80 ed       	ldi	r24, 0xD0	; 208
    240e:	81 0f       	add	r24, r17
    2410:	8a 30       	cpi	r24, 0x0A	; 10
    2412:	c8 f7       	brcc	.-14     	; 0x2406 <UART_Admin_Interfacing+0x722>
						{
							uart_var = UART_Receive();
						}
						
						UART_Transmit(uart_var);
    2414:	81 2f       	mov	r24, r17
    2416:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
						password_arr[looping_counter] = uart_var;
    241a:	f7 01       	movw	r30, r14
    241c:	11 93       	st	Z+, r17
    241e:	7f 01       	movw	r14, r30
					UART_Transmit('\r');
					
					/*-----------------	Writing the password -----------------*/
					UART_Send_String("Enter Password : ");

					while(looping_counter < LOGIN_SIZE)
    2420:	ae 16       	cp	r10, r30
    2422:	bf 06       	cpc	r11, r31
    2424:	81 f7       	brne	.-32     	; 0x2406 <UART_Admin_Interfacing+0x722>
						UART_Transmit(uart_var);
						password_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
					UART_Transmit('\r');
    2426:	8d e0       	ldi	r24, 0x0D	; 13
    2428:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					
					EEPROM_readByte(Counters_Block,Users_LCD_number_BIT,&user_counter);
    242c:	ae 01       	movw	r20, r28
    242e:	46 5e       	subi	r20, 0xE6	; 230
    2430:	5f 4f       	sbci	r21, 0xFF	; 255
    2432:	63 e0       	ldi	r22, 0x03	; 3
    2434:	8e ea       	ldi	r24, 0xAE	; 174
    2436:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
    243a:	8f e3       	ldi	r24, 0x3F	; 63
    243c:	9c e9       	ldi	r25, 0x9C	; 156
    243e:	01 97       	sbiw	r24, 0x01	; 1
    2440:	f1 f7       	brne	.-4      	; 0x243e <UART_Admin_Interfacing+0x75a>
    2442:	00 c0       	rjmp	.+0      	; 0x2444 <UART_Admin_Interfacing+0x760>
    2444:	00 00       	nop
					
					EEPROM_writeByte(BLOCK_2,i,password_arr[looping_counter]);
					_delay_ms(10);
					}*/
				
					EEPROM_writeDataStream(LCD_User_Username_Block,(LOGIN_SIZE*user_counter),username_arr,LOGIN_SIZE);
    2446:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2448:	66 0f       	add	r22, r22
    244a:	66 0f       	add	r22, r22
    244c:	24 e0       	ldi	r18, 0x04	; 4
    244e:	46 2d       	mov	r20, r6
    2450:	55 2d       	mov	r21, r5
    2452:	8a ea       	ldi	r24, 0xAA	; 170
    2454:	0e 94 a1 04 	call	0x942	; 0x942 <EEPROM_writeDataStream>
    2458:	9f ef       	ldi	r25, 0xFF	; 255
    245a:	e3 ec       	ldi	r30, 0xC3	; 195
    245c:	f9 e0       	ldi	r31, 0x09	; 9
    245e:	91 50       	subi	r25, 0x01	; 1
    2460:	e0 40       	sbci	r30, 0x00	; 0
    2462:	f0 40       	sbci	r31, 0x00	; 0
    2464:	e1 f7       	brne	.-8      	; 0x245e <UART_Admin_Interfacing+0x77a>
    2466:	00 c0       	rjmp	.+0      	; 0x2468 <UART_Admin_Interfacing+0x784>
    2468:	00 00       	nop
					_delay_ms(200);
					EEPROM_writeDataStream(LCD_User_Password_Block,(LOGIN_SIZE*user_counter),password_arr,LOGIN_SIZE);
    246a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    246c:	66 0f       	add	r22, r22
    246e:	66 0f       	add	r22, r22
    2470:	24 e0       	ldi	r18, 0x04	; 4
    2472:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2474:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2476:	8c ea       	ldi	r24, 0xAC	; 172
    2478:	0e 94 a1 04 	call	0x942	; 0x942 <EEPROM_writeDataStream>
    247c:	2f ef       	ldi	r18, 0xFF	; 255
    247e:	83 ec       	ldi	r24, 0xC3	; 195
    2480:	99 e0       	ldi	r25, 0x09	; 9
    2482:	21 50       	subi	r18, 0x01	; 1
    2484:	80 40       	sbci	r24, 0x00	; 0
    2486:	90 40       	sbci	r25, 0x00	; 0
    2488:	e1 f7       	brne	.-8      	; 0x2482 <UART_Admin_Interfacing+0x79e>
    248a:	00 c0       	rjmp	.+0      	; 0x248c <UART_Admin_Interfacing+0x7a8>
    248c:	00 00       	nop
					_delay_ms(200);
					user_counter++;
    248e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2490:	4f 5f       	subi	r20, 0xFF	; 255
    2492:	4a 8f       	std	Y+26, r20	; 0x1a
					EEPROM_writeByte(Counters_Block,Users_LCD_number_BIT,user_counter);
    2494:	63 e0       	ldi	r22, 0x03	; 3
    2496:	8e ea       	ldi	r24, 0xAE	; 174
    2498:	0e 94 63 04 	call	0x8c6	; 0x8c6 <EEPROM_writeByte>
    249c:	ef e3       	ldi	r30, 0x3F	; 63
    249e:	fc e9       	ldi	r31, 0x9C	; 156
    24a0:	31 97       	sbiw	r30, 0x01	; 1
    24a2:	f1 f7       	brne	.-4      	; 0x24a0 <UART_Admin_Interfacing+0x7bc>
    24a4:	00 c0       	rjmp	.+0      	; 0x24a6 <UART_Admin_Interfacing+0x7c2>
    24a6:	00 00       	nop
					_delay_ms(10);		
				
					UART_Send_String("The user is added successfully");
    24a8:	87 e6       	ldi	r24, 0x67	; 103
    24aa:	96 e0       	ldi	r25, 0x06	; 6
    24ac:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
					UART_Transmit('\r');
    24b0:	8d e0       	ldi	r24, 0x0D	; 13
    24b2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Transmit('\r');
    24b6:	8d e0       	ldi	r24, 0x0D	; 13
    24b8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
    24bc:	ff ef       	ldi	r31, 0xFF	; 255
    24be:	29 e6       	ldi	r18, 0x69	; 105
    24c0:	88 e1       	ldi	r24, 0x18	; 24
    24c2:	f1 50       	subi	r31, 0x01	; 1
    24c4:	20 40       	sbci	r18, 0x00	; 0
    24c6:	80 40       	sbci	r24, 0x00	; 0
    24c8:	e1 f7       	brne	.-8      	; 0x24c2 <UART_Admin_Interfacing+0x7de>
    24ca:	00 c0       	rjmp	.+0      	; 0x24cc <UART_Admin_Interfacing+0x7e8>
    24cc:	00 00       	nop
						
						UART_Transmit(uart_var);
						password_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
    24ce:	71 2c       	mov	r7, r1
    24d0:	39 cc       	rjmp	.-1934   	; 0x1d44 <UART_Admin_Interfacing+0x60>
					_delay_ms(500);
					
				}
				else
				{
					UART_Send_String("Sorry, the maximum number for users is 64 users");
    24d2:	81 ef       	ldi	r24, 0xF1	; 241
    24d4:	95 e0       	ldi	r25, 0x05	; 5
    24d6:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
					UART_Transmit('\r');
    24da:	8d e0       	ldi	r24, 0x0D	; 13
    24dc:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Send_String("The system can't add more");
    24e0:	81 e2       	ldi	r24, 0x21	; 33
    24e2:	96 e0       	ldi	r25, 0x06	; 6
    24e4:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
					UART_Transmit('\r');
    24e8:	8d e0       	ldi	r24, 0x0D	; 13
    24ea:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Transmit('\r');
    24ee:	8d e0       	ldi	r24, 0x0D	; 13
    24f0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
    24f4:	9f ef       	ldi	r25, 0xFF	; 255
    24f6:	e9 e6       	ldi	r30, 0x69	; 105
    24f8:	f8 e1       	ldi	r31, 0x18	; 24
    24fa:	91 50       	subi	r25, 0x01	; 1
    24fc:	e0 40       	sbci	r30, 0x00	; 0
    24fe:	f0 40       	sbci	r31, 0x00	; 0
    2500:	e1 f7       	brne	.-8      	; 0x24fa <UART_Admin_Interfacing+0x816>
    2502:	00 c0       	rjmp	.+0      	; 0x2504 <UART_Admin_Interfacing+0x820>
    2504:	00 00       	nop
    2506:	1e cc       	rjmp	.-1988   	; 0x1d44 <UART_Admin_Interfacing+0x60>
					_delay_ms(500);	
				}
			}
		}
		
		else if(option == '7')	// Delete User from the system
    2508:	17 33       	cpi	r17, 0x37	; 55
    250a:	09 f0       	breq	.+2      	; 0x250e <UART_Admin_Interfacing+0x82a>
    250c:	b9 c2       	rjmp	.+1394   	; 0x2a80 <UART_Admin_Interfacing+0xd9c>
		{
			
			UART_Transmit('\r');
    250e:	8d e0       	ldi	r24, 0x0D	; 13
    2510:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Send_String("1. Delete a remote (UART) User  ");
    2514:	84 e9       	ldi	r24, 0x94	; 148
    2516:	96 e0       	ldi	r25, 0x06	; 6
    2518:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Transmit('\r');
    251c:	8d e0       	ldi	r24, 0x0D	; 13
    251e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Send_String("2. Delete an LCD & Keypad User  ");
    2522:	85 eb       	ldi	r24, 0xB5	; 181
    2524:	96 e0       	ldi	r25, 0x06	; 6
    2526:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Transmit('\r');
    252a:	8d e0       	ldi	r24, 0x0D	; 13
    252c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Transmit('\r');
    2530:	8d e0       	ldi	r24, 0x0D	; 13
    2532:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			
			UART_Send_String("Your choice : ");
    2536:	8d e3       	ldi	r24, 0x3D	; 61
    2538:	93 e0       	ldi	r25, 0x03	; 3
    253a:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
	
			uart_var = 0;
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
			{
				uart_var = UART_Receive();
    253e:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
    2542:	18 2f       	mov	r17, r24
			UART_Transmit('\r');
			
			UART_Send_String("Your choice : ");
	
			uart_var = 0;
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    2544:	80 ed       	ldi	r24, 0xD0	; 208
    2546:	81 0f       	add	r24, r17
    2548:	8a 30       	cpi	r24, 0x0A	; 10
    254a:	c8 f7       	brcc	.-14     	; 0x253e <UART_Admin_Interfacing+0x85a>
			{
				uart_var = UART_Receive();
			}
			UART_Transmit(uart_var);
    254c:	81 2f       	mov	r24, r17
    254e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			
			while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_2)))
    2552:	8f ec       	ldi	r24, 0xCF	; 207
    2554:	81 0f       	add	r24, r17
    2556:	82 30       	cpi	r24, 0x02	; 2
    2558:	e0 f0       	brcs	.+56     	; 0x2592 <UART_Admin_Interfacing+0x8ae>
			{
				UART_Send_String ("Please Choose only 1 or 2");
    255a:	83 e2       	ldi	r24, 0x23	; 35
    255c:	93 e0       	ldi	r25, 0x03	; 3
    255e:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
				UART_Transmit('\r');
    2562:	8d e0       	ldi	r24, 0x0D	; 13
    2564:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				UART_Transmit('\r');
    2568:	8d e0       	ldi	r24, 0x0D	; 13
    256a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				uart_var = 0;
				UART_Send_String("Your choice : ");
    256e:	8d e3       	ldi	r24, 0x3D	; 61
    2570:	93 e0       	ldi	r25, 0x03	; 3
    2572:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
				{
					uart_var = UART_Receive();
    2576:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
    257a:	18 2f       	mov	r17, r24
				UART_Send_String ("Please Choose only 1 or 2");
				UART_Transmit('\r');
				UART_Transmit('\r');
				uart_var = 0;
				UART_Send_String("Your choice : ");
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    257c:	80 ed       	ldi	r24, 0xD0	; 208
    257e:	81 0f       	add	r24, r17
    2580:	8a 30       	cpi	r24, 0x0A	; 10
    2582:	c8 f7       	brcc	.-14     	; 0x2576 <UART_Admin_Interfacing+0x892>
				{
					uart_var = UART_Receive();
				}
				UART_Transmit(uart_var);
    2584:	81 2f       	mov	r24, r17
    2586:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			{
				uart_var = UART_Receive();
			}
			UART_Transmit(uart_var);
			
			while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_2)))
    258a:	8f ec       	ldi	r24, 0xCF	; 207
    258c:	81 0f       	add	r24, r17
    258e:	82 30       	cpi	r24, 0x02	; 2
    2590:	20 f7       	brcc	.-56     	; 0x255a <UART_Admin_Interfacing+0x876>
			}
			
			user_type = uart_var;
	
			/*-----------------	Writing the username -----------------*/
			UART_Transmit('\r');
    2592:	8d e0       	ldi	r24, 0x0D	; 13
    2594:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Transmit('\r');
    2598:	8d e0       	ldi	r24, 0x0D	; 13
    259a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Send_String("Enter User's Username to be deleted : ");
    259e:	86 ed       	ldi	r24, 0xD6	; 214
    25a0:	96 e0       	ldi	r25, 0x06	; 6
    25a2:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
    25a6:	ce 01       	movw	r24, r28
    25a8:	01 96       	adiw	r24, 0x01	; 1
    25aa:	7c 01       	movw	r14, r24
			while(looping_counter < LOGIN_SIZE)
			{
				uart_var = 0;
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
				{
					uart_var = UART_Receive();
    25ac:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
    25b0:	08 2f       	mov	r16, r24
			
			looping_counter = 0;
			while(looping_counter < LOGIN_SIZE)
			{
				uart_var = 0;
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    25b2:	80 ed       	ldi	r24, 0xD0	; 208
    25b4:	80 0f       	add	r24, r16
    25b6:	8a 30       	cpi	r24, 0x0A	; 10
    25b8:	c8 f7       	brcc	.-14     	; 0x25ac <UART_Admin_Interfacing+0x8c8>
				{
					uart_var = UART_Receive();
				}
				
				UART_Transmit(uart_var);
    25ba:	80 2f       	mov	r24, r16
    25bc:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				username_arr[looping_counter] = uart_var;
    25c0:	f7 01       	movw	r30, r14
    25c2:	01 93       	st	Z+, r16
    25c4:	7f 01       	movw	r14, r30
			UART_Transmit('\r');
			UART_Transmit('\r');
			UART_Send_String("Enter User's Username to be deleted : ");
			
			looping_counter = 0;
			while(looping_counter < LOGIN_SIZE)
    25c6:	e8 15       	cp	r30, r8
    25c8:	f9 05       	cpc	r31, r9
    25ca:	81 f7       	brne	.-32     	; 0x25ac <UART_Admin_Interfacing+0x8c8>
				UART_Transmit(uart_var);
				username_arr[looping_counter] = uart_var;
				looping_counter++;
			}
			looping_counter = 0;
			UART_Transmit('\r');
    25cc:	8d e0       	ldi	r24, 0x0D	; 13
    25ce:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			
			/*-----------------	Writing the password -----------------*/
			UART_Send_String("Enter User's Password to be deleted : ");
    25d2:	8d ef       	ldi	r24, 0xFD	; 253
    25d4:	96 e0       	ldi	r25, 0x06	; 6
    25d6:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
    25da:	7e 01       	movw	r14, r28
    25dc:	f5 e0       	ldi	r31, 0x05	; 5
    25de:	ef 0e       	add	r14, r31
    25e0:	f1 1c       	adc	r15, r1
			while(looping_counter < LOGIN_SIZE)
			{
				uart_var = 0;
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
				{
					uart_var = UART_Receive();
    25e2:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
    25e6:	08 2f       	mov	r16, r24
			UART_Send_String("Enter User's Password to be deleted : ");

			while(looping_counter < LOGIN_SIZE)
			{
				uart_var = 0;
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    25e8:	80 ed       	ldi	r24, 0xD0	; 208
    25ea:	80 0f       	add	r24, r16
    25ec:	8a 30       	cpi	r24, 0x0A	; 10
    25ee:	c8 f7       	brcc	.-14     	; 0x25e2 <UART_Admin_Interfacing+0x8fe>
				{
					uart_var = UART_Receive();
				}
				
				UART_Transmit(uart_var);
    25f0:	80 2f       	mov	r24, r16
    25f2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				password_arr[looping_counter] = uart_var;
    25f6:	f7 01       	movw	r30, r14
    25f8:	01 93       	st	Z+, r16
    25fa:	7f 01       	movw	r14, r30
			UART_Transmit('\r');
			
			/*-----------------	Writing the password -----------------*/
			UART_Send_String("Enter User's Password to be deleted : ");

			while(looping_counter < LOGIN_SIZE)
    25fc:	ae 16       	cp	r10, r30
    25fe:	bf 06       	cpc	r11, r31
    2600:	81 f7       	brne	.-32     	; 0x25e2 <UART_Admin_Interfacing+0x8fe>
				UART_Transmit(uart_var);
				password_arr[looping_counter] = uart_var;
				looping_counter++;
			}
			looping_counter = 0;
			UART_Transmit('\r');
    2602:	8d e0       	ldi	r24, 0x0D	; 13
    2604:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			
			
			if(user_type == '1')	// Remoted User
    2608:	11 33       	cpi	r17, 0x31	; 49
    260a:	09 f0       	breq	.+2      	; 0x260e <UART_Admin_Interfacing+0x92a>
    260c:	1b c1       	rjmp	.+566    	; 0x2844 <UART_Admin_Interfacing+0xb60>
			{
				EEPROM_readByte(Counters_Block,Users_UART_number_BIT,&user_counter);
    260e:	ae 01       	movw	r20, r28
    2610:	46 5e       	subi	r20, 0xE6	; 230
    2612:	5f 4f       	sbci	r21, 0xFF	; 255
    2614:	62 e0       	ldi	r22, 0x02	; 2
    2616:	8e ea       	ldi	r24, 0xAE	; 174
    2618:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
    261c:	8f e3       	ldi	r24, 0x3F	; 63
    261e:	9c e9       	ldi	r25, 0x9C	; 156
    2620:	01 97       	sbiw	r24, 0x01	; 1
    2622:	f1 f7       	brne	.-4      	; 0x2620 <UART_Admin_Interfacing+0x93c>
    2624:	00 c0       	rjmp	.+0      	; 0x2626 <UART_Admin_Interfacing+0x942>
    2626:	00 00       	nop
				_delay_ms(10);
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
    2628:	8a 8d       	ldd	r24, Y+26	; 0x1a
    262a:	81 11       	cpse	r24, r1
    262c:	e8 c0       	rjmp	.+464    	; 0x27fe <UART_Admin_Interfacing+0xb1a>
    262e:	71 2c       	mov	r7, r1
    2630:	f4 c0       	rjmp	.+488    	; 0x281a <UART_Admin_Interfacing+0xb36>
				{
					for(char i = 0; i<LOGIN_SIZE; i++)
					{
						EEPROM_readByte(UART_User_Username_Block,(4*looping_counter)+i,&username_temp_arr[i]);
    2632:	a7 01       	movw	r20, r14
    2634:	63 2d       	mov	r22, r3
    2636:	86 ea       	ldi	r24, 0xA6	; 166
    2638:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
    263c:	ef e3       	ldi	r30, 0x3F	; 63
    263e:	fc e9       	ldi	r31, 0x9C	; 156
    2640:	31 97       	sbiw	r30, 0x01	; 1
    2642:	f1 f7       	brne	.-4      	; 0x2640 <UART_Admin_Interfacing+0x95c>
    2644:	00 c0       	rjmp	.+0      	; 0x2646 <UART_Admin_Interfacing+0x962>
    2646:	00 00       	nop
						_delay_ms(10);
						EEPROM_readByte(UART_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
    2648:	a8 01       	movw	r20, r16
    264a:	63 2d       	mov	r22, r3
    264c:	88 ea       	ldi	r24, 0xA8	; 168
    264e:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
    2652:	8f e3       	ldi	r24, 0x3F	; 63
    2654:	9c e9       	ldi	r25, 0x9C	; 156
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	f1 f7       	brne	.-4      	; 0x2656 <UART_Admin_Interfacing+0x972>
    265a:	00 c0       	rjmp	.+0      	; 0x265c <UART_Admin_Interfacing+0x978>
    265c:	00 00       	nop
    265e:	33 94       	inc	r3
    2660:	9f ef       	ldi	r25, 0xFF	; 255
    2662:	e9 1a       	sub	r14, r25
    2664:	f9 0a       	sbc	r15, r25
    2666:	0f 5f       	subi	r16, 0xFF	; 255
    2668:	1f 4f       	sbci	r17, 0xFF	; 255
				EEPROM_readByte(Counters_Block,Users_UART_number_BIT,&user_counter);
				_delay_ms(10);
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
				{
					for(char i = 0; i<LOGIN_SIZE; i++)
    266a:	32 10       	cpse	r3, r2
    266c:	e2 cf       	rjmp	.-60     	; 0x2632 <UART_Admin_Interfacing+0x94e>
						_delay_ms(10);
						EEPROM_readByte(UART_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
						_delay_ms(10);
					}
					
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
    266e:	44 e0       	ldi	r20, 0x04	; 4
    2670:	64 2d       	mov	r22, r4
    2672:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2674:	86 2d       	mov	r24, r6
    2676:	95 2d       	mov	r25, r5
    2678:	0e 94 05 05 	call	0xa0a	; 0xa0a <Compare_Passwords>
    267c:	81 33       	cpi	r24, 0x31	; 49
    267e:	09 f0       	breq	.+2      	; 0x2682 <UART_Admin_Interfacing+0x99e>
    2680:	b8 c0       	rjmp	.+368    	; 0x27f2 <UART_Admin_Interfacing+0xb0e>
    2682:	44 e0       	ldi	r20, 0x04	; 4
    2684:	be 01       	movw	r22, r28
    2686:	63 5f       	subi	r22, 0xF3	; 243
    2688:	7f 4f       	sbci	r23, 0xFF	; 255
    268a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    268c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    268e:	0e 94 05 05 	call	0xa0a	; 0xa0a <Compare_Passwords>
    2692:	81 33       	cpi	r24, 0x31	; 49
    2694:	09 f0       	breq	.+2      	; 0x2698 <UART_Admin_Interfacing+0x9b4>
    2696:	ad c0       	rjmp	.+346    	; 0x27f2 <UART_Admin_Interfacing+0xb0e>
					{
						for(unsigned char counter = looping_counter; counter < user_counter-1; counter++)
    2698:	87 2d       	mov	r24, r7
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	21 50       	subi	r18, 0x01	; 1
    26a2:	31 09       	sbc	r19, r1
    26a4:	82 17       	cp	r24, r18
    26a6:	93 07       	cpc	r25, r19
    26a8:	0c f0       	brlt	.+2      	; 0x26ac <UART_Admin_Interfacing+0x9c8>
    26aa:	63 c0       	rjmp	.+198    	; 0x2772 <UART_Admin_Interfacing+0xa8e>
    26ac:	e7 2d       	mov	r30, r7
    26ae:	ee 0f       	add	r30, r30
    26b0:	ee 0f       	add	r30, r30
    26b2:	ec 8f       	std	Y+28, r30	; 0x1c
    26b4:	27 2c       	mov	r2, r7
    26b6:	4e c0       	rjmp	.+156    	; 0x2754 <UART_Admin_Interfacing+0xa70>
						{
							for(char i = 0; i<LOGIN_SIZE; i++)
							{
								EEPROM_readByte(UART_User_Username_Block,4*(counter+1)+i,&username_arr_2[i]);
    26b8:	a7 01       	movw	r20, r14
    26ba:	63 2d       	mov	r22, r3
    26bc:	86 ea       	ldi	r24, 0xA6	; 166
    26be:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
    26c2:	8f e3       	ldi	r24, 0x3F	; 63
    26c4:	9c e9       	ldi	r25, 0x9C	; 156
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	f1 f7       	brne	.-4      	; 0x26c6 <UART_Admin_Interfacing+0x9e2>
    26ca:	00 c0       	rjmp	.+0      	; 0x26cc <UART_Admin_Interfacing+0x9e8>
    26cc:	00 00       	nop
								_delay_ms(10);
								EEPROM_readByte(UART_User_Password_Block,4*(counter+1)+i,&password_arr_2[i]);
    26ce:	a8 01       	movw	r20, r16
    26d0:	63 2d       	mov	r22, r3
    26d2:	88 ea       	ldi	r24, 0xA8	; 168
    26d4:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
    26d8:	ef e3       	ldi	r30, 0x3F	; 63
    26da:	fc e9       	ldi	r31, 0x9C	; 156
    26dc:	31 97       	sbiw	r30, 0x01	; 1
    26de:	f1 f7       	brne	.-4      	; 0x26dc <UART_Admin_Interfacing+0x9f8>
    26e0:	00 c0       	rjmp	.+0      	; 0x26e2 <UART_Admin_Interfacing+0x9fe>
    26e2:	00 00       	nop
    26e4:	33 94       	inc	r3
    26e6:	ff ef       	ldi	r31, 0xFF	; 255
    26e8:	ef 1a       	sub	r14, r31
    26ea:	ff 0a       	sbc	r15, r31
    26ec:	0f 5f       	subi	r16, 0xFF	; 255
    26ee:	1f 4f       	sbci	r17, 0xFF	; 255
					
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
					{
						for(unsigned char counter = looping_counter; counter < user_counter-1; counter++)
						{
							for(char i = 0; i<LOGIN_SIZE; i++)
    26f0:	28 a1       	ldd	r18, Y+32	; 0x20
    26f2:	23 11       	cpse	r18, r3
    26f4:	e1 cf       	rjmp	.-62     	; 0x26b8 <UART_Admin_Interfacing+0x9d4>
								_delay_ms(10);
								EEPROM_readByte(UART_User_Password_Block,4*(counter+1)+i,&password_arr_2[i]);
								_delay_ms(10);
							}
								
							EEPROM_writeDataStream(UART_User_Username_Block,4*(counter),username_arr_2,LOGIN_SIZE);
    26f6:	24 e0       	ldi	r18, 0x04	; 4
    26f8:	ae 01       	movw	r20, r28
    26fa:	4f 5e       	subi	r20, 0xEF	; 239
    26fc:	5f 4f       	sbci	r21, 0xFF	; 255
    26fe:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2700:	86 ea       	ldi	r24, 0xA6	; 166
    2702:	0e 94 a1 04 	call	0x942	; 0x942 <EEPROM_writeDataStream>
    2706:	8f ef       	ldi	r24, 0xFF	; 255
    2708:	93 ec       	ldi	r25, 0xC3	; 195
    270a:	e9 e0       	ldi	r30, 0x09	; 9
    270c:	81 50       	subi	r24, 0x01	; 1
    270e:	90 40       	sbci	r25, 0x00	; 0
    2710:	e0 40       	sbci	r30, 0x00	; 0
    2712:	e1 f7       	brne	.-8      	; 0x270c <UART_Admin_Interfacing+0xa28>
    2714:	00 c0       	rjmp	.+0      	; 0x2716 <UART_Admin_Interfacing+0xa32>
    2716:	00 00       	nop
							_delay_ms(200);
							EEPROM_writeDataStream(UART_User_Password_Block,4*(counter),password_arr_2,LOGIN_SIZE);
    2718:	24 e0       	ldi	r18, 0x04	; 4
    271a:	ae 01       	movw	r20, r28
    271c:	4b 5e       	subi	r20, 0xEB	; 235
    271e:	5f 4f       	sbci	r21, 0xFF	; 255
    2720:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2722:	88 ea       	ldi	r24, 0xA8	; 168
    2724:	0e 94 a1 04 	call	0x942	; 0x942 <EEPROM_writeDataStream>
    2728:	ff ef       	ldi	r31, 0xFF	; 255
    272a:	23 ec       	ldi	r18, 0xC3	; 195
    272c:	89 e0       	ldi	r24, 0x09	; 9
    272e:	f1 50       	subi	r31, 0x01	; 1
    2730:	20 40       	sbci	r18, 0x00	; 0
    2732:	80 40       	sbci	r24, 0x00	; 0
    2734:	e1 f7       	brne	.-8      	; 0x272e <UART_Admin_Interfacing+0xa4a>
    2736:	00 c0       	rjmp	.+0      	; 0x2738 <UART_Admin_Interfacing+0xa54>
    2738:	00 00       	nop
						_delay_ms(10);
					}
					
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
					{
						for(unsigned char counter = looping_counter; counter < user_counter-1; counter++)
    273a:	23 94       	inc	r2
    273c:	82 2d       	mov	r24, r2
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2742:	ec 5f       	subi	r30, 0xFC	; 252
    2744:	ec 8f       	std	Y+28, r30	; 0x1c
    2746:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	21 50       	subi	r18, 0x01	; 1
    274c:	31 09       	sbc	r19, r1
    274e:	82 17       	cp	r24, r18
    2750:	93 07       	cpc	r25, r19
    2752:	7c f4       	brge	.+30     	; 0x2772 <UART_Admin_Interfacing+0xa8e>
						{
							for(char i = 0; i<LOGIN_SIZE; i++)
							{
								EEPROM_readByte(UART_User_Username_Block,4*(counter+1)+i,&username_arr_2[i]);
    2754:	01 96       	adiw	r24, 0x01	; 1
    2756:	38 2e       	mov	r3, r24
    2758:	33 0c       	add	r3, r3
    275a:	33 0c       	add	r3, r3
    275c:	7e 01       	movw	r14, r28
    275e:	f1 e1       	ldi	r31, 0x11	; 17
    2760:	ef 0e       	add	r14, r31
    2762:	f1 1c       	adc	r15, r1
    2764:	8e 01       	movw	r16, r28
    2766:	0b 5e       	subi	r16, 0xEB	; 235
    2768:	1f 4f       	sbci	r17, 0xFF	; 255
    276a:	24 e0       	ldi	r18, 0x04	; 4
    276c:	23 0d       	add	r18, r3
    276e:	28 a3       	std	Y+32, r18	; 0x20
    2770:	a3 cf       	rjmp	.-186    	; 0x26b8 <UART_Admin_Interfacing+0x9d4>
							_delay_ms(200);
							EEPROM_writeDataStream(UART_User_Password_Block,4*(counter),password_arr_2,LOGIN_SIZE);
							_delay_ms(200);
						}						
						
						UART_Send_String("The user is deleted successfully");
    2772:	84 e2       	ldi	r24, 0x24	; 36
    2774:	97 e0       	ldi	r25, 0x07	; 7
    2776:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
						UART_Transmit('\r');
    277a:	8d e0       	ldi	r24, 0x0D	; 13
    277c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
						
						for(unsigned char i = 0; i < LOGIN_SIZE; i++)
    2780:	10 e0       	ldi	r17, 0x00	; 0
						{
							EEPROM_writeByte(UART_User_Username_Block, 4*(user_counter-1)+i, 0xFF);
    2782:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2784:	66 0f       	add	r22, r22
    2786:	66 0f       	add	r22, r22
    2788:	64 50       	subi	r22, 0x04	; 4
    278a:	61 0f       	add	r22, r17
    278c:	4f ef       	ldi	r20, 0xFF	; 255
    278e:	86 ea       	ldi	r24, 0xA6	; 166
    2790:	0e 94 63 04 	call	0x8c6	; 0x8c6 <EEPROM_writeByte>
    2794:	8f ef       	ldi	r24, 0xFF	; 255
    2796:	93 ec       	ldi	r25, 0xC3	; 195
    2798:	e9 e0       	ldi	r30, 0x09	; 9
    279a:	81 50       	subi	r24, 0x01	; 1
    279c:	90 40       	sbci	r25, 0x00	; 0
    279e:	e0 40       	sbci	r30, 0x00	; 0
    27a0:	e1 f7       	brne	.-8      	; 0x279a <UART_Admin_Interfacing+0xab6>
    27a2:	00 c0       	rjmp	.+0      	; 0x27a4 <UART_Admin_Interfacing+0xac0>
    27a4:	00 00       	nop
							_delay_ms(200);
							EEPROM_writeByte(UART_User_Password_Block, 4*(user_counter-1)+i, 0xFF);
    27a6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    27a8:	66 0f       	add	r22, r22
    27aa:	66 0f       	add	r22, r22
    27ac:	64 50       	subi	r22, 0x04	; 4
    27ae:	61 0f       	add	r22, r17
    27b0:	4f ef       	ldi	r20, 0xFF	; 255
    27b2:	88 ea       	ldi	r24, 0xA8	; 168
    27b4:	0e 94 63 04 	call	0x8c6	; 0x8c6 <EEPROM_writeByte>
    27b8:	ff ef       	ldi	r31, 0xFF	; 255
    27ba:	23 ec       	ldi	r18, 0xC3	; 195
    27bc:	89 e0       	ldi	r24, 0x09	; 9
    27be:	f1 50       	subi	r31, 0x01	; 1
    27c0:	20 40       	sbci	r18, 0x00	; 0
    27c2:	80 40       	sbci	r24, 0x00	; 0
    27c4:	e1 f7       	brne	.-8      	; 0x27be <UART_Admin_Interfacing+0xada>
    27c6:	00 c0       	rjmp	.+0      	; 0x27c8 <UART_Admin_Interfacing+0xae4>
    27c8:	00 00       	nop
						}						
						
						UART_Send_String("The user is deleted successfully");
						UART_Transmit('\r');
						
						for(unsigned char i = 0; i < LOGIN_SIZE; i++)
    27ca:	1f 5f       	subi	r17, 0xFF	; 255
    27cc:	14 30       	cpi	r17, 0x04	; 4
    27ce:	c9 f6       	brne	.-78     	; 0x2782 <UART_Admin_Interfacing+0xa9e>
							_delay_ms(200);
							EEPROM_writeByte(UART_User_Password_Block, 4*(user_counter-1)+i, 0xFF);
							_delay_ms(200);
						}
						
						user_counter--;
    27d0:	4a 8d       	ldd	r20, Y+26	; 0x1a
    27d2:	41 50       	subi	r20, 0x01	; 1
    27d4:	4a 8f       	std	Y+26, r20	; 0x1a
						EEPROM_writeByte(Counters_Block,Users_UART_number_BIT,user_counter);
    27d6:	62 e0       	ldi	r22, 0x02	; 2
    27d8:	8e ea       	ldi	r24, 0xAE	; 174
    27da:	0e 94 63 04 	call	0x8c6	; 0x8c6 <EEPROM_writeByte>
    27de:	9f ef       	ldi	r25, 0xFF	; 255
    27e0:	e3 ec       	ldi	r30, 0xC3	; 195
    27e2:	f9 e0       	ldi	r31, 0x09	; 9
    27e4:	91 50       	subi	r25, 0x01	; 1
    27e6:	e0 40       	sbci	r30, 0x00	; 0
    27e8:	f0 40       	sbci	r31, 0x00	; 0
    27ea:	e1 f7       	brne	.-8      	; 0x27e4 <UART_Admin_Interfacing+0xb00>
    27ec:	00 c0       	rjmp	.+0      	; 0x27ee <UART_Admin_Interfacing+0xb0a>
    27ee:	00 00       	nop
    27f0:	54 c1       	rjmp	.+680    	; 0x2a9a <UART_Admin_Interfacing+0xdb6>
			if(user_type == '1')	// Remoted User
			{
				EEPROM_readByte(Counters_Block,Users_UART_number_BIT,&user_counter);
				_delay_ms(10);
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
    27f2:	73 94       	inc	r7
    27f4:	32 2c       	mov	r3, r2
    27f6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    27f8:	78 16       	cp	r7, r24
    27fa:	18 f0       	brcs	.+6      	; 0x2802 <UART_Admin_Interfacing+0xb1e>
    27fc:	0e c0       	rjmp	.+28     	; 0x281a <UART_Admin_Interfacing+0xb36>
    27fe:	31 2c       	mov	r3, r1
    2800:	71 2c       	mov	r7, r1
    2802:	7e 01       	movw	r14, r28
    2804:	29 e0       	ldi	r18, 0x09	; 9
    2806:	e2 0e       	add	r14, r18
    2808:	f1 1c       	adc	r15, r1
    280a:	8e 01       	movw	r16, r28
    280c:	03 5f       	subi	r16, 0xF3	; 243
    280e:	1f 4f       	sbci	r17, 0xFF	; 255
    2810:	68 94       	set
    2812:	22 24       	eor	r2, r2
    2814:	22 f8       	bld	r2, 2
    2816:	23 0c       	add	r2, r3
    2818:	0c cf       	rjmp	.-488    	; 0x2632 <UART_Admin_Interfacing+0x94e>
						
						Compare_Var = 1;
						break;
					}
				}
				if(Compare_Var == 0)
    281a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    281c:	81 11       	cpse	r24, r1
    281e:	92 ca       	rjmp	.-2780   	; 0x1d44 <UART_Admin_Interfacing+0x60>
				{
					UART_Send_String("The entered Username & Password are not found");
    2820:	85 e4       	ldi	r24, 0x45	; 69
    2822:	97 e0       	ldi	r25, 0x07	; 7
    2824:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
					UART_Transmit('\r');
    2828:	8d e0       	ldi	r24, 0x0D	; 13
    282a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Send_String("Please Try again");
    282e:	83 e7       	ldi	r24, 0x73	; 115
    2830:	97 e0       	ldi	r25, 0x07	; 7
    2832:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
					UART_Transmit('\r');
    2836:	8d e0       	ldi	r24, 0x0D	; 13
    2838:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Transmit('\r');
    283c:	8d e0       	ldi	r24, 0x0D	; 13
    283e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
    2842:	80 ca       	rjmp	.-2816   	; 0x1d44 <UART_Admin_Interfacing+0x60>
				}
				
			}
			else					// LCD & Keypad User
			{
				EEPROM_readByte(Counters_Block,Users_LCD_number_BIT,&user_counter);	// 3
    2844:	ae 01       	movw	r20, r28
    2846:	46 5e       	subi	r20, 0xE6	; 230
    2848:	5f 4f       	sbci	r21, 0xFF	; 255
    284a:	63 e0       	ldi	r22, 0x03	; 3
    284c:	8e ea       	ldi	r24, 0xAE	; 174
    284e:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
    2852:	ef e3       	ldi	r30, 0x3F	; 63
    2854:	fc e9       	ldi	r31, 0x9C	; 156
    2856:	31 97       	sbiw	r30, 0x01	; 1
    2858:	f1 f7       	brne	.-4      	; 0x2856 <UART_Admin_Interfacing+0xb72>
    285a:	00 c0       	rjmp	.+0      	; 0x285c <UART_Admin_Interfacing+0xb78>
    285c:	00 00       	nop
				_delay_ms(10);
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
    285e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2860:	81 11       	cpse	r24, r1
    2862:	e8 c0       	rjmp	.+464    	; 0x2a34 <UART_Admin_Interfacing+0xd50>
    2864:	71 2c       	mov	r7, r1
    2866:	f4 c0       	rjmp	.+488    	; 0x2a50 <UART_Admin_Interfacing+0xd6c>
				{
					for(char i = 0; i<LOGIN_SIZE; i++)
					{
						EEPROM_readByte(LCD_User_Username_Block,(4*looping_counter)+i,&username_temp_arr[i]);
    2868:	a7 01       	movw	r20, r14
    286a:	63 2d       	mov	r22, r3
    286c:	8a ea       	ldi	r24, 0xAA	; 170
    286e:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
    2872:	8f e3       	ldi	r24, 0x3F	; 63
    2874:	9c e9       	ldi	r25, 0x9C	; 156
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	f1 f7       	brne	.-4      	; 0x2876 <UART_Admin_Interfacing+0xb92>
    287a:	00 c0       	rjmp	.+0      	; 0x287c <UART_Admin_Interfacing+0xb98>
    287c:	00 00       	nop
						_delay_ms(10);
						EEPROM_readByte(LCD_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
    287e:	a8 01       	movw	r20, r16
    2880:	63 2d       	mov	r22, r3
    2882:	8c ea       	ldi	r24, 0xAC	; 172
    2884:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
    2888:	ef e3       	ldi	r30, 0x3F	; 63
    288a:	fc e9       	ldi	r31, 0x9C	; 156
    288c:	31 97       	sbiw	r30, 0x01	; 1
    288e:	f1 f7       	brne	.-4      	; 0x288c <UART_Admin_Interfacing+0xba8>
    2890:	00 c0       	rjmp	.+0      	; 0x2892 <UART_Admin_Interfacing+0xbae>
    2892:	00 00       	nop
    2894:	33 94       	inc	r3
    2896:	ff ef       	ldi	r31, 0xFF	; 255
    2898:	ef 1a       	sub	r14, r31
    289a:	ff 0a       	sbc	r15, r31
    289c:	0f 5f       	subi	r16, 0xFF	; 255
    289e:	1f 4f       	sbci	r17, 0xFF	; 255
				EEPROM_readByte(Counters_Block,Users_LCD_number_BIT,&user_counter);	// 3
				_delay_ms(10);
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
				{
					for(char i = 0; i<LOGIN_SIZE; i++)
    28a0:	32 10       	cpse	r3, r2
    28a2:	e2 cf       	rjmp	.-60     	; 0x2868 <UART_Admin_Interfacing+0xb84>
						EEPROM_readByte(LCD_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
						_delay_ms(10);
					}
					
					
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
    28a4:	44 e0       	ldi	r20, 0x04	; 4
    28a6:	64 2d       	mov	r22, r4
    28a8:	7d 8d       	ldd	r23, Y+29	; 0x1d
    28aa:	86 2d       	mov	r24, r6
    28ac:	95 2d       	mov	r25, r5
    28ae:	0e 94 05 05 	call	0xa0a	; 0xa0a <Compare_Passwords>
    28b2:	81 33       	cpi	r24, 0x31	; 49
    28b4:	09 f0       	breq	.+2      	; 0x28b8 <UART_Admin_Interfacing+0xbd4>
    28b6:	b8 c0       	rjmp	.+368    	; 0x2a28 <UART_Admin_Interfacing+0xd44>
    28b8:	44 e0       	ldi	r20, 0x04	; 4
    28ba:	be 01       	movw	r22, r28
    28bc:	63 5f       	subi	r22, 0xF3	; 243
    28be:	7f 4f       	sbci	r23, 0xFF	; 255
    28c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28c2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    28c4:	0e 94 05 05 	call	0xa0a	; 0xa0a <Compare_Passwords>
    28c8:	81 33       	cpi	r24, 0x31	; 49
    28ca:	09 f0       	breq	.+2      	; 0x28ce <UART_Admin_Interfacing+0xbea>
    28cc:	ad c0       	rjmp	.+346    	; 0x2a28 <UART_Admin_Interfacing+0xd44>
					{
						
						for(unsigned char counter = looping_counter; counter < (user_counter-1); counter++)
    28ce:	87 2d       	mov	r24, r7
    28d0:	90 e0       	ldi	r25, 0x00	; 0
    28d2:	2a 8d       	ldd	r18, Y+26	; 0x1a
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	21 50       	subi	r18, 0x01	; 1
    28d8:	31 09       	sbc	r19, r1
    28da:	82 17       	cp	r24, r18
    28dc:	93 07       	cpc	r25, r19
    28de:	0c f0       	brlt	.+2      	; 0x28e2 <UART_Admin_Interfacing+0xbfe>
    28e0:	63 c0       	rjmp	.+198    	; 0x29a8 <UART_Admin_Interfacing+0xcc4>
    28e2:	27 2d       	mov	r18, r7
    28e4:	22 0f       	add	r18, r18
    28e6:	22 0f       	add	r18, r18
    28e8:	2c 8f       	std	Y+28, r18	; 0x1c
    28ea:	27 2c       	mov	r2, r7
    28ec:	4e c0       	rjmp	.+156    	; 0x298a <UART_Admin_Interfacing+0xca6>
						{			
							for(char i = 0; i<LOGIN_SIZE; i++)
							{
								EEPROM_readByte(LCD_User_Username_Block,4*(counter+1)+i,&username_arr_2[i]);
    28ee:	a7 01       	movw	r20, r14
    28f0:	63 2d       	mov	r22, r3
    28f2:	8a ea       	ldi	r24, 0xAA	; 170
    28f4:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
    28f8:	8f e3       	ldi	r24, 0x3F	; 63
    28fa:	9c e9       	ldi	r25, 0x9C	; 156
    28fc:	01 97       	sbiw	r24, 0x01	; 1
    28fe:	f1 f7       	brne	.-4      	; 0x28fc <UART_Admin_Interfacing+0xc18>
    2900:	00 c0       	rjmp	.+0      	; 0x2902 <UART_Admin_Interfacing+0xc1e>
    2902:	00 00       	nop
								_delay_ms(10);
								EEPROM_readByte(LCD_User_Password_Block,4*(counter+1)+i,&password_arr_2[i]);
    2904:	a8 01       	movw	r20, r16
    2906:	63 2d       	mov	r22, r3
    2908:	8c ea       	ldi	r24, 0xAC	; 172
    290a:	0e 94 80 04 	call	0x900	; 0x900 <EEPROM_readByte>
    290e:	ef e3       	ldi	r30, 0x3F	; 63
    2910:	fc e9       	ldi	r31, 0x9C	; 156
    2912:	31 97       	sbiw	r30, 0x01	; 1
    2914:	f1 f7       	brne	.-4      	; 0x2912 <UART_Admin_Interfacing+0xc2e>
    2916:	00 c0       	rjmp	.+0      	; 0x2918 <UART_Admin_Interfacing+0xc34>
    2918:	00 00       	nop
    291a:	33 94       	inc	r3
    291c:	ff ef       	ldi	r31, 0xFF	; 255
    291e:	ef 1a       	sub	r14, r31
    2920:	ff 0a       	sbc	r15, r31
    2922:	0f 5f       	subi	r16, 0xFF	; 255
    2924:	1f 4f       	sbci	r17, 0xFF	; 255
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
					{
						
						for(unsigned char counter = looping_counter; counter < (user_counter-1); counter++)
						{			
							for(char i = 0; i<LOGIN_SIZE; i++)
    2926:	28 a1       	ldd	r18, Y+32	; 0x20
    2928:	23 11       	cpse	r18, r3
    292a:	e1 cf       	rjmp	.-62     	; 0x28ee <UART_Admin_Interfacing+0xc0a>
								EEPROM_readByte(LCD_User_Password_Block,4*(counter+1)+i,&password_arr_2[i]);
								_delay_ms(10);
							}
							
							
							EEPROM_writeDataStream(LCD_User_Username_Block,4*(counter),username_arr_2,LOGIN_SIZE);
    292c:	24 e0       	ldi	r18, 0x04	; 4
    292e:	ae 01       	movw	r20, r28
    2930:	4f 5e       	subi	r20, 0xEF	; 239
    2932:	5f 4f       	sbci	r21, 0xFF	; 255
    2934:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2936:	8a ea       	ldi	r24, 0xAA	; 170
    2938:	0e 94 a1 04 	call	0x942	; 0x942 <EEPROM_writeDataStream>
    293c:	8f ef       	ldi	r24, 0xFF	; 255
    293e:	93 ec       	ldi	r25, 0xC3	; 195
    2940:	e9 e0       	ldi	r30, 0x09	; 9
    2942:	81 50       	subi	r24, 0x01	; 1
    2944:	90 40       	sbci	r25, 0x00	; 0
    2946:	e0 40       	sbci	r30, 0x00	; 0
    2948:	e1 f7       	brne	.-8      	; 0x2942 <UART_Admin_Interfacing+0xc5e>
    294a:	00 c0       	rjmp	.+0      	; 0x294c <UART_Admin_Interfacing+0xc68>
    294c:	00 00       	nop
							_delay_ms(200);
							EEPROM_writeDataStream(LCD_User_Password_Block,4*(counter),password_arr_2,LOGIN_SIZE);
    294e:	24 e0       	ldi	r18, 0x04	; 4
    2950:	ae 01       	movw	r20, r28
    2952:	4b 5e       	subi	r20, 0xEB	; 235
    2954:	5f 4f       	sbci	r21, 0xFF	; 255
    2956:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2958:	8c ea       	ldi	r24, 0xAC	; 172
    295a:	0e 94 a1 04 	call	0x942	; 0x942 <EEPROM_writeDataStream>
    295e:	ff ef       	ldi	r31, 0xFF	; 255
    2960:	23 ec       	ldi	r18, 0xC3	; 195
    2962:	89 e0       	ldi	r24, 0x09	; 9
    2964:	f1 50       	subi	r31, 0x01	; 1
    2966:	20 40       	sbci	r18, 0x00	; 0
    2968:	80 40       	sbci	r24, 0x00	; 0
    296a:	e1 f7       	brne	.-8      	; 0x2964 <UART_Admin_Interfacing+0xc80>
    296c:	00 c0       	rjmp	.+0      	; 0x296e <UART_Admin_Interfacing+0xc8a>
    296e:	00 00       	nop
					
					
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
					{
						
						for(unsigned char counter = looping_counter; counter < (user_counter-1); counter++)
    2970:	23 94       	inc	r2
    2972:	82 2d       	mov	r24, r2
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2978:	ec 5f       	subi	r30, 0xFC	; 252
    297a:	ec 8f       	std	Y+28, r30	; 0x1c
    297c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	21 50       	subi	r18, 0x01	; 1
    2982:	31 09       	sbc	r19, r1
    2984:	82 17       	cp	r24, r18
    2986:	93 07       	cpc	r25, r19
    2988:	7c f4       	brge	.+30     	; 0x29a8 <UART_Admin_Interfacing+0xcc4>
						{			
							for(char i = 0; i<LOGIN_SIZE; i++)
							{
								EEPROM_readByte(LCD_User_Username_Block,4*(counter+1)+i,&username_arr_2[i]);
    298a:	01 96       	adiw	r24, 0x01	; 1
    298c:	38 2e       	mov	r3, r24
    298e:	33 0c       	add	r3, r3
    2990:	33 0c       	add	r3, r3
    2992:	7e 01       	movw	r14, r28
    2994:	f1 e1       	ldi	r31, 0x11	; 17
    2996:	ef 0e       	add	r14, r31
    2998:	f1 1c       	adc	r15, r1
    299a:	8e 01       	movw	r16, r28
    299c:	0b 5e       	subi	r16, 0xEB	; 235
    299e:	1f 4f       	sbci	r17, 0xFF	; 255
    29a0:	24 e0       	ldi	r18, 0x04	; 4
    29a2:	23 0d       	add	r18, r3
    29a4:	28 a3       	std	Y+32, r18	; 0x20
    29a6:	a3 cf       	rjmp	.-186    	; 0x28ee <UART_Admin_Interfacing+0xc0a>
							EEPROM_writeDataStream(LCD_User_Username_Block,4*(counter),username_arr_2,LOGIN_SIZE);
							_delay_ms(200);
							EEPROM_writeDataStream(LCD_User_Password_Block,4*(counter),password_arr_2,LOGIN_SIZE);
							_delay_ms(200);
						}
						UART_Send_String("The user is deleted successfully");
    29a8:	84 e2       	ldi	r24, 0x24	; 36
    29aa:	97 e0       	ldi	r25, 0x07	; 7
    29ac:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
						UART_Transmit('\r');
    29b0:	8d e0       	ldi	r24, 0x0D	; 13
    29b2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
						
						for(unsigned char i = 0; i < LOGIN_SIZE; i++)
    29b6:	10 e0       	ldi	r17, 0x00	; 0
						{
							EEPROM_writeByte(LCD_User_Username_Block, 4*(user_counter-1)+i, 0xFF);
    29b8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    29ba:	66 0f       	add	r22, r22
    29bc:	66 0f       	add	r22, r22
    29be:	64 50       	subi	r22, 0x04	; 4
    29c0:	61 0f       	add	r22, r17
    29c2:	4f ef       	ldi	r20, 0xFF	; 255
    29c4:	8a ea       	ldi	r24, 0xAA	; 170
    29c6:	0e 94 63 04 	call	0x8c6	; 0x8c6 <EEPROM_writeByte>
    29ca:	8f ef       	ldi	r24, 0xFF	; 255
    29cc:	93 ec       	ldi	r25, 0xC3	; 195
    29ce:	e9 e0       	ldi	r30, 0x09	; 9
    29d0:	81 50       	subi	r24, 0x01	; 1
    29d2:	90 40       	sbci	r25, 0x00	; 0
    29d4:	e0 40       	sbci	r30, 0x00	; 0
    29d6:	e1 f7       	brne	.-8      	; 0x29d0 <UART_Admin_Interfacing+0xcec>
    29d8:	00 c0       	rjmp	.+0      	; 0x29da <UART_Admin_Interfacing+0xcf6>
    29da:	00 00       	nop
							_delay_ms(200);
							EEPROM_writeByte(LCD_User_Password_Block, 4*(user_counter-1)+i, 0xFF);
    29dc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    29de:	66 0f       	add	r22, r22
    29e0:	66 0f       	add	r22, r22
    29e2:	64 50       	subi	r22, 0x04	; 4
    29e4:	61 0f       	add	r22, r17
    29e6:	4f ef       	ldi	r20, 0xFF	; 255
    29e8:	8c ea       	ldi	r24, 0xAC	; 172
    29ea:	0e 94 63 04 	call	0x8c6	; 0x8c6 <EEPROM_writeByte>
    29ee:	ff ef       	ldi	r31, 0xFF	; 255
    29f0:	23 ec       	ldi	r18, 0xC3	; 195
    29f2:	89 e0       	ldi	r24, 0x09	; 9
    29f4:	f1 50       	subi	r31, 0x01	; 1
    29f6:	20 40       	sbci	r18, 0x00	; 0
    29f8:	80 40       	sbci	r24, 0x00	; 0
    29fa:	e1 f7       	brne	.-8      	; 0x29f4 <UART_Admin_Interfacing+0xd10>
    29fc:	00 c0       	rjmp	.+0      	; 0x29fe <UART_Admin_Interfacing+0xd1a>
    29fe:	00 00       	nop
							_delay_ms(200);
						}
						UART_Send_String("The user is deleted successfully");
						UART_Transmit('\r');
						
						for(unsigned char i = 0; i < LOGIN_SIZE; i++)
    2a00:	1f 5f       	subi	r17, 0xFF	; 255
    2a02:	14 30       	cpi	r17, 0x04	; 4
    2a04:	c9 f6       	brne	.-78     	; 0x29b8 <UART_Admin_Interfacing+0xcd4>
							_delay_ms(200);
							EEPROM_writeByte(LCD_User_Password_Block, 4*(user_counter-1)+i, 0xFF);
							_delay_ms(200);
						}
						
						user_counter--;
    2a06:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2a08:	41 50       	subi	r20, 0x01	; 1
    2a0a:	4a 8f       	std	Y+26, r20	; 0x1a
						EEPROM_writeByte(Counters_Block,Users_LCD_number_BIT,user_counter);
    2a0c:	63 e0       	ldi	r22, 0x03	; 3
    2a0e:	8e ea       	ldi	r24, 0xAE	; 174
    2a10:	0e 94 63 04 	call	0x8c6	; 0x8c6 <EEPROM_writeByte>
    2a14:	9f ef       	ldi	r25, 0xFF	; 255
    2a16:	e3 ec       	ldi	r30, 0xC3	; 195
    2a18:	f9 e0       	ldi	r31, 0x09	; 9
    2a1a:	91 50       	subi	r25, 0x01	; 1
    2a1c:	e0 40       	sbci	r30, 0x00	; 0
    2a1e:	f0 40       	sbci	r31, 0x00	; 0
    2a20:	e1 f7       	brne	.-8      	; 0x2a1a <UART_Admin_Interfacing+0xd36>
    2a22:	00 c0       	rjmp	.+0      	; 0x2a24 <UART_Admin_Interfacing+0xd40>
    2a24:	00 00       	nop
    2a26:	39 c0       	rjmp	.+114    	; 0x2a9a <UART_Admin_Interfacing+0xdb6>
			else					// LCD & Keypad User
			{
				EEPROM_readByte(Counters_Block,Users_LCD_number_BIT,&user_counter);	// 3
				_delay_ms(10);
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
    2a28:	73 94       	inc	r7
    2a2a:	32 2c       	mov	r3, r2
    2a2c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a2e:	78 16       	cp	r7, r24
    2a30:	18 f0       	brcs	.+6      	; 0x2a38 <UART_Admin_Interfacing+0xd54>
    2a32:	0e c0       	rjmp	.+28     	; 0x2a50 <UART_Admin_Interfacing+0xd6c>
    2a34:	31 2c       	mov	r3, r1
    2a36:	71 2c       	mov	r7, r1
    2a38:	7e 01       	movw	r14, r28
    2a3a:	29 e0       	ldi	r18, 0x09	; 9
    2a3c:	e2 0e       	add	r14, r18
    2a3e:	f1 1c       	adc	r15, r1
    2a40:	8e 01       	movw	r16, r28
    2a42:	03 5f       	subi	r16, 0xF3	; 243
    2a44:	1f 4f       	sbci	r17, 0xFF	; 255
    2a46:	68 94       	set
    2a48:	22 24       	eor	r2, r2
    2a4a:	22 f8       	bld	r2, 2
    2a4c:	23 0c       	add	r2, r3
    2a4e:	0c cf       	rjmp	.-488    	; 0x2868 <UART_Admin_Interfacing+0xb84>
						
						Compare_Var = 1;
						break;
					}
				}
				if(Compare_Var == 0)
    2a50:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a52:	81 11       	cpse	r24, r1
    2a54:	77 c9       	rjmp	.-3346   	; 0x1d44 <UART_Admin_Interfacing+0x60>
				{
					UART_Transmit('\r');
    2a56:	8d e0       	ldi	r24, 0x0D	; 13
    2a58:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Send_String("The entered Username & Password are not found");
    2a5c:	85 e4       	ldi	r24, 0x45	; 69
    2a5e:	97 e0       	ldi	r25, 0x07	; 7
    2a60:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
					UART_Transmit('\r');
    2a64:	8d e0       	ldi	r24, 0x0D	; 13
    2a66:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Send_String("Please Try again");
    2a6a:	83 e7       	ldi	r24, 0x73	; 115
    2a6c:	97 e0       	ldi	r25, 0x07	; 7
    2a6e:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
					UART_Transmit('\r');
    2a72:	8d e0       	ldi	r24, 0x0D	; 13
    2a74:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Transmit('\r');
    2a78:	8d e0       	ldi	r24, 0x0D	; 13
    2a7a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
    2a7e:	62 c9       	rjmp	.-3388   	; 0x1d44 <UART_Admin_Interfacing+0x60>
	unsigned char user_type = 0;
	char admin_counter = 0;
	char user_counter = 0;
	char max_number_var = 0;
	
	while (option != Ascii_8)	// Corresponding to Logout
    2a80:	18 33       	cpi	r17, 0x38	; 56
    2a82:	09 f0       	breq	.+2      	; 0x2a86 <UART_Admin_Interfacing+0xda2>
    2a84:	5f c9       	rjmp	.-3394   	; 0x1d44 <UART_Admin_Interfacing+0x60>
			}
			
		}
		
	}
	UART_Transmit('\r');
    2a86:	8d e0       	ldi	r24, 0x0D	; 13
    2a88:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
	UART_Transmit('\r');
    2a8c:	8d e0       	ldi	r24, 0x0D	; 13
    2a8e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
	UART_Transmit('\r');
    2a92:	8d e0       	ldi	r24, 0x0D	; 13
    2a94:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
}
    2a98:	03 c0       	rjmp	.+6      	; 0x2aa0 <UART_Admin_Interfacing+0xdbc>
}



void UART_Admin_Interfacing()
{
    2a9a:	91 e0       	ldi	r25, 0x01	; 1
    2a9c:	9c 8f       	std	Y+28, r25	; 0x1c
    2a9e:	52 c9       	rjmp	.-3420   	; 0x1d44 <UART_Admin_Interfacing+0x60>
		
	}
	UART_Transmit('\r');
	UART_Transmit('\r');
	UART_Transmit('\r');
}
    2aa0:	a0 96       	adiw	r28, 0x20	; 32
    2aa2:	0f b6       	in	r0, 0x3f	; 63
    2aa4:	f8 94       	cli
    2aa6:	de bf       	out	0x3e, r29	; 62
    2aa8:	0f be       	out	0x3f, r0	; 63
    2aaa:	cd bf       	out	0x3d, r28	; 61
    2aac:	df 91       	pop	r29
    2aae:	cf 91       	pop	r28
    2ab0:	1f 91       	pop	r17
    2ab2:	0f 91       	pop	r16
    2ab4:	ff 90       	pop	r15
    2ab6:	ef 90       	pop	r14
    2ab8:	df 90       	pop	r13
    2aba:	cf 90       	pop	r12
    2abc:	bf 90       	pop	r11
    2abe:	af 90       	pop	r10
    2ac0:	9f 90       	pop	r9
    2ac2:	8f 90       	pop	r8
    2ac4:	7f 90       	pop	r7
    2ac6:	6f 90       	pop	r6
    2ac8:	5f 90       	pop	r5
    2aca:	4f 90       	pop	r4
    2acc:	3f 90       	pop	r3
    2ace:	2f 90       	pop	r2
    2ad0:	08 95       	ret

00002ad2 <UART_User_Interfacing>:


void UART_User_Interfacing()
{
    2ad2:	cf 93       	push	r28
	unsigned char uart_var = 0;
	unsigned char option = 0;
	unsigned char brightness_level = 0;
	while(option != Ascii_4)
	{
		UART_Send_String ("1. Controlling Lighting (Room 1 to Room 5)");
    2ad4:	8d e0       	ldi	r24, 0x0D	; 13
    2ad6:	94 e0       	ldi	r25, 0x04	; 4
    2ad8:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
		UART_Transmit('\r');
    2adc:	8d e0       	ldi	r24, 0x0D	; 13
    2ade:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		UART_Send_String ("2. Dimming lamp");
    2ae2:	88 e3       	ldi	r24, 0x38	; 56
    2ae4:	94 e0       	ldi	r25, 0x04	; 4
    2ae6:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
		UART_Transmit('\r');
    2aea:	8d e0       	ldi	r24, 0x0D	; 13
    2aec:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		UART_Send_String ("3. Close the Door");
    2af0:	84 e8       	ldi	r24, 0x84	; 132
    2af2:	97 e0       	ldi	r25, 0x07	; 7
    2af4:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
		UART_Transmit('\r');
    2af8:	8d e0       	ldi	r24, 0x0D	; 13
    2afa:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		UART_Send_String ("4. Log out");
    2afe:	86 e9       	ldi	r24, 0x96	; 150
    2b00:	97 e0       	ldi	r25, 0x07	; 7
    2b02:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
		UART_Transmit('\r');
    2b06:	8d e0       	ldi	r24, 0x0D	; 13
    2b08:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		UART_Transmit('\r');
    2b0c:	8d e0       	ldi	r24, 0x0D	; 13
    2b0e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		
		
		UART_Send_String ("Your Choice : ");
    2b12:	82 ed       	ldi	r24, 0xD2	; 210
    2b14:	91 e0       	ldi	r25, 0x01	; 1
    2b16:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
		
		uart_var = 0;
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
		{
			uart_var = UART_Receive();
    2b1a:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
    2b1e:	c8 2f       	mov	r28, r24
			UART_Transmit(uart_var);
    2b20:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Transmit('\r');
    2b24:	8d e0       	ldi	r24, 0x0D	; 13
    2b26:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Transmit('\r');
    2b2a:	8d e0       	ldi	r24, 0x0D	; 13
    2b2c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		
		
		UART_Send_String ("Your Choice : ");
		
		uart_var = 0;
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    2b30:	80 ed       	ldi	r24, 0xD0	; 208
    2b32:	8c 0f       	add	r24, r28
    2b34:	8a 30       	cpi	r24, 0x0A	; 10
    2b36:	88 f7       	brcc	.-30     	; 0x2b1a <UART_User_Interfacing+0x48>
    2b38:	1d c0       	rjmp	.+58     	; 0x2b74 <UART_User_Interfacing+0xa2>
			UART_Transmit('\r');
		}
	
		while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_4)))
		{
			UART_Send_String ("Please Choose only from 1 to 4");
    2b3a:	81 ea       	ldi	r24, 0xA1	; 161
    2b3c:	97 e0       	ldi	r25, 0x07	; 7
    2b3e:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Transmit('\r');
    2b42:	8d e0       	ldi	r24, 0x0D	; 13
    2b44:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Transmit('\r');
    2b48:	8d e0       	ldi	r24, 0x0D	; 13
    2b4a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			uart_var = 0;
			UART_Send_String("Your choice : ");
    2b4e:	8d e3       	ldi	r24, 0x3D	; 61
    2b50:	93 e0       	ldi	r25, 0x03	; 3
    2b52:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
			{
				uart_var = UART_Receive();
    2b56:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
    2b5a:	c8 2f       	mov	r28, r24
				UART_Transmit(uart_var);
    2b5c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				UART_Transmit('\r');
    2b60:	8d e0       	ldi	r24, 0x0D	; 13
    2b62:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				UART_Transmit('\r');
    2b66:	8d e0       	ldi	r24, 0x0D	; 13
    2b68:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Send_String ("Please Choose only from 1 to 4");
			UART_Transmit('\r');
			UART_Transmit('\r');
			uart_var = 0;
			UART_Send_String("Your choice : ");
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    2b6c:	80 ed       	ldi	r24, 0xD0	; 208
    2b6e:	8c 0f       	add	r24, r28
    2b70:	8a 30       	cpi	r24, 0x0A	; 10
    2b72:	88 f7       	brcc	.-30     	; 0x2b56 <UART_User_Interfacing+0x84>
			UART_Transmit(uart_var);
			UART_Transmit('\r');
			UART_Transmit('\r');
		}
	
		while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_4)))
    2b74:	8f ec       	ldi	r24, 0xCF	; 207
    2b76:	8c 0f       	add	r24, r28
    2b78:	84 30       	cpi	r24, 0x04	; 4
    2b7a:	f8 f6       	brcc	.-66     	; 0x2b3a <UART_User_Interfacing+0x68>
			}
		}
		option = uart_var;
	
	
		if(option == '1')
    2b7c:	c1 33       	cpi	r28, 0x31	; 49
    2b7e:	19 f4       	brne	.+6      	; 0x2b86 <UART_User_Interfacing+0xb4>
		{
			UART_Rooms_Leds_Control();
    2b80:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <UART_Rooms_Leds_Control>
    2b84:	a7 cf       	rjmp	.-178    	; 0x2ad4 <UART_User_Interfacing+0x2>
		}
		else if(option == '2')
    2b86:	c2 33       	cpi	r28, 0x32	; 50
    2b88:	09 f0       	breq	.+2      	; 0x2b8c <UART_User_Interfacing+0xba>
    2b8a:	66 c0       	rjmp	.+204    	; 0x2c58 <UART_User_Interfacing+0x186>
		{
			UART_Send_String ("Please Choose one of the following brightness percentages :  ");
    2b8c:	8b ee       	ldi	r24, 0xEB	; 235
    2b8e:	94 e0       	ldi	r25, 0x04	; 4
    2b90:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Transmit('\r');
    2b94:	8d e0       	ldi	r24, 0x0D	; 13
    2b96:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Transmit('\r');
    2b9a:	8d e0       	ldi	r24, 0x0D	; 13
    2b9c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		
			UART_Send_String ("0. 0% (Turn Off Led)");
    2ba0:	89 e2       	ldi	r24, 0x29	; 41
    2ba2:	95 e0       	ldi	r25, 0x05	; 5
    2ba4:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Transmit('\r');
    2ba8:	8d e0       	ldi	r24, 0x0D	; 13
    2baa:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Send_String ("1. 25% ");
    2bae:	8e e3       	ldi	r24, 0x3E	; 62
    2bb0:	95 e0       	ldi	r25, 0x05	; 5
    2bb2:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Transmit('\r');
    2bb6:	8d e0       	ldi	r24, 0x0D	; 13
    2bb8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Send_String ("2. 50% ");
    2bbc:	86 e4       	ldi	r24, 0x46	; 70
    2bbe:	95 e0       	ldi	r25, 0x05	; 5
    2bc0:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Transmit('\r');
    2bc4:	8d e0       	ldi	r24, 0x0D	; 13
    2bc6:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Send_String ("3. 75% ");
    2bca:	8e e4       	ldi	r24, 0x4E	; 78
    2bcc:	95 e0       	ldi	r25, 0x05	; 5
    2bce:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Transmit('\r');
    2bd2:	8d e0       	ldi	r24, 0x0D	; 13
    2bd4:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Send_String ("4. 100%  (Maximum Power)");
    2bd8:	86 e5       	ldi	r24, 0x56	; 86
    2bda:	95 e0       	ldi	r25, 0x05	; 5
    2bdc:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Transmit('\r');
    2be0:	8d e0       	ldi	r24, 0x0D	; 13
    2be2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
		
			UART_Send_String("Your choice : ");
    2be6:	8d e3       	ldi	r24, 0x3D	; 61
    2be8:	93 e0       	ldi	r25, 0x03	; 3
    2bea:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			uart_var = 0;
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
			{
				uart_var = UART_Receive();
    2bee:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
    2bf2:	c8 2f       	mov	r28, r24
				UART_Transmit(uart_var);
    2bf4:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				UART_Transmit('\r');
    2bf8:	8d e0       	ldi	r24, 0x0D	; 13
    2bfa:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				UART_Transmit('\r');
    2bfe:	8d e0       	ldi	r24, 0x0D	; 13
    2c00:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
			UART_Send_String ("4. 100%  (Maximum Power)");
			UART_Transmit('\r');
		
			UART_Send_String("Your choice : ");
			uart_var = 0;
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    2c04:	80 ed       	ldi	r24, 0xD0	; 208
    2c06:	8c 0f       	add	r24, r28
    2c08:	8a 30       	cpi	r24, 0x0A	; 10
    2c0a:	88 f7       	brcc	.-30     	; 0x2bee <UART_User_Interfacing+0x11c>
    2c0c:	1d c0       	rjmp	.+58     	; 0x2c48 <UART_User_Interfacing+0x176>
				UART_Transmit('\r');
			}
		
			while (!((uart_var >= Ascii_0) && (uart_var <= Ascii_4)))
			{
				UART_Send_String ("Please Choose only from 0 to 4");
    2c0e:	8f e6       	ldi	r24, 0x6F	; 111
    2c10:	95 e0       	ldi	r25, 0x05	; 5
    2c12:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
				UART_Transmit('\r');
    2c16:	8d e0       	ldi	r24, 0x0D	; 13
    2c18:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				UART_Transmit('\r');
    2c1c:	8d e0       	ldi	r24, 0x0D	; 13
    2c1e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				uart_var = 0;
				UART_Send_String("Your choice : ");
    2c22:	8d e3       	ldi	r24, 0x3D	; 61
    2c24:	93 e0       	ldi	r25, 0x03	; 3
    2c26:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
				{
					uart_var = UART_Receive();
    2c2a:	0e 94 b6 0c 	call	0x196c	; 0x196c <UART_Receive>
    2c2e:	c8 2f       	mov	r28, r24
					UART_Transmit(uart_var);
    2c30:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Transmit('\r');
    2c34:	8d e0       	ldi	r24, 0x0D	; 13
    2c36:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
					UART_Transmit('\r');
    2c3a:	8d e0       	ldi	r24, 0x0D	; 13
    2c3c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <UART_Transmit>
				UART_Send_String ("Please Choose only from 0 to 4");
				UART_Transmit('\r');
				UART_Transmit('\r');
				uart_var = 0;
				UART_Send_String("Your choice : ");
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    2c40:	80 ed       	ldi	r24, 0xD0	; 208
    2c42:	8c 0f       	add	r24, r28
    2c44:	8a 30       	cpi	r24, 0x0A	; 10
    2c46:	88 f7       	brcc	.-30     	; 0x2c2a <UART_User_Interfacing+0x158>
				UART_Transmit(uart_var);
				UART_Transmit('\r');
				UART_Transmit('\r');
			}
		
			while (!((uart_var >= Ascii_0) && (uart_var <= Ascii_4)))
    2c48:	80 ed       	ldi	r24, 0xD0	; 208
    2c4a:	8c 0f       	add	r24, r28
    2c4c:	85 30       	cpi	r24, 0x05	; 5
    2c4e:	f8 f6       	brcc	.-66     	; 0x2c0e <UART_User_Interfacing+0x13c>
				}
			}
		
			brightness_level = uart_var;
			uart_var = 0;
			DIMMER_CONTROL(brightness_level);	
    2c50:	8c 2f       	mov	r24, r28
    2c52:	0e 94 37 0b 	call	0x166e	; 0x166e <DIMMER_CONTROL>
    2c56:	3e cf       	rjmp	.-388    	; 0x2ad4 <UART_User_Interfacing+0x2>
		}
	
	
		else if(option == '3')
    2c58:	c3 33       	cpi	r28, 0x33	; 51
    2c5a:	09 f5       	brne	.+66     	; 0x2c9e <UART_User_Interfacing+0x1cc>
		{
			closeDoor();
    2c5c:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <closeDoor>
			UART_Send_String("The door is closed");
    2c60:	8f ea       	ldi	r24, 0xAF	; 175
    2c62:	95 e0       	ldi	r25, 0x05	; 5
    2c64:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
			UART_Send_String("\r");
    2c68:	8e e8       	ldi	r24, 0x8E	; 142
    2c6a:	95 e0       	ldi	r25, 0x05	; 5
    2c6c:	0e 94 be 0c 	call	0x197c	; 0x197c <UART_Send_String>
		
			LCD_Write_String("  The door is");
    2c70:	8a ea       	ldi	r24, 0xAA	; 170
    2c72:	92 e0       	ldi	r25, 0x02	; 2
    2c74:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    2c78:	80 ec       	ldi	r24, 0xC0	; 192
    2c7a:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_Send_CMD>
			LCD_Write_String("    Closed");
    2c7e:	88 eb       	ldi	r24, 0xB8	; 184
    2c80:	92 e0       	ldi	r25, 0x02	; 2
    2c82:	0e 94 11 07 	call	0xe22	; 0xe22 <LCD_Write_String>
    2c86:	2f ef       	ldi	r18, 0xFF	; 255
    2c88:	83 ed       	ldi	r24, 0xD3	; 211
    2c8a:	90 e3       	ldi	r25, 0x30	; 48
    2c8c:	21 50       	subi	r18, 0x01	; 1
    2c8e:	80 40       	sbci	r24, 0x00	; 0
    2c90:	90 40       	sbci	r25, 0x00	; 0
    2c92:	e1 f7       	brne	.-8      	; 0x2c8c <UART_User_Interfacing+0x1ba>
    2c94:	00 c0       	rjmp	.+0      	; 0x2c96 <UART_User_Interfacing+0x1c4>
    2c96:	00 00       	nop
			_delay_ms(1000);
			LCD_Clear_Screen();
    2c98:	0e 94 3d 07 	call	0xe7a	; 0xe7a <LCD_Clear_Screen>
    2c9c:	1b cf       	rjmp	.-458    	; 0x2ad4 <UART_User_Interfacing+0x2>
void UART_User_Interfacing()
{
	unsigned char uart_var = 0;
	unsigned char option = 0;
	unsigned char brightness_level = 0;
	while(option != Ascii_4)
    2c9e:	c4 33       	cpi	r28, 0x34	; 52
    2ca0:	09 f0       	breq	.+2      	; 0x2ca4 <UART_User_Interfacing+0x1d2>
    2ca2:	18 cf       	rjmp	.-464    	; 0x2ad4 <UART_User_Interfacing+0x2>
	
		else
		{
		}
	}
}
    2ca4:	cf 91       	pop	r28
    2ca6:	08 95       	ret

00002ca8 <_exit>:
    2ca8:	f8 94       	cli

00002caa <__stop_program>:
    2caa:	ff cf       	rjmp	.-2      	; 0x2caa <__stop_program>
