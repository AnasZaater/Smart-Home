
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c02  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000075c  00800060  00002c02  00002c76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000033d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003404  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000390  00000000  00000000  00003440  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007a0b  00000000  00000000  000037d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000015b8  00000000  00000000  0000b1db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000039f7  00000000  00000000  0000c793  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007e0  00000000  00000000  0001018c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a7e  00000000  00000000  0001096c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000049ae  00000000  00000000  000113ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000328  00000000  00000000  00015d98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	17 e0       	ldi	r17, 0x07	; 7
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3b       	cpi	r26, 0xBC	; 188
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	27 e0       	ldi	r18, 0x07	; 7
      78:	ac eb       	ldi	r26, 0xBC	; 188
      7a:	b7 e0       	ldi	r27, 0x07	; 7
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3b       	cpi	r26, 0xBC	; 188
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <main>
      8a:	0c 94 ff 15 	jmp	0x2bfe	; 0x2bfe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <AC_Initialization>:
      92:	8b 9a       	sbi	0x11, 3	; 17
      94:	8c 9a       	sbi	0x11, 4	; 17
      96:	94 98       	cbi	0x12, 4	; 18
      98:	08 95       	ret

0000009a <AC_Alarm>:
      9a:	97 9a       	sbi	0x12, 7	; 18
      9c:	98 b3       	in	r25, 0x18	; 24
      9e:	84 e0       	ldi	r24, 0x04	; 4
      a0:	89 27       	eor	r24, r25
      a2:	88 bb       	out	0x18, r24	; 24
      a4:	08 95       	ret

000000a6 <AC_ON>:
      a6:	0e 94 74 00 	call	0xe8	; 0xe8 <ADC_READ>
      aa:	8b 32       	cpi	r24, 0x2B	; 43
      ac:	91 05       	cpc	r25, r1
      ae:	24 f4       	brge	.+8      	; 0xb8 <AC_ON+0x12>
      b0:	93 98       	cbi	0x12, 3	; 18
      b2:	97 98       	cbi	0x12, 7	; 18
      b4:	c2 98       	cbi	0x18, 2	; 24
      b6:	08 95       	ret
      b8:	9c 01       	movw	r18, r24
      ba:	29 53       	subi	r18, 0x39	; 57
      bc:	31 09       	sbc	r19, r1
      be:	29 31       	cpi	r18, 0x19	; 25
      c0:	31 05       	cpc	r19, r1
      c2:	20 f4       	brcc	.+8      	; 0xcc <AC_ON+0x26>
      c4:	93 9a       	sbi	0x12, 3	; 18
      c6:	97 98       	cbi	0x12, 7	; 18
      c8:	c2 98       	cbi	0x18, 2	; 24
      ca:	08 95       	ret
      cc:	83 35       	cpi	r24, 0x53	; 83
      ce:	91 05       	cpc	r25, r1
      d0:	1c f0       	brlt	.+6      	; 0xd8 <AC_ON+0x32>
      d2:	93 98       	cbi	0x12, 3	; 18
      d4:	0e 94 4d 00 	call	0x9a	; 0x9a <AC_Alarm>
      d8:	08 95       	ret

000000da <ADC_Start>:
      da:	37 9a       	sbi	0x06, 7	; 6
      dc:	3e 9a       	sbi	0x07, 6	; 7
      de:	97 b1       	in	r25, 0x07	; 7
      e0:	89 2b       	or	r24, r25
      e2:	87 b9       	out	0x07, r24	; 7
      e4:	32 9a       	sbi	0x06, 2	; 6
      e6:	08 95       	ret

000000e8 <ADC_READ>:
      e8:	36 9a       	sbi	0x06, 6	; 6
      ea:	34 9b       	sbis	0x06, 4	; 6
      ec:	fe cf       	rjmp	.-4      	; 0xea <ADC_READ+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ee:	85 e3       	ldi	r24, 0x35	; 53
      f0:	8a 95       	dec	r24
      f2:	f1 f7       	brne	.-4      	; 0xf0 <ADC_READ+0x8>
      f4:	00 00       	nop
      f6:	24 b1       	in	r18, 0x04	; 4
      f8:	85 b1       	in	r24, 0x05	; 5
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	98 2f       	mov	r25, r24
      fe:	88 27       	eor	r24, r24
     100:	82 0f       	add	r24, r18
     102:	91 1d       	adc	r25, r1
     104:	08 95       	ret

00000106 <__vector_1>:
#include "LCD_Apps.h"



ISR(INT0_vect) // LCD and Keypad interfacing
{
     106:	1f 92       	push	r1
     108:	0f 92       	push	r0
     10a:	0f b6       	in	r0, 0x3f	; 63
     10c:	0f 92       	push	r0
     10e:	11 24       	eor	r1, r1
     110:	5f 92       	push	r5
     112:	6f 92       	push	r6
     114:	7f 92       	push	r7
     116:	8f 92       	push	r8
     118:	9f 92       	push	r9
     11a:	af 92       	push	r10
     11c:	bf 92       	push	r11
     11e:	cf 92       	push	r12
     120:	df 92       	push	r13
     122:	ef 92       	push	r14
     124:	ff 92       	push	r15
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	2f 93       	push	r18
     12c:	3f 93       	push	r19
     12e:	4f 93       	push	r20
     130:	5f 93       	push	r21
     132:	6f 93       	push	r22
     134:	7f 93       	push	r23
     136:	8f 93       	push	r24
     138:	9f 93       	push	r25
     13a:	af 93       	push	r26
     13c:	bf 93       	push	r27
     13e:	ef 93       	push	r30
     140:	ff 93       	push	r31
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	cd b7       	in	r28, 0x3d	; 61
     148:	de b7       	in	r29, 0x3e	; 62
     14a:	61 97       	sbiw	r28, 0x11	; 17
     14c:	de bf       	out	0x3e, r29	; 62
     14e:	cd bf       	out	0x3d, r28	; 61
	unsigned char Keypad_Value = 0; //Stores pressed button
	char user_counter = 0; //Counter stores number of users
     150:	19 82       	std	Y+1, r1	; 0x01
	char username_temp_arr[4];	// array taken from EEPROM to compare
	char password_temp_arr[4];	// array taken from EEPROM to compare
	unsigned char looping_counter = 0;
	unsigned char Compare_Var = 0; //variable indicates the success or failure of comparing profile entered with the one stored
	
	LCD_Welcome_Message(); //Displays a welcome message
     152:	0e 94 7d 07 	call	0xefa	; 0xefa <LCD_Welcome_Message>
	
	EEPROM_readByte(Counters_Block,Users_LCD_number_BIT,&user_counter); //Reads the number of user present NOW in the system
     156:	ae 01       	movw	r20, r28
     158:	4f 5f       	subi	r20, 0xFF	; 255
     15a:	5f 4f       	sbci	r21, 0xFF	; 255
     15c:	63 e0       	ldi	r22, 0x03	; 3
     15e:	8e ea       	ldi	r24, 0xAE	; 174
     160:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     164:	8f e3       	ldi	r24, 0x3F	; 63
     166:	9c e9       	ldi	r25, 0x9C	; 156
     168:	01 97       	sbiw	r24, 0x01	; 1
     16a:	f1 f7       	brne	.-4      	; 0x168 <__vector_1+0x62>
     16c:	00 c0       	rjmp	.+0      	; 0x16e <__vector_1+0x68>
     16e:	00 00       	nop
     170:	68 94       	set
     172:	99 24       	eor	r9, r9
     174:	91 f8       	bld	r9, 1
     176:	5e 01       	movw	r10, r28
     178:	96 e0       	ldi	r25, 0x06	; 6
     17a:	a9 0e       	add	r10, r25
     17c:	b1 1c       	adc	r11, r1
				EEPROM_readByte(LCD_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
				_delay_ms(10);
			}
			
			
			if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1')) //compares the username and password
     17e:	7a 2c       	mov	r7, r10
     180:	8b 2c       	mov	r8, r11
     182:	01 c0       	rjmp	.+2      	; 0x186 <__vector_1+0x80>
	
	EEPROM_readByte(Counters_Block,Users_LCD_number_BIT,&user_counter); //Reads the number of user present NOW in the system
	_delay_ms(10);
	
	trials = 3;
	while(trials>=1 && trials<=3) //Looping as long as the trials are greater than or equal 1 and smaller than or equal 3
     184:	98 2e       	mov	r9, r24
     186:	66 24       	eor	r6, r6
     188:	63 94       	inc	r6
     18a:	69 0c       	add	r6, r9
	{
			//-----------------	Writing the username -----------------
			LCD_Write_String("Username : ");
     18c:	8d ea       	ldi	r24, 0xAD	; 173
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Display_ON_Cusror_ON_Blink_OFF);
     194:	8e e0       	ldi	r24, 0x0E	; 14
     196:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
     19a:	7e 01       	movw	r14, r28
     19c:	e2 e0       	ldi	r30, 0x02	; 2
     19e:	ee 0e       	add	r14, r30
     1a0:	f1 1c       	adc	r15, r1
			looping_counter = 0;
			while(looping_counter < 4) // To allow for writing of 4 digits
			{
				while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9)) //Storing the written values by user
				{
					Keypad_Value = Keypad_Get_Value();
     1a2:	0e 94 c8 05 	call	0xb90	; 0xb90 <Keypad_Get_Value>
     1a6:	18 2f       	mov	r17, r24
					AC_ON();
     1a8:	0e 94 53 00 	call	0xa6	; 0xa6 <AC_ON>
			LCD_Write_String("Username : ");
			LCD_Send_CMD(Display_ON_Cusror_ON_Blink_OFF);
			looping_counter = 0;
			while(looping_counter < 4) // To allow for writing of 4 digits
			{
				while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9)) //Storing the written values by user
     1ac:	80 ed       	ldi	r24, 0xD0	; 208
     1ae:	81 0f       	add	r24, r17
     1b0:	8a 30       	cpi	r24, 0x0A	; 10
     1b2:	b8 f7       	brcc	.-18     	; 0x1a2 <__vector_1+0x9c>
				{
					Keypad_Value = Keypad_Get_Value();
					AC_ON();
				}
				
				username_arr[looping_counter] = Keypad_Value;
     1b4:	f7 01       	movw	r30, r14
     1b6:	11 93       	st	Z+, r17
     1b8:	7f 01       	movw	r14, r30
				if(looping_counter == 3)
     1ba:	ea 15       	cp	r30, r10
     1bc:	fb 05       	cpc	r31, r11
     1be:	39 f5       	brne	.+78     	; 0x20e <__vector_1+0x108>
				{
					LCD_Send_CMD(Display_ON_Cusror_OFF_Blink_OFF);
     1c0:	8c e0       	ldi	r24, 0x0C	; 12
     1c2:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
				}
				LCD_Write_Char(Keypad_Value);
     1c6:	81 2f       	mov	r24, r17
     1c8:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Write_Char>
     1cc:	ff ef       	ldi	r31, 0xFF	; 255
     1ce:	25 ea       	ldi	r18, 0xA5	; 165
     1d0:	8e e0       	ldi	r24, 0x0E	; 14
     1d2:	f1 50       	subi	r31, 0x01	; 1
     1d4:	20 40       	sbci	r18, 0x00	; 0
     1d6:	80 40       	sbci	r24, 0x00	; 0
     1d8:	e1 f7       	brne	.-8      	; 0x1d2 <__vector_1+0xcc>
     1da:	00 c0       	rjmp	.+0      	; 0x1dc <__vector_1+0xd6>
     1dc:	00 00       	nop
     1de:	9f ef       	ldi	r25, 0xFF	; 255
     1e0:	e9 e6       	ldi	r30, 0x69	; 105
     1e2:	f8 e1       	ldi	r31, 0x18	; 24
     1e4:	91 50       	subi	r25, 0x01	; 1
     1e6:	e0 40       	sbci	r30, 0x00	; 0
     1e8:	f0 40       	sbci	r31, 0x00	; 0
     1ea:	e1 f7       	brne	.-8      	; 0x1e4 <__vector_1+0xde>
     1ec:	00 c0       	rjmp	.+0      	; 0x1ee <__vector_1+0xe8>
     1ee:	00 00       	nop
				_delay_ms(300);
				looping_counter++;
				Keypad_Value = 0;
			}
			_delay_ms(500);
			LCD_Clear_Screen();
     1f0:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
			looping_counter = 0;
			
			//-----------------	Writing the password -----------------
			
			LCD_Write_String ("Password: ");
     1f4:	80 e7       	ldi	r24, 0x70	; 112
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Display_ON_Cusror_ON_Blink_OFF);
     1fc:	8e e0       	ldi	r24, 0x0E	; 14
     1fe:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
     202:	7e 01       	movw	r14, r28
     204:	26 e0       	ldi	r18, 0x06	; 6
     206:	e2 0e       	add	r14, r18
     208:	f1 1c       	adc	r15, r1
				looping_counter++;
				Keypad_Value = 0;
			}
			_delay_ms(500);
			LCD_Clear_Screen();
			looping_counter = 0;
     20a:	00 e0       	ldi	r16, 0x00	; 0
     20c:	0d c0       	rjmp	.+26     	; 0x228 <__vector_1+0x122>
				username_arr[looping_counter] = Keypad_Value;
				if(looping_counter == 3)
				{
					LCD_Send_CMD(Display_ON_Cusror_OFF_Blink_OFF);
				}
				LCD_Write_Char(Keypad_Value);
     20e:	81 2f       	mov	r24, r17
     210:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Write_Char>
     214:	8f ef       	ldi	r24, 0xFF	; 255
     216:	95 ea       	ldi	r25, 0xA5	; 165
     218:	ee e0       	ldi	r30, 0x0E	; 14
     21a:	81 50       	subi	r24, 0x01	; 1
     21c:	90 40       	sbci	r25, 0x00	; 0
     21e:	e0 40       	sbci	r30, 0x00	; 0
     220:	e1 f7       	brne	.-8      	; 0x21a <__vector_1+0x114>
     222:	00 c0       	rjmp	.+0      	; 0x224 <__vector_1+0x11e>
     224:	00 00       	nop
     226:	bd cf       	rjmp	.-134    	; 0x1a2 <__vector_1+0x9c>
			
			while(looping_counter < 4)
			{
				while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
				{
					Keypad_Value = Keypad_Get_Value();
     228:	0e 94 c8 05 	call	0xb90	; 0xb90 <Keypad_Get_Value>
     22c:	18 2f       	mov	r17, r24
					AC_ON();
     22e:	0e 94 53 00 	call	0xa6	; 0xa6 <AC_ON>
			LCD_Write_String ("Password: ");
			LCD_Send_CMD(Display_ON_Cusror_ON_Blink_OFF);
			
			while(looping_counter < 4)
			{
				while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
     232:	80 ed       	ldi	r24, 0xD0	; 208
     234:	81 0f       	add	r24, r17
     236:	8a 30       	cpi	r24, 0x0A	; 10
     238:	b8 f7       	brcc	.-18     	; 0x228 <__vector_1+0x122>
				{
					Keypad_Value = Keypad_Get_Value();
					AC_ON();
				}
				
				password_arr[looping_counter] = Keypad_Value;
     23a:	f7 01       	movw	r30, r14
     23c:	11 93       	st	Z+, r17
     23e:	7f 01       	movw	r14, r30
				if(looping_counter == 3)
     240:	03 30       	cpi	r16, 0x03	; 3
     242:	01 f5       	brne	.+64     	; 0x284 <__vector_1+0x17e>
				{
					LCD_Send_CMD(Display_ON_Cusror_OFF_Blink_OFF);
     244:	8c e0       	ldi	r24, 0x0C	; 12
     246:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
				}
				LCD_Write_Char(Keypad_Value);
     24a:	81 2f       	mov	r24, r17
     24c:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Write_Char>
     250:	ff ef       	ldi	r31, 0xFF	; 255
     252:	27 e8       	ldi	r18, 0x87	; 135
     254:	83 e1       	ldi	r24, 0x13	; 19
     256:	f1 50       	subi	r31, 0x01	; 1
     258:	20 40       	sbci	r18, 0x00	; 0
     25a:	80 40       	sbci	r24, 0x00	; 0
     25c:	e1 f7       	brne	.-8      	; 0x256 <__vector_1+0x150>
     25e:	00 c0       	rjmp	.+0      	; 0x260 <__vector_1+0x15a>
     260:	00 00       	nop
				_delay_ms(400);
				LCD_Set_Cursor(0,strlen("Password: ") + looping_counter);
     262:	6d e0       	ldi	r22, 0x0D	; 13
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	0e 94 c2 06 	call	0xd84	; 0xd84 <LCD_Set_Cursor>
				LCD_Write_Char('*');
     26a:	8a e2       	ldi	r24, 0x2A	; 42
     26c:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Write_Char>
     270:	9f ef       	ldi	r25, 0xFF	; 255
     272:	e1 ee       	ldi	r30, 0xE1	; 225
     274:	f4 e0       	ldi	r31, 0x04	; 4
     276:	91 50       	subi	r25, 0x01	; 1
     278:	e0 40       	sbci	r30, 0x00	; 0
     27a:	f0 40       	sbci	r31, 0x00	; 0
     27c:	e1 f7       	brne	.-8      	; 0x276 <__vector_1+0x170>
     27e:	00 c0       	rjmp	.+0      	; 0x280 <__vector_1+0x17a>
     280:	00 00       	nop
     282:	21 c0       	rjmp	.+66     	; 0x2c6 <__vector_1+0x1c0>
				password_arr[looping_counter] = Keypad_Value;
				if(looping_counter == 3)
				{
					LCD_Send_CMD(Display_ON_Cusror_OFF_Blink_OFF);
				}
				LCD_Write_Char(Keypad_Value);
     284:	81 2f       	mov	r24, r17
     286:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Write_Char>
     28a:	2f ef       	ldi	r18, 0xFF	; 255
     28c:	87 e8       	ldi	r24, 0x87	; 135
     28e:	93 e1       	ldi	r25, 0x13	; 19
     290:	21 50       	subi	r18, 0x01	; 1
     292:	80 40       	sbci	r24, 0x00	; 0
     294:	90 40       	sbci	r25, 0x00	; 0
     296:	e1 f7       	brne	.-8      	; 0x290 <__vector_1+0x18a>
     298:	00 c0       	rjmp	.+0      	; 0x29a <__vector_1+0x194>
     29a:	00 00       	nop
				_delay_ms(400);
				LCD_Set_Cursor(0,strlen("Password: ") + looping_counter);
     29c:	6a e0       	ldi	r22, 0x0A	; 10
     29e:	60 0f       	add	r22, r16
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	0e 94 c2 06 	call	0xd84	; 0xd84 <LCD_Set_Cursor>
				LCD_Write_Char('*');
     2a6:	8a e2       	ldi	r24, 0x2A	; 42
     2a8:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Write_Char>
     2ac:	ef ef       	ldi	r30, 0xFF	; 255
     2ae:	f1 ee       	ldi	r31, 0xE1	; 225
     2b0:	24 e0       	ldi	r18, 0x04	; 4
     2b2:	e1 50       	subi	r30, 0x01	; 1
     2b4:	f0 40       	sbci	r31, 0x00	; 0
     2b6:	20 40       	sbci	r18, 0x00	; 0
     2b8:	e1 f7       	brne	.-8      	; 0x2b2 <__vector_1+0x1ac>
     2ba:	00 c0       	rjmp	.+0      	; 0x2bc <__vector_1+0x1b6>
     2bc:	00 00       	nop
				_delay_ms(100);
				looping_counter++;
     2be:	0f 5f       	subi	r16, 0xFF	; 255
			//-----------------	Writing the password -----------------
			
			LCD_Write_String ("Password: ");
			LCD_Send_CMD(Display_ON_Cusror_ON_Blink_OFF);
			
			while(looping_counter < 4)
     2c0:	04 30       	cpi	r16, 0x04	; 4
     2c2:	09 f0       	breq	.+2      	; 0x2c6 <__vector_1+0x1c0>
     2c4:	b1 cf       	rjmp	.-158    	; 0x228 <__vector_1+0x122>
     2c6:	8f ef       	ldi	r24, 0xFF	; 255
     2c8:	99 e6       	ldi	r25, 0x69	; 105
     2ca:	e8 e1       	ldi	r30, 0x18	; 24
     2cc:	81 50       	subi	r24, 0x01	; 1
     2ce:	90 40       	sbci	r25, 0x00	; 0
     2d0:	e0 40       	sbci	r30, 0x00	; 0
     2d2:	e1 f7       	brne	.-8      	; 0x2cc <__vector_1+0x1c6>
     2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <__vector_1+0x1d0>
     2d6:	00 00       	nop
				_delay_ms(100);
				looping_counter++;
				Keypad_Value = 0;
			}
			_delay_ms(500);
			LCD_Clear_Screen();
     2d8:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
			looping_counter = 0;
		for (looping_counter = 0; looping_counter < user_counter; looping_counter++) //Reads the users using keypad and LCD to find the entered user
     2dc:	89 81       	ldd	r24, Y+1	; 0x01
     2de:	81 11       	cpse	r24, r1
     2e0:	4b c0       	rjmp	.+150    	; 0x378 <__vector_1+0x272>
     2e2:	57 c0       	rjmp	.+174    	; 0x392 <__vector_1+0x28c>
		{			
			for(int i = 0; i<LOGIN_SIZE; i++) //reads the users and stores in a temporarily array 
			{
				EEPROM_readByte(LCD_User_Username_Block,(4*looping_counter)+i,&username_temp_arr[i]);
     2e4:	a6 01       	movw	r20, r12
     2e6:	61 2f       	mov	r22, r17
     2e8:	8a ea       	ldi	r24, 0xAA	; 170
     2ea:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
     2ee:	8f e3       	ldi	r24, 0x3F	; 63
     2f0:	9c e9       	ldi	r25, 0x9C	; 156
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	f1 f7       	brne	.-4      	; 0x2f2 <__vector_1+0x1ec>
     2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <__vector_1+0x1f2>
     2f8:	00 00       	nop
				_delay_ms(10);
				EEPROM_readByte(LCD_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
     2fa:	a7 01       	movw	r20, r14
     2fc:	61 2f       	mov	r22, r17
     2fe:	8c ea       	ldi	r24, 0xAC	; 172
     300:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
     304:	ef e3       	ldi	r30, 0x3F	; 63
     306:	fc e9       	ldi	r31, 0x9C	; 156
     308:	31 97       	sbiw	r30, 0x01	; 1
     30a:	f1 f7       	brne	.-4      	; 0x308 <__vector_1+0x202>
     30c:	00 c0       	rjmp	.+0      	; 0x30e <__vector_1+0x208>
     30e:	00 00       	nop
     310:	1f 5f       	subi	r17, 0xFF	; 255
     312:	ff ef       	ldi	r31, 0xFF	; 255
     314:	cf 1a       	sub	r12, r31
     316:	df 0a       	sbc	r13, r31
     318:	2f ef       	ldi	r18, 0xFF	; 255
     31a:	e2 1a       	sub	r14, r18
     31c:	f2 0a       	sbc	r15, r18
			_delay_ms(500);
			LCD_Clear_Screen();
			looping_counter = 0;
		for (looping_counter = 0; looping_counter < user_counter; looping_counter++) //Reads the users using keypad and LCD to find the entered user
		{			
			for(int i = 0; i<LOGIN_SIZE; i++) //reads the users and stores in a temporarily array 
     31e:	10 13       	cpse	r17, r16
     320:	e1 cf       	rjmp	.-62     	; 0x2e4 <__vector_1+0x1de>
				EEPROM_readByte(LCD_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
				_delay_ms(10);
			}
			
			
			if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1')) //compares the username and password
     322:	44 e0       	ldi	r20, 0x04	; 4
     324:	be 01       	movw	r22, r28
     326:	66 5f       	subi	r22, 0xF6	; 246
     328:	7f 4f       	sbci	r23, 0xFF	; 255
     32a:	ce 01       	movw	r24, r28
     32c:	02 96       	adiw	r24, 0x02	; 2
     32e:	0e 94 ac 04 	call	0x958	; 0x958 <Compare_Passwords>
     332:	81 33       	cpi	r24, 0x31	; 49
     334:	d9 f4       	brne	.+54     	; 0x36c <__vector_1+0x266>
     336:	44 e0       	ldi	r20, 0x04	; 4
     338:	be 01       	movw	r22, r28
     33a:	62 5f       	subi	r22, 0xF2	; 242
     33c:	7f 4f       	sbci	r23, 0xFF	; 255
     33e:	87 2d       	mov	r24, r7
     340:	98 2d       	mov	r25, r8
     342:	0e 94 ac 04 	call	0x958	; 0x958 <Compare_Passwords>
     346:	81 33       	cpi	r24, 0x31	; 49
     348:	89 f4       	brne	.+34     	; 0x36c <__vector_1+0x266>
			{
				LCD_Write_String("Access Granted");
     34a:	8b e7       	ldi	r24, 0x7B	; 123
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
     352:	8f ef       	ldi	r24, 0xFF	; 255
     354:	99 e6       	ldi	r25, 0x69	; 105
     356:	e8 e1       	ldi	r30, 0x18	; 24
     358:	81 50       	subi	r24, 0x01	; 1
     35a:	90 40       	sbci	r25, 0x00	; 0
     35c:	e0 40       	sbci	r30, 0x00	; 0
     35e:	e1 f7       	brne	.-8      	; 0x358 <__vector_1+0x252>
     360:	00 c0       	rjmp	.+0      	; 0x362 <__vector_1+0x25c>
     362:	00 00       	nop
				_delay_ms(500);
				LCD_Clear_Screen();
     364:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
     368:	96 2c       	mov	r9, r6
     36a:	32 c0       	rjmp	.+100    	; 0x3d0 <__vector_1+0x2ca>
				Keypad_Value = 0;
			}
			_delay_ms(500);
			LCD_Clear_Screen();
			looping_counter = 0;
		for (looping_counter = 0; looping_counter < user_counter; looping_counter++) //Reads the users using keypad and LCD to find the entered user
     36c:	53 94       	inc	r5
     36e:	10 2f       	mov	r17, r16
     370:	89 81       	ldd	r24, Y+1	; 0x01
     372:	58 16       	cp	r5, r24
     374:	18 f0       	brcs	.+6      	; 0x37c <__vector_1+0x276>
     376:	0d c0       	rjmp	.+26     	; 0x392 <__vector_1+0x28c>
     378:	10 e0       	ldi	r17, 0x00	; 0
     37a:	51 2c       	mov	r5, r1
     37c:	6e 01       	movw	r12, r28
     37e:	fa e0       	ldi	r31, 0x0A	; 10
     380:	cf 0e       	add	r12, r31
     382:	d1 1c       	adc	r13, r1
     384:	7e 01       	movw	r14, r28
     386:	2e e0       	ldi	r18, 0x0E	; 14
     388:	e2 0e       	add	r14, r18
     38a:	f1 1c       	adc	r15, r1
     38c:	04 e0       	ldi	r16, 0x04	; 4
     38e:	01 0f       	add	r16, r17
     390:	a9 cf       	rjmp	.-174    	; 0x2e4 <__vector_1+0x1de>

		if(Compare_Var == 0) //Entered user is not found and the allowable trials decreases by 1
		{
			trials--;
			
			LCD_Write_String("Access Denied");
     392:	8a e8       	ldi	r24, 0x8A	; 138
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
     39a:	80 ec       	ldi	r24, 0xC0	; 192
     39c:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			
			LCD_Write_String("Trials Left : ");
     3a0:	88 e9       	ldi	r24, 0x98	; 152
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Write_Char(trials+0x30);
     3a8:	80 e3       	ldi	r24, 0x30	; 48
     3aa:	89 0d       	add	r24, r9
     3ac:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Write_Char>
     3b0:	8f ef       	ldi	r24, 0xFF	; 255
     3b2:	99 e6       	ldi	r25, 0x69	; 105
     3b4:	e8 e1       	ldi	r30, 0x18	; 24
     3b6:	81 50       	subi	r24, 0x01	; 1
     3b8:	90 40       	sbci	r25, 0x00	; 0
     3ba:	e0 40       	sbci	r30, 0x00	; 0
     3bc:	e1 f7       	brne	.-8      	; 0x3b6 <__vector_1+0x2b0>
     3be:	00 c0       	rjmp	.+0      	; 0x3c0 <__vector_1+0x2ba>
     3c0:	00 00       	nop
			
			_delay_ms(500);
			LCD_Clear_Screen();
     3c2:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
	
	EEPROM_readByte(Counters_Block,Users_LCD_number_BIT,&user_counter); //Reads the number of user present NOW in the system
	_delay_ms(10);
	
	trials = 3;
	while(trials>=1 && trials<=3) //Looping as long as the trials are greater than or equal 1 and smaller than or equal 3
     3c6:	8f ef       	ldi	r24, 0xFF	; 255
     3c8:	89 0d       	add	r24, r9
     3ca:	83 30       	cpi	r24, 0x03	; 3
     3cc:	08 f4       	brcc	.+2      	; 0x3d0 <__vector_1+0x2ca>
     3ce:	da ce       	rjmp	.-588    	; 0x184 <__vector_1+0x7e>
			break;
		}

	}
			
	if(trials == 0)
     3d0:	91 10       	cpse	r9, r1
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <__vector_1+0x2d2>
	{
		Alarm_On ();
     3d4:	0e 94 ac 0a 	call	0x1558	; 0x1558 <Alarm_On>
	}		
	
	LCD_User_Interfacing();
     3d8:	0e 94 2e 09 	call	0x125c	; 0x125c <LCD_User_Interfacing>
     3dc:	ff ef       	ldi	r31, 0xFF	; 255
     3de:	20 e7       	ldi	r18, 0x70	; 112
     3e0:	82 e0       	ldi	r24, 0x02	; 2
     3e2:	f1 50       	subi	r31, 0x01	; 1
     3e4:	20 40       	sbci	r18, 0x00	; 0
     3e6:	80 40       	sbci	r24, 0x00	; 0
     3e8:	e1 f7       	brne	.-8      	; 0x3e2 <__vector_1+0x2dc>
     3ea:	00 c0       	rjmp	.+0      	; 0x3ec <__vector_1+0x2e6>
     3ec:	00 00       	nop
	_delay_ms(50);
}
     3ee:	61 96       	adiw	r28, 0x11	; 17
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	f8 94       	cli
     3f4:	de bf       	out	0x3e, r29	; 62
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	cd bf       	out	0x3d, r28	; 61
     3fa:	df 91       	pop	r29
     3fc:	cf 91       	pop	r28
     3fe:	ff 91       	pop	r31
     400:	ef 91       	pop	r30
     402:	bf 91       	pop	r27
     404:	af 91       	pop	r26
     406:	9f 91       	pop	r25
     408:	8f 91       	pop	r24
     40a:	7f 91       	pop	r23
     40c:	6f 91       	pop	r22
     40e:	5f 91       	pop	r21
     410:	4f 91       	pop	r20
     412:	3f 91       	pop	r19
     414:	2f 91       	pop	r18
     416:	1f 91       	pop	r17
     418:	0f 91       	pop	r16
     41a:	ff 90       	pop	r15
     41c:	ef 90       	pop	r14
     41e:	df 90       	pop	r13
     420:	cf 90       	pop	r12
     422:	bf 90       	pop	r11
     424:	af 90       	pop	r10
     426:	9f 90       	pop	r9
     428:	8f 90       	pop	r8
     42a:	7f 90       	pop	r7
     42c:	6f 90       	pop	r6
     42e:	5f 90       	pop	r5
     430:	0f 90       	pop	r0
     432:	0f be       	out	0x3f, r0	; 63
     434:	0f 90       	pop	r0
     436:	1f 90       	pop	r1
     438:	18 95       	reti

0000043a <App_Initialization>:



void App_Initialization() //This function contains intilizations for different peripherals
{
	LCD_Init();
     43a:	0e 94 3e 06 	call	0xc7c	; 0xc7c <LCD_Init>
	Keypad_Init();
     43e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <Keypad_Init>
	UART_Init(freq_16MHz_baud_9600);
     442:	87 e6       	ldi	r24, 0x67	; 103
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 3c 0c 	call	0x1878	; 0x1878 <UART_Init>
	Servo_Initialization();
     44a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <Servo_Initialization>
	LED_START();
     44e:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <LED_START>
	DIMMER_Init();
     452:	0e 94 cb 0a 	call	0x1596	; 0x1596 <DIMMER_Init>
	BUZZER_START();
     456:	0e 94 77 0a 	call	0x14ee	; 0x14ee <BUZZER_START>
	ADC_Start(ADC_Channel);
     45a:	83 e0       	ldi	r24, 0x03	; 3
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 6d 00 	call	0xda	; 0xda <ADC_Start>
	Sensor_ON();
     462:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <Sensor_ON>
	AC_Initialization();
     466:	0e 94 49 00 	call	0x92	; 0x92 <AC_Initialization>
	Interrupt_Start();
     46a:	0e 94 ab 05 	call	0xb56	; 0xb56 <Interrupt_Start>
	EEPROM_Initialization();
     46e:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <EEPROM_Initialization>
     472:	08 95       	ret

00000474 <App>:
	
	
// -------------------------->	App Function < ----------------------------------//

void App()
{
     474:	2f 92       	push	r2
     476:	3f 92       	push	r3
     478:	4f 92       	push	r4
     47a:	5f 92       	push	r5
     47c:	6f 92       	push	r6
     47e:	7f 92       	push	r7
     480:	8f 92       	push	r8
     482:	9f 92       	push	r9
     484:	af 92       	push	r10
     486:	bf 92       	push	r11
     488:	cf 92       	push	r12
     48a:	df 92       	push	r13
     48c:	ef 92       	push	r14
     48e:	ff 92       	push	r15
     490:	0f 93       	push	r16
     492:	1f 93       	push	r17
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
     49c:	63 97       	sbiw	r28, 0x13	; 19
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	f8 94       	cli
     4a2:	de bf       	out	0x3e, r29	; 62
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	cd bf       	out	0x3d, r28	; 61
	unsigned char uart_var = 0;
	unsigned char Mode = 0;
	char admin_counter = 0;
     4a8:	19 82       	std	Y+1, r1	; 0x01
	char user_counter = 0;
     4aa:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char looping_counter = 0;
	unsigned char Compare_Var = 0;
	
	
	
	Mode = UART_Mode_Choice(); //Checks either admin or user
     4ac:	0e 94 84 0c 	call	0x1908	; 0x1908 <UART_Mode_Choice>
	
	if(Mode == '1')		// Admin Selection
     4b0:	81 33       	cpi	r24, 0x31	; 49
     4b2:	09 f0       	breq	.+2      	; 0x4b6 <App+0x42>
     4b4:	14 c1       	rjmp	.+552    	; 0x6de <App+0x26a>
	{
		EEPROM_readByte(Counters_Block,Admins_number_BIT,&admin_counter); //Reads the number of present admins NOW
     4b6:	ae 01       	movw	r20, r28
     4b8:	4f 5f       	subi	r20, 0xFF	; 255
     4ba:	5f 4f       	sbci	r21, 0xFF	; 255
     4bc:	61 e0       	ldi	r22, 0x01	; 1
     4be:	8e ea       	ldi	r24, 0xAE	; 174
     4c0:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
     4c4:	8f e3       	ldi	r24, 0x3F	; 63
     4c6:	9c e9       	ldi	r25, 0x9C	; 156
     4c8:	01 97       	sbiw	r24, 0x01	; 1
     4ca:	f1 f7       	brne	.-4      	; 0x4c8 <App+0x54>
     4cc:	00 c0       	rjmp	.+0      	; 0x4ce <App+0x5a>
     4ce:	00 00       	nop
     4d0:	68 94       	set
     4d2:	77 24       	eor	r7, r7
     4d4:	71 f8       	bld	r7, 1
     4d6:	4e 01       	movw	r8, r28
     4d8:	97 e0       	ldi	r25, 0x07	; 7
     4da:	89 0e       	add	r8, r25
     4dc:	91 1c       	adc	r9, r1
     4de:	5e 01       	movw	r10, r28
     4e0:	eb e0       	ldi	r30, 0x0B	; 11
     4e2:	ae 0e       	add	r10, r30
     4e4:	b1 1c       	adc	r11, r1
     4e6:	01 c0       	rjmp	.+2      	; 0x4ea <App+0x76>
		_delay_ms(10);
		trials = 3;
		while(trials>=1 && trials<=3)
     4e8:	78 2e       	mov	r7, r24
     4ea:	66 24       	eor	r6, r6
     4ec:	63 94       	inc	r6
     4ee:	67 0c       	add	r6, r7
		{
				//----------------	Writing the username -----------------//
				UART_Send_String("Enter Username : ");
     4f0:	87 ea       	ldi	r24, 0xA7	; 167
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
     4f8:	7e 01       	movw	r14, r28
     4fa:	f3 e0       	ldi	r31, 0x03	; 3
     4fc:	ef 0e       	add	r14, r31
     4fe:	f1 1c       	adc	r15, r1
				while(looping_counter < LOGIN_SIZE)
				{
					uart_var = 0;
					while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
					{
						uart_var = UART_Receive();
     500:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
     504:	18 2f       	mov	r17, r24
						UART_Transmit(uart_var);
     506:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				UART_Send_String("Enter Username : ");
				looping_counter = 0;
				while(looping_counter < LOGIN_SIZE)
				{
					uart_var = 0;
					while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
     50a:	80 ed       	ldi	r24, 0xD0	; 208
     50c:	81 0f       	add	r24, r17
     50e:	8a 30       	cpi	r24, 0x0A	; 10
     510:	b8 f7       	brcc	.-18     	; 0x500 <App+0x8c>
					{
						uart_var = UART_Receive();
						UART_Transmit(uart_var);
					}
					username_arr[looping_counter] = uart_var;
     512:	f7 01       	movw	r30, r14
     514:	11 93       	st	Z+, r17
     516:	7f 01       	movw	r14, r30
		while(trials>=1 && trials<=3)
		{
				//----------------	Writing the username -----------------//
				UART_Send_String("Enter Username : ");
				looping_counter = 0;
				while(looping_counter < LOGIN_SIZE)
     518:	8e 16       	cp	r8, r30
     51a:	9f 06       	cpc	r9, r31
     51c:	89 f7       	brne	.-30     	; 0x500 <App+0x8c>
					}
					username_arr[looping_counter] = uart_var;
					looping_counter++;
				}
				looping_counter = 0;
				UART_Transmit('\r');
     51e:	8d e0       	ldi	r24, 0x0D	; 13
     520:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				
				//-----------------	Writing the password -----------------//
				UART_Send_String("Enter Password : ");
     524:	89 eb       	ldi	r24, 0xB9	; 185
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
     52c:	7e 01       	movw	r14, r28
     52e:	f7 e0       	ldi	r31, 0x07	; 7
     530:	ef 0e       	add	r14, r31
     532:	f1 1c       	adc	r15, r1
				while(looping_counter < LOGIN_SIZE)
				{
					uart_var = 0;
					while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
					{
						uart_var = UART_Receive();
     534:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
     538:	18 2f       	mov	r17, r24
						UART_Transmit(uart_var);
     53a:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				UART_Send_String("Enter Password : ");

				while(looping_counter < LOGIN_SIZE)
				{
					uart_var = 0;
					while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
     53e:	80 ed       	ldi	r24, 0xD0	; 208
     540:	81 0f       	add	r24, r17
     542:	8a 30       	cpi	r24, 0x0A	; 10
     544:	b8 f7       	brcc	.-18     	; 0x534 <App+0xc0>
					{
						uart_var = UART_Receive();
						UART_Transmit(uart_var);
					}
					
					password_arr[looping_counter] = uart_var;
     546:	f7 01       	movw	r30, r14
     548:	11 93       	st	Z+, r17
     54a:	7f 01       	movw	r14, r30
				UART_Transmit('\r');
				
				//-----------------	Writing the password -----------------//
				UART_Send_String("Enter Password : ");

				while(looping_counter < LOGIN_SIZE)
     54c:	ea 15       	cp	r30, r10
     54e:	fb 05       	cpc	r31, r11
     550:	89 f7       	brne	.-30     	; 0x534 <App+0xc0>
					
					password_arr[looping_counter] = uart_var;
					looping_counter++;
				}
				looping_counter = 0;
				UART_Transmit('\r');	
     552:	8d e0       	ldi	r24, 0x0D	; 13
     554:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
     558:	ce 01       	movw	r24, r28
     55a:	0f 96       	adiw	r24, 0x0f	; 15
     55c:	7c 01       	movw	r14, r24
     55e:	85 01       	movw	r16, r10
				
				for(char i = 0 ; i < LOGIN_SIZE ; i++)
     560:	d1 2c       	mov	r13, r1
				{
					EEPROM_readByte(Main_Admin_Block , Main_Admin_Username_Starting_bit+i , &username_temp_arr[i]);
     562:	a8 01       	movw	r20, r16
     564:	6d 2d       	mov	r22, r13
     566:	80 ea       	ldi	r24, 0xA0	; 160
     568:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
     56c:	ef e3       	ldi	r30, 0x3F	; 63
     56e:	fc e9       	ldi	r31, 0x9C	; 156
     570:	31 97       	sbiw	r30, 0x01	; 1
     572:	f1 f7       	brne	.-4      	; 0x570 <App+0xfc>
     574:	00 c0       	rjmp	.+0      	; 0x576 <App+0x102>
     576:	00 00       	nop
					_delay_ms(10);
					EEPROM_readByte(Main_Admin_Block , Main_Admin_Password_Starting_bit+i , &password_temp_arr[i]);
     578:	68 e0       	ldi	r22, 0x08	; 8
     57a:	6d 0d       	add	r22, r13
     57c:	a7 01       	movw	r20, r14
     57e:	80 ea       	ldi	r24, 0xA0	; 160
     580:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
     584:	8f e3       	ldi	r24, 0x3F	; 63
     586:	9c e9       	ldi	r25, 0x9C	; 156
     588:	01 97       	sbiw	r24, 0x01	; 1
     58a:	f1 f7       	brne	.-4      	; 0x588 <App+0x114>
     58c:	00 c0       	rjmp	.+0      	; 0x58e <App+0x11a>
     58e:	00 00       	nop
					looping_counter++;
				}
				looping_counter = 0;
				UART_Transmit('\r');	
				
				for(char i = 0 ; i < LOGIN_SIZE ; i++)
     590:	d3 94       	inc	r13
     592:	0f 5f       	subi	r16, 0xFF	; 255
     594:	1f 4f       	sbci	r17, 0xFF	; 255
     596:	9f ef       	ldi	r25, 0xFF	; 255
     598:	e9 1a       	sub	r14, r25
     59a:	f9 0a       	sbc	r15, r25
     59c:	e4 e0       	ldi	r30, 0x04	; 4
     59e:	de 12       	cpse	r13, r30
     5a0:	e0 cf       	rjmp	.-64     	; 0x562 <App+0xee>
					EEPROM_readByte(Main_Admin_Block , Main_Admin_Username_Starting_bit+i , &username_temp_arr[i]);
					_delay_ms(10);
					EEPROM_readByte(Main_Admin_Block , Main_Admin_Password_Starting_bit+i , &password_temp_arr[i]);
					_delay_ms(10);
				}			
			if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))	// The loggedin admin is the main admin
     5a2:	44 e0       	ldi	r20, 0x04	; 4
     5a4:	b5 01       	movw	r22, r10
     5a6:	ce 01       	movw	r24, r28
     5a8:	03 96       	adiw	r24, 0x03	; 3
     5aa:	0e 94 ac 04 	call	0x958	; 0x958 <Compare_Passwords>
     5ae:	81 33       	cpi	r24, 0x31	; 49
     5b0:	21 f0       	breq	.+8      	; 0x5ba <App+0x146>
				Compare_Var = 1;
			}
			else //This condition means that the entered value is not main admin 
				// Next step is to check if the entered values matches any stored admin or not
			{
				for (looping_counter = 0; looping_counter < admin_counter; looping_counter++)
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	81 11       	cpse	r24, r1
     5b6:	66 c0       	rjmp	.+204    	; 0x684 <App+0x210>
     5b8:	6e c0       	rjmp	.+220    	; 0x696 <App+0x222>
					EEPROM_readByte(Main_Admin_Block , Main_Admin_Username_Starting_bit+i , &username_temp_arr[i]);
					_delay_ms(10);
					EEPROM_readByte(Main_Admin_Block , Main_Admin_Password_Starting_bit+i , &password_temp_arr[i]);
					_delay_ms(10);
				}			
			if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))	// The loggedin admin is the main admin
     5ba:	44 e0       	ldi	r20, 0x04	; 4
     5bc:	be 01       	movw	r22, r28
     5be:	61 5f       	subi	r22, 0xF1	; 241
     5c0:	7f 4f       	sbci	r23, 0xFF	; 255
     5c2:	c4 01       	movw	r24, r8
     5c4:	0e 94 ac 04 	call	0x958	; 0x958 <Compare_Passwords>
     5c8:	81 33       	cpi	r24, 0x31	; 49
     5ca:	99 f7       	brne	.-26     	; 0x5b2 <App+0x13e>
			{
				UART_Transmit('\r');
     5cc:	8d e0       	ldi	r24, 0x0D	; 13
     5ce:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				UART_Transmit('\r');
     5d2:	8d e0       	ldi	r24, 0x0D	; 13
     5d4:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				UART_Send_String("WELCOME BOSS");	// this message is displayed only for the main admin
     5d8:	8b ec       	ldi	r24, 0xCB	; 203
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
				UART_Transmit('\r');
     5e0:	8d e0       	ldi	r24, 0x0D	; 13
     5e2:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				UART_Transmit('\r');
     5e6:	8d e0       	ldi	r24, 0x0D	; 13
     5e8:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				Compare_Var = 1;
     5ec:	59 c1       	rjmp	.+690    	; 0x8a0 <__stack+0x41>
			{
				for (looping_counter = 0; looping_counter < admin_counter; looping_counter++)
				{
					for(int i = 0; i<LOGIN_SIZE; i++)
					{
						EEPROM_readByte(Admin_Username_Block,(4*looping_counter)+i,&username_temp_arr[i]);
     5ee:	a7 01       	movw	r20, r14
     5f0:	61 2f       	mov	r22, r17
     5f2:	82 ea       	ldi	r24, 0xA2	; 162
     5f4:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
     5f8:	8f e3       	ldi	r24, 0x3F	; 63
     5fa:	9c e9       	ldi	r25, 0x9C	; 156
     5fc:	01 97       	sbiw	r24, 0x01	; 1
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <App+0x188>
     600:	00 c0       	rjmp	.+0      	; 0x602 <App+0x18e>
     602:	00 00       	nop
						_delay_ms(10);
						EEPROM_readByte(Admin_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
     604:	a6 01       	movw	r20, r12
     606:	61 2f       	mov	r22, r17
     608:	84 ea       	ldi	r24, 0xA4	; 164
     60a:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
     60e:	ef e3       	ldi	r30, 0x3F	; 63
     610:	fc e9       	ldi	r31, 0x9C	; 156
     612:	31 97       	sbiw	r30, 0x01	; 1
     614:	f1 f7       	brne	.-4      	; 0x612 <App+0x19e>
     616:	00 c0       	rjmp	.+0      	; 0x618 <App+0x1a4>
     618:	00 00       	nop
     61a:	1f 5f       	subi	r17, 0xFF	; 255
     61c:	ff ef       	ldi	r31, 0xFF	; 255
     61e:	ef 1a       	sub	r14, r31
     620:	ff 0a       	sbc	r15, r31
     622:	8f ef       	ldi	r24, 0xFF	; 255
     624:	c8 1a       	sub	r12, r24
     626:	d8 0a       	sbc	r13, r24
			else //This condition means that the entered value is not main admin 
				// Next step is to check if the entered values matches any stored admin or not
			{
				for (looping_counter = 0; looping_counter < admin_counter; looping_counter++)
				{
					for(int i = 0; i<LOGIN_SIZE; i++)
     628:	10 13       	cpse	r17, r16
     62a:	e1 cf       	rjmp	.-62     	; 0x5ee <App+0x17a>
						EEPROM_readByte(Admin_Username_Block,(4*looping_counter)+i,&username_temp_arr[i]);
						_delay_ms(10);
						EEPROM_readByte(Admin_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
						_delay_ms(10);
					}
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
     62c:	44 e0       	ldi	r20, 0x04	; 4
     62e:	b5 01       	movw	r22, r10
     630:	ce 01       	movw	r24, r28
     632:	03 96       	adiw	r24, 0x03	; 3
     634:	0e 94 ac 04 	call	0x958	; 0x958 <Compare_Passwords>
     638:	81 33       	cpi	r24, 0x31	; 49
     63a:	f1 f4       	brne	.+60     	; 0x678 <App+0x204>
     63c:	44 e0       	ldi	r20, 0x04	; 4
     63e:	be 01       	movw	r22, r28
     640:	61 5f       	subi	r22, 0xF1	; 241
     642:	7f 4f       	sbci	r23, 0xFF	; 255
     644:	c4 01       	movw	r24, r8
     646:	0e 94 ac 04 	call	0x958	; 0x958 <Compare_Passwords>
     64a:	81 33       	cpi	r24, 0x31	; 49
     64c:	a9 f4       	brne	.+42     	; 0x678 <App+0x204>
					{
						UART_Send_String("Access Granted");
     64e:	8b e7       	ldi	r24, 0x7B	; 123
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
						UART_Transmit('\r');
     656:	8d e0       	ldi	r24, 0x0D	; 13
     658:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
						UART_Transmit('\r');
     65c:	8d e0       	ldi	r24, 0x0D	; 13
     65e:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
						UART_Send_String("WELCOME Admin");	
     662:	88 ed       	ldi	r24, 0xD8	; 216
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
						UART_Transmit('\r');
     66a:	8d e0       	ldi	r24, 0x0D	; 13
     66c:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
						UART_Transmit('\r');
     670:	8d e0       	ldi	r24, 0x0D	; 13
     672:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
						Compare_Var = 1;
						break;
     676:	14 c1       	rjmp	.+552    	; 0x8a0 <__stack+0x41>
				Compare_Var = 1;
			}
			else //This condition means that the entered value is not main admin 
				// Next step is to check if the entered values matches any stored admin or not
			{
				for (looping_counter = 0; looping_counter < admin_counter; looping_counter++)
     678:	53 94       	inc	r5
     67a:	10 2f       	mov	r17, r16
     67c:	89 81       	ldd	r24, Y+1	; 0x01
     67e:	58 16       	cp	r5, r24
     680:	18 f0       	brcs	.+6      	; 0x688 <App+0x214>
     682:	09 c0       	rjmp	.+18     	; 0x696 <App+0x222>
     684:	10 e0       	ldi	r17, 0x00	; 0
     686:	51 2c       	mov	r5, r1
     688:	04 e0       	ldi	r16, 0x04	; 4
     68a:	01 0f       	add	r16, r17
					looping_counter++;
				}
				looping_counter = 0;
				UART_Transmit('\r');	
				
				for(char i = 0 ; i < LOGIN_SIZE ; i++)
     68c:	fe 01       	movw	r30, r28
     68e:	3f 96       	adiw	r30, 0x0f	; 15
     690:	6f 01       	movw	r12, r30
     692:	75 01       	movw	r14, r10
     694:	ac cf       	rjmp	.-168    	; 0x5ee <App+0x17a>
			}	
			
			if(Compare_Var == 0)
			{
				trials--;
				UART_Send_String("Access Denied");
     696:	8a e8       	ldi	r24, 0x8A	; 138
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
				UART_Transmit('\r');
     69e:	8d e0       	ldi	r24, 0x0D	; 13
     6a0:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				UART_Send_String("Trials Left before initializing Alarm : ");
     6a4:	86 ee       	ldi	r24, 0xE6	; 230
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
				UART_Transmit(trials+0x30);
     6ac:	80 e3       	ldi	r24, 0x30	; 48
     6ae:	87 0d       	add	r24, r7
     6b0:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				UART_Transmit('\r');
     6b4:	8d e0       	ldi	r24, 0x0D	; 13
     6b6:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				UART_Transmit('\r');
     6ba:	8d e0       	ldi	r24, 0x0D	; 13
     6bc:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				UART_Transmit('\r');
     6c0:	8d e0       	ldi	r24, 0x0D	; 13
     6c2:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
	if(Mode == '1')		// Admin Selection
	{
		EEPROM_readByte(Counters_Block,Admins_number_BIT,&admin_counter); //Reads the number of present admins NOW
		_delay_ms(10);
		trials = 3;
		while(trials>=1 && trials<=3)
     6c6:	8f ef       	ldi	r24, 0xFF	; 255
     6c8:	87 0d       	add	r24, r7
     6ca:	83 30       	cpi	r24, 0x03	; 3
     6cc:	08 f4       	brcc	.+2      	; 0x6d0 <App+0x25c>
     6ce:	0c cf       	rjmp	.-488    	; 0x4e8 <App+0x74>
				break;
			}

		}

		if(trials == 0)
     6d0:	71 10       	cpse	r7, r1
     6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <App+0x264>
		{
			Alarm_On ();
     6d4:	0e 94 ac 0a 	call	0x1558	; 0x1558 <Alarm_On>
		}

		UART_Admin_Interfacing();
     6d8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <UART_Admin_Interfacing>
     6dc:	e3 c0       	rjmp	.+454    	; 0x8a4 <__stack+0x45>
	
	}
	else //User
	{
		
			EEPROM_readByte(Counters_Block,Users_UART_number_BIT,&user_counter);
     6de:	ae 01       	movw	r20, r28
     6e0:	4e 5f       	subi	r20, 0xFE	; 254
     6e2:	5f 4f       	sbci	r21, 0xFF	; 255
     6e4:	62 e0       	ldi	r22, 0x02	; 2
     6e6:	8e ea       	ldi	r24, 0xAE	; 174
     6e8:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
     6ec:	8f e3       	ldi	r24, 0x3F	; 63
     6ee:	9c e9       	ldi	r25, 0x9C	; 156
     6f0:	01 97       	sbiw	r24, 0x01	; 1
     6f2:	f1 f7       	brne	.-4      	; 0x6f0 <App+0x27c>
     6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <App+0x282>
     6f6:	00 00       	nop
     6f8:	68 94       	set
     6fa:	77 24       	eor	r7, r7
     6fc:	71 f8       	bld	r7, 1
     6fe:	5e 01       	movw	r10, r28
     700:	97 e0       	ldi	r25, 0x07	; 7
     702:	a9 0e       	add	r10, r25
     704:	b1 1c       	adc	r11, r1
     706:	4e 01       	movw	r8, r28
     708:	eb e0       	ldi	r30, 0x0B	; 11
     70a:	8e 0e       	add	r8, r30
     70c:	91 1c       	adc	r9, r1
						_delay_ms(10);
						EEPROM_readByte(UART_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
						_delay_ms(10);
					}
					
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
     70e:	c8 2c       	mov	r12, r8
     710:	d9 2c       	mov	r13, r9
     712:	6a 2c       	mov	r6, r10
     714:	5b 2c       	mov	r5, r11
     716:	01 c0       	rjmp	.+2      	; 0x71a <App+0x2a6>
		
			EEPROM_readByte(Counters_Block,Users_UART_number_BIT,&user_counter);
			_delay_ms(10);
			trials = 3;
			
			while(trials>=1 && trials<=3)
     718:	78 2e       	mov	r7, r24
     71a:	f1 e0       	ldi	r31, 0x01	; 1
     71c:	f7 0d       	add	r31, r7
     71e:	fb 8b       	std	Y+19, r31	; 0x13
			{
					//----------------	Writing the username -----------------//
					UART_Send_String("Enter Username : ");
     720:	87 ea       	ldi	r24, 0xA7	; 167
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
     728:	7e 01       	movw	r14, r28
     72a:	83 e0       	ldi	r24, 0x03	; 3
     72c:	e8 0e       	add	r14, r24
     72e:	f1 1c       	adc	r15, r1
					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
						{
							uart_var = UART_Receive();
     730:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
     734:	18 2f       	mov	r17, r24
							UART_Transmit(uart_var);
     736:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					looping_counter = 0;
					
					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
     73a:	80 ed       	ldi	r24, 0xD0	; 208
     73c:	81 0f       	add	r24, r17
     73e:	8a 30       	cpi	r24, 0x0A	; 10
     740:	b8 f7       	brcc	.-18     	; 0x730 <App+0x2bc>
						{
							uart_var = UART_Receive();
							UART_Transmit(uart_var);
						}
						
						username_arr[looping_counter] = uart_var;
     742:	f7 01       	movw	r30, r14
     744:	11 93       	st	Z+, r17
     746:	7f 01       	movw	r14, r30
					//----------------	Writing the username -----------------//
					UART_Send_String("Enter Username : ");
					
					looping_counter = 0;
					
					while(looping_counter < LOGIN_SIZE)
     748:	ae 16       	cp	r10, r30
     74a:	bf 06       	cpc	r11, r31
     74c:	89 f7       	brne	.-30     	; 0x730 <App+0x2bc>
						
						username_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
					UART_Transmit('\r');
     74e:	8d e0       	ldi	r24, 0x0D	; 13
     750:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					
					//-----------------	Writing the password -----------------//
					UART_Send_String("Enter Password : ");
     754:	89 eb       	ldi	r24, 0xB9	; 185
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
     75c:	7e 01       	movw	r14, r28
     75e:	f7 e0       	ldi	r31, 0x07	; 7
     760:	ef 0e       	add	r14, r31
     762:	f1 1c       	adc	r15, r1
					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
						{
							uart_var = UART_Receive();
     764:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
     768:	18 2f       	mov	r17, r24
							UART_Transmit(uart_var);
     76a:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Send_String("Enter Password : ");

					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
     76e:	80 ed       	ldi	r24, 0xD0	; 208
     770:	81 0f       	add	r24, r17
     772:	8a 30       	cpi	r24, 0x0A	; 10
     774:	b8 f7       	brcc	.-18     	; 0x764 <App+0x2f0>
						{
							uart_var = UART_Receive();
							UART_Transmit(uart_var);
						}
						
						password_arr[looping_counter] = uart_var;
     776:	f7 01       	movw	r30, r14
     778:	11 93       	st	Z+, r17
     77a:	7f 01       	movw	r14, r30
					UART_Transmit('\r');
					
					//-----------------	Writing the password -----------------//
					UART_Send_String("Enter Password : ");

					while(looping_counter < LOGIN_SIZE)
     77c:	e8 15       	cp	r30, r8
     77e:	f9 05       	cpc	r31, r9
     780:	89 f7       	brne	.-30     	; 0x764 <App+0x2f0>
						
						password_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
					UART_Transmit('\r');
     782:	8d e0       	ldi	r24, 0x0D	; 13
     784:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>

				UART_Transmit('\r');
     788:	8d e0       	ldi	r24, 0x0D	; 13
     78a:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				UART_Transmit('\r');
     78e:	8d e0       	ldi	r24, 0x0D	; 13
     790:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
     794:	8a 81       	ldd	r24, Y+2	; 0x02
     796:	81 11       	cpse	r24, r1
     798:	51 c0       	rjmp	.+162    	; 0x83c <App+0x3c8>
     79a:	5e c0       	rjmp	.+188    	; 0x858 <App+0x3e4>
				{
					for(int i = 0; i<LOGIN_SIZE; i++)
					{
						EEPROM_readByte(UART_User_Username_Block,(4*looping_counter)+i,&username_temp_arr[i]);
     79c:	a7 01       	movw	r20, r14
     79e:	64 2d       	mov	r22, r4
     7a0:	86 ea       	ldi	r24, 0xA6	; 166
     7a2:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
     7a6:	8f e3       	ldi	r24, 0x3F	; 63
     7a8:	9c e9       	ldi	r25, 0x9C	; 156
     7aa:	01 97       	sbiw	r24, 0x01	; 1
     7ac:	f1 f7       	brne	.-4      	; 0x7aa <App+0x336>
     7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <App+0x33c>
     7b0:	00 00       	nop
						_delay_ms(10);
						EEPROM_readByte(UART_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
     7b2:	a8 01       	movw	r20, r16
     7b4:	64 2d       	mov	r22, r4
     7b6:	88 ea       	ldi	r24, 0xA8	; 168
     7b8:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
     7bc:	ef e3       	ldi	r30, 0x3F	; 63
     7be:	fc e9       	ldi	r31, 0x9C	; 156
     7c0:	31 97       	sbiw	r30, 0x01	; 1
     7c2:	f1 f7       	brne	.-4      	; 0x7c0 <App+0x34c>
     7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <App+0x352>
     7c6:	00 00       	nop
     7c8:	43 94       	inc	r4
     7ca:	ff ef       	ldi	r31, 0xFF	; 255
     7cc:	ef 1a       	sub	r14, r31
     7ce:	ff 0a       	sbc	r15, r31
     7d0:	0f 5f       	subi	r16, 0xFF	; 255
     7d2:	1f 4f       	sbci	r17, 0xFF	; 255
				UART_Transmit('\r');
				UART_Transmit('\r');
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
				{
					for(int i = 0; i<LOGIN_SIZE; i++)
     7d4:	34 10       	cpse	r3, r4
     7d6:	e2 cf       	rjmp	.-60     	; 0x79c <App+0x328>
						_delay_ms(10);
						EEPROM_readByte(UART_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
						_delay_ms(10);
					}
					
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
     7d8:	44 e0       	ldi	r20, 0x04	; 4
     7da:	6c 2d       	mov	r22, r12
     7dc:	7d 2d       	mov	r23, r13
     7de:	ce 01       	movw	r24, r28
     7e0:	03 96       	adiw	r24, 0x03	; 3
     7e2:	0e 94 ac 04 	call	0x958	; 0x958 <Compare_Passwords>
     7e6:	81 33       	cpi	r24, 0x31	; 49
     7e8:	19 f5       	brne	.+70     	; 0x830 <App+0x3bc>
     7ea:	44 e0       	ldi	r20, 0x04	; 4
     7ec:	be 01       	movw	r22, r28
     7ee:	61 5f       	subi	r22, 0xF1	; 241
     7f0:	7f 4f       	sbci	r23, 0xFF	; 255
     7f2:	86 2d       	mov	r24, r6
     7f4:	95 2d       	mov	r25, r5
     7f6:	0e 94 ac 04 	call	0x958	; 0x958 <Compare_Passwords>
     7fa:	81 33       	cpi	r24, 0x31	; 49
     7fc:	c9 f4       	brne	.+50     	; 0x830 <App+0x3bc>
					{
						UART_Send_String("Access Granted");
     7fe:	8b e7       	ldi	r24, 0x7B	; 123
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
						UART_Transmit('\r');
     806:	8d e0       	ldi	r24, 0x0D	; 13
     808:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
						UART_Transmit('\r');
     80c:	8d e0       	ldi	r24, 0x0D	; 13
     80e:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
						UART_Send_String("Welcome User");
     812:	8f e0       	ldi	r24, 0x0F	; 15
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
						UART_Transmit('\r');
     81a:	8d e0       	ldi	r24, 0x0D	; 13
     81c:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
						UART_Transmit('\r');
     820:	8d e0       	ldi	r24, 0x0D	; 13
     822:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
						UART_Transmit('\r');
     826:	8d e0       	ldi	r24, 0x0D	; 13
     828:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
     82c:	7b 88       	ldd	r7, Y+19	; 0x13
     82e:	31 c0       	rjmp	.+98     	; 0x892 <__stack+0x33>
					UART_Transmit('\r');

				UART_Transmit('\r');
				UART_Transmit('\r');
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
     830:	23 94       	inc	r2
     832:	43 2c       	mov	r4, r3
     834:	8a 81       	ldd	r24, Y+2	; 0x02
     836:	28 16       	cp	r2, r24
     838:	18 f0       	brcs	.+6      	; 0x840 <App+0x3cc>
     83a:	0e c0       	rjmp	.+28     	; 0x858 <App+0x3e4>
     83c:	41 2c       	mov	r4, r1
     83e:	21 2c       	mov	r2, r1
     840:	7e 01       	movw	r14, r28
     842:	8b e0       	ldi	r24, 0x0B	; 11
     844:	e8 0e       	add	r14, r24
     846:	f1 1c       	adc	r15, r1
     848:	8e 01       	movw	r16, r28
     84a:	01 5f       	subi	r16, 0xF1	; 241
     84c:	1f 4f       	sbci	r17, 0xFF	; 255
     84e:	68 94       	set
     850:	33 24       	eor	r3, r3
     852:	32 f8       	bld	r3, 2
     854:	34 0c       	add	r3, r4
     856:	a2 cf       	rjmp	.-188    	; 0x79c <App+0x328>
				looping_counter = 0;
				
				if(Compare_Var == 0)
				{
					trials--;
					UART_Send_String("Access Denied");
     858:	8a e8       	ldi	r24, 0x8A	; 138
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
					UART_Transmit('\r');
     860:	8d e0       	ldi	r24, 0x0D	; 13
     862:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Send_String("Trials Left before initializing Alarm : ");
     866:	86 ee       	ldi	r24, 0xE6	; 230
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
					UART_Transmit(trials+0x30);
     86e:	80 e3       	ldi	r24, 0x30	; 48
     870:	87 0d       	add	r24, r7
     872:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Transmit('\r');
     876:	8d e0       	ldi	r24, 0x0D	; 13
     878:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Transmit('\r');
     87c:	8d e0       	ldi	r24, 0x0D	; 13
     87e:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Transmit('\r');
     882:	8d e0       	ldi	r24, 0x0D	; 13
     884:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		
			EEPROM_readByte(Counters_Block,Users_UART_number_BIT,&user_counter);
			_delay_ms(10);
			trials = 3;
			
			while(trials>=1 && trials<=3)
     888:	8f ef       	ldi	r24, 0xFF	; 255
     88a:	87 0d       	add	r24, r7
     88c:	83 30       	cpi	r24, 0x03	; 3
     88e:	08 f4       	brcc	.+2      	; 0x892 <__stack+0x33>
     890:	43 cf       	rjmp	.-378    	; 0x718 <App+0x2a4>
					break;
				}

			}

			if(trials == 0)
     892:	71 10       	cpse	r7, r1
     894:	02 c0       	rjmp	.+4      	; 0x89a <__stack+0x3b>
			{
				Alarm_On ();
     896:	0e 94 ac 0a 	call	0x1558	; 0x1558 <Alarm_On>
			}
			
			UART_User_Interfacing();		
     89a:	0e 94 14 15 	call	0x2a28	; 0x2a28 <UART_User_Interfacing>
	}
     89e:	02 c0       	rjmp	.+4      	; 0x8a4 <__stack+0x45>
				Compare_Var = 1;
			}
			else //This condition means that the entered value is not main admin 
				// Next step is to check if the entered values matches any stored admin or not
			{
				for (looping_counter = 0; looping_counter < admin_counter; looping_counter++)
     8a0:	76 2c       	mov	r7, r6
     8a2:	16 cf       	rjmp	.-468    	; 0x6d0 <App+0x25c>
				Alarm_On ();
			}
			
			UART_User_Interfacing();		
	}
     8a4:	63 96       	adiw	r28, 0x13	; 19
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	f8 94       	cli
     8aa:	de bf       	out	0x3e, r29	; 62
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	cd bf       	out	0x3d, r28	; 61
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	ff 90       	pop	r15
     8ba:	ef 90       	pop	r14
     8bc:	df 90       	pop	r13
     8be:	cf 90       	pop	r12
     8c0:	bf 90       	pop	r11
     8c2:	af 90       	pop	r10
     8c4:	9f 90       	pop	r9
     8c6:	8f 90       	pop	r8
     8c8:	7f 90       	pop	r7
     8ca:	6f 90       	pop	r6
     8cc:	5f 90       	pop	r5
     8ce:	4f 90       	pop	r4
     8d0:	3f 90       	pop	r3
     8d2:	2f 90       	pop	r2
     8d4:	08 95       	ret

000008d6 <EEPROM_Initialization>:
     8d6:	0e 94 4a 05 	call	0xa94	; 0xa94 <I2C_Initialization>
     8da:	08 95       	ret

000008dc <EEPROM_writeByte>:
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	d6 2f       	mov	r29, r22
     8e2:	c4 2f       	mov	r28, r20
     8e4:	0e 94 4e 05 	call	0xa9c	; 0xa9c <I2C_Start>
     8e8:	8d 2f       	mov	r24, r29
     8ea:	0e 94 88 05 	call	0xb10	; 0xb10 <I2C_Write>
     8ee:	8f e3       	ldi	r24, 0x3F	; 63
     8f0:	9c e9       	ldi	r25, 0x9C	; 156
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <EEPROM_writeByte+0x16>
     8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <EEPROM_writeByte+0x1c>
     8f8:	00 00       	nop
     8fa:	8c 2f       	mov	r24, r28
     8fc:	0e 94 88 05 	call	0xb10	; 0xb10 <I2C_Write>
     900:	8f e3       	ldi	r24, 0x3F	; 63
     902:	9c e9       	ldi	r25, 0x9C	; 156
     904:	01 97       	sbiw	r24, 0x01	; 1
     906:	f1 f7       	brne	.-4      	; 0x904 <EEPROM_writeByte+0x28>
     908:	00 c0       	rjmp	.+0      	; 0x90a <EEPROM_writeByte+0x2e>
     90a:	00 00       	nop
     90c:	0e 94 a5 05 	call	0xb4a	; 0xb4a <I2C_Stop>
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	08 95       	ret

00000916 <EEPROM_readByte>:
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	c8 2f       	mov	r28, r24
     920:	d6 2f       	mov	r29, r22
     922:	8a 01       	movw	r16, r20
     924:	0e 94 4e 05 	call	0xa9c	; 0xa9c <I2C_Start>
     928:	8d 2f       	mov	r24, r29
     92a:	0e 94 88 05 	call	0xb10	; 0xb10 <I2C_Write>
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	8c 0f       	add	r24, r28
     932:	0e 94 6b 05 	call	0xad6	; 0xad6 <I2C_Repeated_Start>
     936:	0e 94 9a 05 	call	0xb34	; 0xb34 <I2C_Read_Nack>
     93a:	f8 01       	movw	r30, r16
     93c:	80 83       	st	Z, r24
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	9c e9       	ldi	r25, 0x9C	; 156
     942:	01 97       	sbiw	r24, 0x01	; 1
     944:	f1 f7       	brne	.-4      	; 0x942 <EEPROM_readByte+0x2c>
     946:	00 c0       	rjmp	.+0      	; 0x948 <EEPROM_readByte+0x32>
     948:	00 00       	nop
     94a:	0e 94 a5 05 	call	0xb4a	; 0xb4a <I2C_Stop>
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	1f 91       	pop	r17
     954:	0f 91       	pop	r16
     956:	08 95       	ret

00000958 <Compare_Passwords>:


char Compare_Passwords(unsigned char* pass1 , unsigned char* pass2 , unsigned char Pass_Size)
{
	unsigned int i = 0;
	for(i = 0 ; i<Pass_Size; i++)
     958:	50 e0       	ldi	r21, 0x00	; 0
     95a:	41 15       	cp	r20, r1
     95c:	51 05       	cpc	r21, r1
     95e:	b1 f0       	breq	.+44     	; 0x98c <Compare_Passwords+0x34>
	{
		if(pass1[i] != pass2[i])
     960:	fc 01       	movw	r30, r24
     962:	30 81       	ld	r19, Z
     964:	fb 01       	movw	r30, r22
     966:	20 81       	ld	r18, Z
     968:	32 13       	cpse	r19, r18
     96a:	12 c0       	rjmp	.+36     	; 0x990 <Compare_Passwords+0x38>
     96c:	fc 01       	movw	r30, r24
     96e:	31 96       	adiw	r30, 0x01	; 1
     970:	db 01       	movw	r26, r22
     972:	11 96       	adiw	r26, 0x01	; 1
     974:	48 0f       	add	r20, r24
     976:	59 1f       	adc	r21, r25
     978:	04 c0       	rjmp	.+8      	; 0x982 <Compare_Passwords+0x2a>
     97a:	21 91       	ld	r18, Z+
     97c:	9d 91       	ld	r25, X+
     97e:	29 13       	cpse	r18, r25
     980:	09 c0       	rjmp	.+18     	; 0x994 <Compare_Passwords+0x3c>


char Compare_Passwords(unsigned char* pass1 , unsigned char* pass2 , unsigned char Pass_Size)
{
	unsigned int i = 0;
	for(i = 0 ; i<Pass_Size; i++)
     982:	e4 17       	cp	r30, r20
     984:	f5 07       	cpc	r31, r21
     986:	c9 f7       	brne	.-14     	; 0x97a <Compare_Passwords+0x22>
		{
			return '0';
		}
	}
	
	return '1';
     988:	81 e3       	ldi	r24, 0x31	; 49
     98a:	08 95       	ret
     98c:	81 e3       	ldi	r24, 0x31	; 49
     98e:	08 95       	ret
	unsigned int i = 0;
	for(i = 0 ; i<Pass_Size; i++)
	{
		if(pass1[i] != pass2[i])
		{
			return '0';
     990:	80 e3       	ldi	r24, 0x30	; 48
     992:	08 95       	ret
     994:	80 e3       	ldi	r24, 0x30	; 48
		}
	}
	
	return '1';
}
     996:	08 95       	ret

00000998 <EEPROM_Save_Main_Admin>:

void EEPROM_Save_Main_Admin()
{
     998:	cf 93       	push	r28
	for(char i = 0; i < LOGIN_SIZE ; i++)
     99a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		EEPROM_writeByte(Main_Admin_Block,0+i,Main_Admin_pass_no);
     99c:	41 e3       	ldi	r20, 0x31	; 49
     99e:	6c 2f       	mov	r22, r28
     9a0:	80 ea       	ldi	r24, 0xA0	; 160
     9a2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>
     9a6:	8f e3       	ldi	r24, 0x3F	; 63
     9a8:	9c e9       	ldi	r25, 0x9C	; 156
     9aa:	01 97       	sbiw	r24, 0x01	; 1
     9ac:	f1 f7       	brne	.-4      	; 0x9aa <EEPROM_Save_Main_Admin+0x12>
     9ae:	00 c0       	rjmp	.+0      	; 0x9b0 <EEPROM_Save_Main_Admin+0x18>
     9b0:	00 00       	nop
		_delay_ms(10);
		EEPROM_writeByte(Main_Admin_Block,8+i,Main_Admin_pass_no);
     9b2:	68 e0       	ldi	r22, 0x08	; 8
     9b4:	6c 0f       	add	r22, r28
     9b6:	41 e3       	ldi	r20, 0x31	; 49
     9b8:	80 ea       	ldi	r24, 0xA0	; 160
     9ba:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>
     9be:	8f e3       	ldi	r24, 0x3F	; 63
     9c0:	9c e9       	ldi	r25, 0x9C	; 156
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	f1 f7       	brne	.-4      	; 0x9c2 <EEPROM_Save_Main_Admin+0x2a>
     9c6:	00 c0       	rjmp	.+0      	; 0x9c8 <EEPROM_Save_Main_Admin+0x30>
     9c8:	00 00       	nop
	return '1';
}

void EEPROM_Save_Main_Admin()
{
	for(char i = 0; i < LOGIN_SIZE ; i++)
     9ca:	cf 5f       	subi	r28, 0xFF	; 255
     9cc:	c4 30       	cpi	r28, 0x04	; 4
     9ce:	31 f7       	brne	.-52     	; 0x99c <EEPROM_Save_Main_Admin+0x4>
		EEPROM_writeByte(Main_Admin_Block,0+i,Main_Admin_pass_no);
		_delay_ms(10);
		EEPROM_writeByte(Main_Admin_Block,8+i,Main_Admin_pass_no);
		_delay_ms(10);
	}
}
     9d0:	cf 91       	pop	r28
     9d2:	08 95       	ret

000009d4 <EEPROM_Write_0_Counters>:


void EEPROM_Write_0_Counters()
{
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	00 d0       	rcall	.+0      	; 0x9da <EEPROM_Write_0_Counters+0x6>
     9da:	1f 92       	push	r1
     9dc:	cd b7       	in	r28, 0x3d	; 61
     9de:	de b7       	in	r29, 0x3e	; 62
	char admin_stored_value = 0;
     9e0:	19 82       	std	Y+1, r1	; 0x01
	char User_uart_stored_value = 0;
     9e2:	1a 82       	std	Y+2, r1	; 0x02
	char User_lcd_stored_value = 0;
     9e4:	1b 82       	std	Y+3, r1	; 0x03
	
	EEPROM_readByte(BLOCK_7,Admins_number_BIT,&admin_stored_value);
     9e6:	ae 01       	movw	r20, r28
     9e8:	4f 5f       	subi	r20, 0xFF	; 255
     9ea:	5f 4f       	sbci	r21, 0xFF	; 255
     9ec:	61 e0       	ldi	r22, 0x01	; 1
     9ee:	8e ea       	ldi	r24, 0xAE	; 174
     9f0:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
     9f4:	8f e3       	ldi	r24, 0x3F	; 63
     9f6:	9c e9       	ldi	r25, 0x9C	; 156
     9f8:	01 97       	sbiw	r24, 0x01	; 1
     9fa:	f1 f7       	brne	.-4      	; 0x9f8 <EEPROM_Write_0_Counters+0x24>
     9fc:	00 c0       	rjmp	.+0      	; 0x9fe <EEPROM_Write_0_Counters+0x2a>
     9fe:	00 00       	nop
	_delay_ms(10);
	EEPROM_readByte(BLOCK_7,Users_UART_number_BIT,&User_uart_stored_value);
     a00:	ae 01       	movw	r20, r28
     a02:	4e 5f       	subi	r20, 0xFE	; 254
     a04:	5f 4f       	sbci	r21, 0xFF	; 255
     a06:	62 e0       	ldi	r22, 0x02	; 2
     a08:	8e ea       	ldi	r24, 0xAE	; 174
     a0a:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
     a0e:	8f e3       	ldi	r24, 0x3F	; 63
     a10:	9c e9       	ldi	r25, 0x9C	; 156
     a12:	01 97       	sbiw	r24, 0x01	; 1
     a14:	f1 f7       	brne	.-4      	; 0xa12 <EEPROM_Write_0_Counters+0x3e>
     a16:	00 c0       	rjmp	.+0      	; 0xa18 <EEPROM_Write_0_Counters+0x44>
     a18:	00 00       	nop
	_delay_ms(10);
	EEPROM_readByte(BLOCK_7,Users_LCD_number_BIT,&User_lcd_stored_value);
     a1a:	ae 01       	movw	r20, r28
     a1c:	4d 5f       	subi	r20, 0xFD	; 253
     a1e:	5f 4f       	sbci	r21, 0xFF	; 255
     a20:	63 e0       	ldi	r22, 0x03	; 3
     a22:	8e ea       	ldi	r24, 0xAE	; 174
     a24:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
     a28:	8f e3       	ldi	r24, 0x3F	; 63
     a2a:	9c e9       	ldi	r25, 0x9C	; 156
     a2c:	01 97       	sbiw	r24, 0x01	; 1
     a2e:	f1 f7       	brne	.-4      	; 0xa2c <EEPROM_Write_0_Counters+0x58>
     a30:	00 c0       	rjmp	.+0      	; 0xa32 <EEPROM_Write_0_Counters+0x5e>
     a32:	00 00       	nop
	_delay_ms(10);
	
	if(admin_stored_value == 0xFF)
     a34:	89 81       	ldd	r24, Y+1	; 0x01
     a36:	8f 3f       	cpi	r24, 0xFF	; 255
     a38:	59 f4       	brne	.+22     	; 0xa50 <EEPROM_Write_0_Counters+0x7c>
	{
		EEPROM_writeByte(BLOCK_7,Admins_number_BIT,0);	// Write 0 on Block_7 bit 0
     a3a:	40 e0       	ldi	r20, 0x00	; 0
     a3c:	61 e0       	ldi	r22, 0x01	; 1
     a3e:	8e ea       	ldi	r24, 0xAE	; 174
     a40:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>
     a44:	8f e3       	ldi	r24, 0x3F	; 63
     a46:	9c e9       	ldi	r25, 0x9C	; 156
     a48:	01 97       	sbiw	r24, 0x01	; 1
     a4a:	f1 f7       	brne	.-4      	; 0xa48 <EEPROM_Write_0_Counters+0x74>
     a4c:	00 c0       	rjmp	.+0      	; 0xa4e <EEPROM_Write_0_Counters+0x7a>
     a4e:	00 00       	nop
		_delay_ms(10);
	}
	
	if(User_uart_stored_value == 0xFF)
     a50:	8a 81       	ldd	r24, Y+2	; 0x02
     a52:	8f 3f       	cpi	r24, 0xFF	; 255
     a54:	59 f4       	brne	.+22     	; 0xa6c <EEPROM_Write_0_Counters+0x98>
	{
		EEPROM_writeByte(BLOCK_7,Users_UART_number_BIT,0);	// Write 0 on Block_7 bit 1
     a56:	40 e0       	ldi	r20, 0x00	; 0
     a58:	62 e0       	ldi	r22, 0x02	; 2
     a5a:	8e ea       	ldi	r24, 0xAE	; 174
     a5c:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>
     a60:	8f e3       	ldi	r24, 0x3F	; 63
     a62:	9c e9       	ldi	r25, 0x9C	; 156
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	f1 f7       	brne	.-4      	; 0xa64 <EEPROM_Write_0_Counters+0x90>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <EEPROM_Write_0_Counters+0x96>
     a6a:	00 00       	nop
		_delay_ms(10);
	}
	
	if(User_lcd_stored_value == 0xFF)
     a6c:	8b 81       	ldd	r24, Y+3	; 0x03
     a6e:	8f 3f       	cpi	r24, 0xFF	; 255
     a70:	59 f4       	brne	.+22     	; 0xa88 <EEPROM_Write_0_Counters+0xb4>
	{
		EEPROM_writeByte(BLOCK_7,Users_LCD_number_BIT,0);	// Write 0 on Block_7 bit 1
     a72:	40 e0       	ldi	r20, 0x00	; 0
     a74:	63 e0       	ldi	r22, 0x03	; 3
     a76:	8e ea       	ldi	r24, 0xAE	; 174
     a78:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>
     a7c:	8f e3       	ldi	r24, 0x3F	; 63
     a7e:	9c e9       	ldi	r25, 0x9C	; 156
     a80:	01 97       	sbiw	r24, 0x01	; 1
     a82:	f1 f7       	brne	.-4      	; 0xa80 <EEPROM_Write_0_Counters+0xac>
     a84:	00 c0       	rjmp	.+0      	; 0xa86 <EEPROM_Write_0_Counters+0xb2>
     a86:	00 00       	nop
		_delay_ms(10);
	}
	
}
     a88:	0f 90       	pop	r0
     a8a:	0f 90       	pop	r0
     a8c:	0f 90       	pop	r0
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	08 95       	ret

00000a94 <I2C_Initialization>:
     a94:	11 b8       	out	0x01, r1	; 1
     a96:	8f ef       	ldi	r24, 0xFF	; 255
     a98:	80 b9       	out	0x00, r24	; 0
     a9a:	08 95       	ret

00000a9c <I2C_Start>:
     a9c:	94 ea       	ldi	r25, 0xA4	; 164
     a9e:	96 bf       	out	0x36, r25	; 54
     aa0:	06 b6       	in	r0, 0x36	; 54
     aa2:	07 fe       	sbrs	r0, 7
     aa4:	fd cf       	rjmp	.-6      	; 0xaa0 <I2C_Start+0x4>
     aa6:	91 b1       	in	r25, 0x01	; 1
     aa8:	98 7f       	andi	r25, 0xF8	; 248
     aaa:	98 30       	cpi	r25, 0x08	; 8
     aac:	71 f4       	brne	.+28     	; 0xaca <I2C_Start+0x2e>
     aae:	83 b9       	out	0x03, r24	; 3
     ab0:	84 e8       	ldi	r24, 0x84	; 132
     ab2:	86 bf       	out	0x36, r24	; 54
     ab4:	06 b6       	in	r0, 0x36	; 54
     ab6:	07 fe       	sbrs	r0, 7
     ab8:	fd cf       	rjmp	.-6      	; 0xab4 <I2C_Start+0x18>
     aba:	81 b1       	in	r24, 0x01	; 1
     abc:	88 7f       	andi	r24, 0xF8	; 248
     abe:	88 31       	cpi	r24, 0x18	; 24
     ac0:	31 f0       	breq	.+12     	; 0xace <I2C_Start+0x32>
     ac2:	80 32       	cpi	r24, 0x20	; 32
     ac4:	31 f0       	breq	.+12     	; 0xad2 <I2C_Start+0x36>
     ac6:	83 e0       	ldi	r24, 0x03	; 3
     ac8:	08 95       	ret
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	08 95       	ret
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	08 95       	ret
     ad2:	82 e0       	ldi	r24, 0x02	; 2
     ad4:	08 95       	ret

00000ad6 <I2C_Repeated_Start>:
     ad6:	94 ea       	ldi	r25, 0xA4	; 164
     ad8:	96 bf       	out	0x36, r25	; 54
     ada:	06 b6       	in	r0, 0x36	; 54
     adc:	07 fe       	sbrs	r0, 7
     ade:	fd cf       	rjmp	.-6      	; 0xada <I2C_Repeated_Start+0x4>
     ae0:	91 b1       	in	r25, 0x01	; 1
     ae2:	98 7f       	andi	r25, 0xF8	; 248
     ae4:	90 31       	cpi	r25, 0x10	; 16
     ae6:	71 f4       	brne	.+28     	; 0xb04 <I2C_Repeated_Start+0x2e>
     ae8:	83 b9       	out	0x03, r24	; 3
     aea:	84 e8       	ldi	r24, 0x84	; 132
     aec:	86 bf       	out	0x36, r24	; 54
     aee:	06 b6       	in	r0, 0x36	; 54
     af0:	07 fe       	sbrs	r0, 7
     af2:	fd cf       	rjmp	.-6      	; 0xaee <I2C_Repeated_Start+0x18>
     af4:	81 b1       	in	r24, 0x01	; 1
     af6:	88 7f       	andi	r24, 0xF8	; 248
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	31 f0       	breq	.+12     	; 0xb08 <I2C_Repeated_Start+0x32>
     afc:	88 34       	cpi	r24, 0x48	; 72
     afe:	31 f0       	breq	.+12     	; 0xb0c <I2C_Repeated_Start+0x36>
     b00:	83 e0       	ldi	r24, 0x03	; 3
     b02:	08 95       	ret
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	08 95       	ret
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	08 95       	ret
     b0c:	82 e0       	ldi	r24, 0x02	; 2
     b0e:	08 95       	ret

00000b10 <I2C_Write>:
     b10:	83 b9       	out	0x03, r24	; 3
     b12:	84 e8       	ldi	r24, 0x84	; 132
     b14:	86 bf       	out	0x36, r24	; 54
     b16:	06 b6       	in	r0, 0x36	; 54
     b18:	07 fe       	sbrs	r0, 7
     b1a:	fd cf       	rjmp	.-6      	; 0xb16 <I2C_Write+0x6>
     b1c:	81 b1       	in	r24, 0x01	; 1
     b1e:	88 7f       	andi	r24, 0xF8	; 248
     b20:	88 32       	cpi	r24, 0x28	; 40
     b22:	21 f0       	breq	.+8      	; 0xb2c <I2C_Write+0x1c>
     b24:	80 33       	cpi	r24, 0x30	; 48
     b26:	21 f0       	breq	.+8      	; 0xb30 <I2C_Write+0x20>
     b28:	82 e0       	ldi	r24, 0x02	; 2
     b2a:	08 95       	ret
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	08 95       	ret
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	08 95       	ret

00000b34 <I2C_Read_Nack>:
     b34:	86 b7       	in	r24, 0x36	; 54
     b36:	84 60       	ori	r24, 0x04	; 4
     b38:	86 bf       	out	0x36, r24	; 54
     b3a:	86 b7       	in	r24, 0x36	; 54
     b3c:	80 68       	ori	r24, 0x80	; 128
     b3e:	86 bf       	out	0x36, r24	; 54
     b40:	06 b6       	in	r0, 0x36	; 54
     b42:	07 fe       	sbrs	r0, 7
     b44:	fd cf       	rjmp	.-6      	; 0xb40 <I2C_Read_Nack+0xc>
     b46:	83 b1       	in	r24, 0x03	; 3
     b48:	08 95       	ret

00000b4a <I2C_Stop>:
     b4a:	84 e9       	ldi	r24, 0x94	; 148
     b4c:	86 bf       	out	0x36, r24	; 54
     b4e:	06 b6       	in	r0, 0x36	; 54
     b50:	04 fc       	sbrc	r0, 4
     b52:	fd cf       	rjmp	.-6      	; 0xb4e <I2C_Stop+0x4>
     b54:	08 95       	ret

00000b56 <Interrupt_Start>:
     b56:	8a 98       	cbi	0x11, 2	; 17
     b58:	8b b7       	in	r24, 0x3b	; 59
     b5a:	80 64       	ori	r24, 0x40	; 64
     b5c:	8b bf       	out	0x3b, r24	; 59
     b5e:	85 b7       	in	r24, 0x35	; 53
     b60:	8d 7f       	andi	r24, 0xFD	; 253
     b62:	85 bf       	out	0x35, r24	; 53
     b64:	85 b7       	in	r24, 0x35	; 53
     b66:	8e 7f       	andi	r24, 0xFE	; 254
     b68:	85 bf       	out	0x35, r24	; 53
     b6a:	78 94       	sei
     b6c:	08 95       	ret

00000b6e <Keypad_Init>:
     b6e:	a4 98       	cbi	0x14, 4	; 20
     b70:	a5 98       	cbi	0x14, 5	; 20
     b72:	a6 98       	cbi	0x14, 6	; 20
     b74:	a7 98       	cbi	0x14, 7	; 20
     b76:	ac 9a       	sbi	0x15, 4	; 21
     b78:	ad 9a       	sbi	0x15, 5	; 21
     b7a:	ae 9a       	sbi	0x15, 6	; 21
     b7c:	af 9a       	sbi	0x15, 7	; 21
     b7e:	bc 9a       	sbi	0x17, 4	; 23
     b80:	bd 9a       	sbi	0x17, 5	; 23
     b82:	be 9a       	sbi	0x17, 6	; 23
     b84:	bf 9a       	sbi	0x17, 7	; 23
     b86:	c4 9a       	sbi	0x18, 4	; 24
     b88:	c5 9a       	sbi	0x18, 5	; 24
     b8a:	c6 9a       	sbi	0x18, 6	; 24
     b8c:	c7 9a       	sbi	0x18, 7	; 24
     b8e:	08 95       	ret

00000b90 <Keypad_Get_Value>:
     b90:	0f 93       	push	r16
     b92:	1f 93       	push	r17
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	c4 e0       	ldi	r28, 0x04	; 4
     b9a:	d0 e0       	ldi	r29, 0x00	; 0
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	a1 e0       	ldi	r26, 0x01	; 1
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	98 b3       	in	r25, 0x18	; 24
     ba4:	8d 01       	movw	r16, r26
     ba6:	0c 2e       	mov	r0, r28
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <Keypad_Get_Value+0x1e>
     baa:	00 0f       	add	r16, r16
     bac:	11 1f       	adc	r17, r17
     bae:	0a 94       	dec	r0
     bb0:	e2 f7       	brpl	.-8      	; 0xbaa <Keypad_Get_Value+0x1a>
     bb2:	20 2f       	mov	r18, r16
     bb4:	20 95       	com	r18
     bb6:	92 23       	and	r25, r18
     bb8:	98 bb       	out	0x18, r25	; 24
     bba:	fe 01       	movw	r30, r28
     bbc:	e4 5a       	subi	r30, 0xA4	; 164
     bbe:	ff 4f       	sbci	r31, 0xFF	; 255
     bc0:	64 e0       	ldi	r22, 0x04	; 4
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	23 b3       	in	r18, 0x13	; 19
     bc6:	96 2f       	mov	r25, r22
     bc8:	ad 01       	movw	r20, r26
     bca:	06 2e       	mov	r0, r22
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <Keypad_Get_Value+0x42>
     bce:	44 0f       	add	r20, r20
     bd0:	55 1f       	adc	r21, r21
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <Keypad_Get_Value+0x3e>
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	24 23       	and	r18, r20
     bda:	35 23       	and	r19, r21
     bdc:	06 2e       	mov	r0, r22
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <Keypad_Get_Value+0x54>
     be0:	35 95       	asr	r19
     be2:	27 95       	ror	r18
     be4:	0a 94       	dec	r0
     be6:	e2 f7       	brpl	.-8      	; 0xbe0 <Keypad_Get_Value+0x50>
     be8:	23 2b       	or	r18, r19
     bea:	69 f4       	brne	.+26     	; 0xc06 <Keypad_Get_Value+0x76>
     bec:	80 81       	ld	r24, Z
     bee:	23 b3       	in	r18, 0x13	; 19
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	24 23       	and	r18, r20
     bf4:	35 23       	and	r19, r21
     bf6:	09 2e       	mov	r0, r25
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <Keypad_Get_Value+0x6e>
     bfa:	35 95       	asr	r19
     bfc:	27 95       	ror	r18
     bfe:	0a 94       	dec	r0
     c00:	e2 f7       	brpl	.-8      	; 0xbfa <Keypad_Get_Value+0x6a>
     c02:	23 2b       	or	r18, r19
     c04:	a1 f3       	breq	.-24     	; 0xbee <Keypad_Get_Value+0x5e>
     c06:	6f 5f       	subi	r22, 0xFF	; 255
     c08:	7f 4f       	sbci	r23, 0xFF	; 255
     c0a:	34 96       	adiw	r30, 0x04	; 4
     c0c:	68 30       	cpi	r22, 0x08	; 8
     c0e:	71 05       	cpc	r23, r1
     c10:	c9 f6       	brne	.-78     	; 0xbc4 <Keypad_Get_Value+0x34>
     c12:	98 b3       	in	r25, 0x18	; 24
     c14:	09 2b       	or	r16, r25
     c16:	08 bb       	out	0x18, r16	; 24
     c18:	21 96       	adiw	r28, 0x01	; 1
     c1a:	c8 30       	cpi	r28, 0x08	; 8
     c1c:	d1 05       	cpc	r29, r1
     c1e:	09 f6       	brne	.-126    	; 0xba2 <Keypad_Get_Value+0x12>
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	08 95       	ret

00000c2a <LCD_Send_CMD>:
     c2a:	9b b3       	in	r25, 0x1b	; 27
     c2c:	9f 70       	andi	r25, 0x0F	; 15
     c2e:	28 2f       	mov	r18, r24
     c30:	20 7f       	andi	r18, 0xF0	; 240
     c32:	92 2b       	or	r25, r18
     c34:	9b bb       	out	0x1b, r25	; 27
     c36:	d8 98       	cbi	0x1b, 0	; 27
     c38:	d9 98       	cbi	0x1b, 1	; 27
     c3a:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c3c:	35 e0       	ldi	r19, 0x05	; 5
     c3e:	3a 95       	dec	r19
     c40:	f1 f7       	brne	.-4      	; 0xc3e <LCD_Send_CMD+0x14>
     c42:	00 00       	nop
     c44:	da 98       	cbi	0x1b, 2	; 27
     c46:	ef e1       	ldi	r30, 0x1F	; 31
     c48:	f3 e0       	ldi	r31, 0x03	; 3
     c4a:	31 97       	sbiw	r30, 0x01	; 1
     c4c:	f1 f7       	brne	.-4      	; 0xc4a <LCD_Send_CMD+0x20>
     c4e:	00 c0       	rjmp	.+0      	; 0xc50 <LCD_Send_CMD+0x26>
     c50:	00 00       	nop
     c52:	2b b3       	in	r18, 0x1b	; 27
     c54:	2f 70       	andi	r18, 0x0F	; 15
     c56:	f0 e1       	ldi	r31, 0x10	; 16
     c58:	8f 9f       	mul	r24, r31
     c5a:	c0 01       	movw	r24, r0
     c5c:	11 24       	eor	r1, r1
     c5e:	82 2b       	or	r24, r18
     c60:	8b bb       	out	0x1b, r24	; 27
     c62:	da 9a       	sbi	0x1b, 2	; 27
     c64:	35 e0       	ldi	r19, 0x05	; 5
     c66:	3a 95       	dec	r19
     c68:	f1 f7       	brne	.-4      	; 0xc66 <LCD_Send_CMD+0x3c>
     c6a:	00 00       	nop
     c6c:	da 98       	cbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c6e:	8f e3       	ldi	r24, 0x3F	; 63
     c70:	9f e1       	ldi	r25, 0x1F	; 31
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	f1 f7       	brne	.-4      	; 0xc72 <LCD_Send_CMD+0x48>
     c76:	00 c0       	rjmp	.+0      	; 0xc78 <LCD_Send_CMD+0x4e>
     c78:	00 00       	nop
     c7a:	08 95       	ret

00000c7c <LCD_Init>:
     c7c:	d0 9a       	sbi	0x1a, 0	; 26
     c7e:	d1 9a       	sbi	0x1a, 1	; 26
     c80:	d2 9a       	sbi	0x1a, 2	; 26
     c82:	d8 98       	cbi	0x1b, 0	; 27
     c84:	d9 98       	cbi	0x1b, 1	; 27
     c86:	da 98       	cbi	0x1b, 2	; 27
     c88:	d4 9a       	sbi	0x1a, 4	; 26
     c8a:	d5 9a       	sbi	0x1a, 5	; 26
     c8c:	d6 9a       	sbi	0x1a, 6	; 26
     c8e:	d7 9a       	sbi	0x1a, 7	; 26
     c90:	dc 98       	cbi	0x1b, 4	; 27
     c92:	dd 98       	cbi	0x1b, 5	; 27
     c94:	de 98       	cbi	0x1b, 6	; 27
     c96:	df 98       	cbi	0x1b, 7	; 27
     c98:	82 e0       	ldi	r24, 0x02	; 2
     c9a:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
     c9e:	8f e9       	ldi	r24, 0x9F	; 159
     ca0:	9f e0       	ldi	r25, 0x0F	; 15
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	f1 f7       	brne	.-4      	; 0xca2 <LCD_Init+0x26>
     ca6:	00 c0       	rjmp	.+0      	; 0xca8 <LCD_Init+0x2c>
     ca8:	00 00       	nop
     caa:	88 e2       	ldi	r24, 0x28	; 40
     cac:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
     cb0:	8f e9       	ldi	r24, 0x9F	; 159
     cb2:	9f e0       	ldi	r25, 0x0F	; 15
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	f1 f7       	brne	.-4      	; 0xcb4 <LCD_Init+0x38>
     cb8:	00 c0       	rjmp	.+0      	; 0xcba <LCD_Init+0x3e>
     cba:	00 00       	nop
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
     cc2:	8f e9       	ldi	r24, 0x9F	; 159
     cc4:	9f e0       	ldi	r25, 0x0F	; 15
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	f1 f7       	brne	.-4      	; 0xcc6 <LCD_Init+0x4a>
     cca:	00 c0       	rjmp	.+0      	; 0xccc <LCD_Init+0x50>
     ccc:	00 00       	nop
     cce:	8c e0       	ldi	r24, 0x0C	; 12
     cd0:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
     cd4:	8f e9       	ldi	r24, 0x9F	; 159
     cd6:	9f e0       	ldi	r25, 0x0F	; 15
     cd8:	01 97       	sbiw	r24, 0x01	; 1
     cda:	f1 f7       	brne	.-4      	; 0xcd8 <LCD_Init+0x5c>
     cdc:	00 c0       	rjmp	.+0      	; 0xcde <LCD_Init+0x62>
     cde:	00 00       	nop
     ce0:	86 e0       	ldi	r24, 0x06	; 6
     ce2:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
     ce6:	8f e9       	ldi	r24, 0x9F	; 159
     ce8:	9f e0       	ldi	r25, 0x0F	; 15
     cea:	01 97       	sbiw	r24, 0x01	; 1
     cec:	f1 f7       	brne	.-4      	; 0xcea <LCD_Init+0x6e>
     cee:	00 c0       	rjmp	.+0      	; 0xcf0 <LCD_Init+0x74>
     cf0:	00 00       	nop
     cf2:	08 95       	ret

00000cf4 <LCD_Write_Char>:
     cf4:	9b b3       	in	r25, 0x1b	; 27
     cf6:	9f 70       	andi	r25, 0x0F	; 15
     cf8:	28 2f       	mov	r18, r24
     cfa:	20 7f       	andi	r18, 0xF0	; 240
     cfc:	92 2b       	or	r25, r18
     cfe:	9b bb       	out	0x1b, r25	; 27
     d00:	d8 9a       	sbi	0x1b, 0	; 27
     d02:	d9 98       	cbi	0x1b, 1	; 27
     d04:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d06:	35 e0       	ldi	r19, 0x05	; 5
     d08:	3a 95       	dec	r19
     d0a:	f1 f7       	brne	.-4      	; 0xd08 <LCD_Write_Char+0x14>
     d0c:	00 00       	nop
     d0e:	da 98       	cbi	0x1b, 2	; 27
     d10:	ef e1       	ldi	r30, 0x1F	; 31
     d12:	f3 e0       	ldi	r31, 0x03	; 3
     d14:	31 97       	sbiw	r30, 0x01	; 1
     d16:	f1 f7       	brne	.-4      	; 0xd14 <LCD_Write_Char+0x20>
     d18:	00 c0       	rjmp	.+0      	; 0xd1a <LCD_Write_Char+0x26>
     d1a:	00 00       	nop
     d1c:	2b b3       	in	r18, 0x1b	; 27
     d1e:	2f 70       	andi	r18, 0x0F	; 15
     d20:	f0 e1       	ldi	r31, 0x10	; 16
     d22:	8f 9f       	mul	r24, r31
     d24:	c0 01       	movw	r24, r0
     d26:	11 24       	eor	r1, r1
     d28:	82 2b       	or	r24, r18
     d2a:	8b bb       	out	0x1b, r24	; 27
     d2c:	da 9a       	sbi	0x1b, 2	; 27
     d2e:	35 e0       	ldi	r19, 0x05	; 5
     d30:	3a 95       	dec	r19
     d32:	f1 f7       	brne	.-4      	; 0xd30 <LCD_Write_Char+0x3c>
     d34:	00 00       	nop
     d36:	da 98       	cbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d38:	8f e3       	ldi	r24, 0x3F	; 63
     d3a:	9f e1       	ldi	r25, 0x1F	; 31
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	f1 f7       	brne	.-4      	; 0xd3c <LCD_Write_Char+0x48>
     d40:	00 c0       	rjmp	.+0      	; 0xd42 <LCD_Write_Char+0x4e>
     d42:	00 00       	nop
     d44:	08 95       	ret

00000d46 <LCD_Write_String>:
     d46:	0f 93       	push	r16
     d48:	1f 93       	push	r17
     d4a:	cf 93       	push	r28
     d4c:	fc 01       	movw	r30, r24
     d4e:	80 81       	ld	r24, Z
     d50:	88 23       	and	r24, r24
     d52:	a1 f0       	breq	.+40     	; 0xd7c <LCD_Write_String+0x36>
     d54:	8f 01       	movw	r16, r30
     d56:	c0 e0       	ldi	r28, 0x00	; 0
     d58:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Write_Char>
     d5c:	2f ef       	ldi	r18, 0xFF	; 255
     d5e:	80 e7       	ldi	r24, 0x70	; 112
     d60:	92 e0       	ldi	r25, 0x02	; 2
     d62:	21 50       	subi	r18, 0x01	; 1
     d64:	80 40       	sbci	r24, 0x00	; 0
     d66:	90 40       	sbci	r25, 0x00	; 0
     d68:	e1 f7       	brne	.-8      	; 0xd62 <LCD_Write_String+0x1c>
     d6a:	00 c0       	rjmp	.+0      	; 0xd6c <LCD_Write_String+0x26>
     d6c:	00 00       	nop
     d6e:	cf 5f       	subi	r28, 0xFF	; 255
     d70:	f8 01       	movw	r30, r16
     d72:	ec 0f       	add	r30, r28
     d74:	f1 1d       	adc	r31, r1
     d76:	80 81       	ld	r24, Z
     d78:	81 11       	cpse	r24, r1
     d7a:	ee cf       	rjmp	.-36     	; 0xd58 <LCD_Write_String+0x12>
     d7c:	cf 91       	pop	r28
     d7e:	1f 91       	pop	r17
     d80:	0f 91       	pop	r16
     d82:	08 95       	ret

00000d84 <LCD_Set_Cursor>:
     d84:	82 30       	cpi	r24, 0x02	; 2
     d86:	50 f4       	brcc	.+20     	; 0xd9c <LCD_Set_Cursor+0x18>
     d88:	60 31       	cpi	r22, 0x10	; 16
     d8a:	40 f4       	brcc	.+16     	; 0xd9c <LCD_Set_Cursor+0x18>
     d8c:	90 e4       	ldi	r25, 0x40	; 64
     d8e:	89 9f       	mul	r24, r25
     d90:	60 0d       	add	r22, r0
     d92:	11 24       	eor	r1, r1
     d94:	86 2f       	mov	r24, r22
     d96:	80 68       	ori	r24, 0x80	; 128
     d98:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
     d9c:	08 95       	ret

00000d9e <LCD_Clear_Screen>:
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
     da4:	08 95       	ret

00000da6 <LCD_Display_LED>:
unsigned char username[4];
unsigned char pass[4];

void LCD_Display_LED (unsigned char room, unsigned char status)
{
	switch(room)
     da6:	83 33       	cpi	r24, 0x33	; 51
     da8:	09 f4       	brne	.+2      	; 0xdac <LCD_Display_LED+0x6>
     daa:	47 c0       	rjmp	.+142    	; 0xe3a <LCD_Display_LED+0x94>
     dac:	28 f4       	brcc	.+10     	; 0xdb8 <LCD_Display_LED+0x12>
     dae:	81 33       	cpi	r24, 0x31	; 49
     db0:	51 f0       	breq	.+20     	; 0xdc6 <LCD_Display_LED+0x20>
     db2:	82 33       	cpi	r24, 0x32	; 50
     db4:	29 f1       	breq	.+74     	; 0xe00 <LCD_Display_LED+0x5a>
     db6:	95 c0       	rjmp	.+298    	; 0xee2 <LCD_Display_LED+0x13c>
     db8:	84 33       	cpi	r24, 0x34	; 52
     dba:	09 f4       	brne	.+2      	; 0xdbe <LCD_Display_LED+0x18>
     dbc:	5b c0       	rjmp	.+182    	; 0xe74 <LCD_Display_LED+0xce>
     dbe:	85 33       	cpi	r24, 0x35	; 53
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <LCD_Display_LED+0x1e>
     dc2:	74 c0       	rjmp	.+232    	; 0xeac <LCD_Display_LED+0x106>
     dc4:	8e c0       	rjmp	.+284    	; 0xee2 <LCD_Display_LED+0x13c>
	{
		case '1':
		switch(status)
     dc6:	60 33       	cpi	r22, 0x30	; 48
     dc8:	79 f0       	breq	.+30     	; 0xde8 <LCD_Display_LED+0x42>
     dca:	61 33       	cpi	r22, 0x31	; 49
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <LCD_Display_LED+0x2a>
     dce:	89 c0       	rjmp	.+274    	; 0xee2 <LCD_Display_LED+0x13c>
		{
			case '1':
			LCD_Write_String("Room 1 Led");
     dd0:	8c e1       	ldi	r24, 0x1C	; 28
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
     dd8:	80 ec       	ldi	r24, 0xC0	; 192
     dda:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			LCD_Write_String ("is Turned on");
     dde:	87 e2       	ldi	r24, 0x27	; 39
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			break;
     de6:	7d c0       	rjmp	.+250    	; 0xee2 <LCD_Display_LED+0x13c>
			case '0':
			LCD_Write_String("Room 1 Led");
     de8:	8c e1       	ldi	r24, 0x1C	; 28
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
     df0:	80 ec       	ldi	r24, 0xC0	; 192
     df2:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			LCD_Write_String ("is Turned Off");
     df6:	84 e3       	ldi	r24, 0x34	; 52
     df8:	91 e0       	ldi	r25, 0x01	; 1
     dfa:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			break;
     dfe:	71 c0       	rjmp	.+226    	; 0xee2 <LCD_Display_LED+0x13c>
		}
		break;
		
		case '2':
		switch(status)
     e00:	60 33       	cpi	r22, 0x30	; 48
     e02:	79 f0       	breq	.+30     	; 0xe22 <LCD_Display_LED+0x7c>
     e04:	61 33       	cpi	r22, 0x31	; 49
     e06:	09 f0       	breq	.+2      	; 0xe0a <LCD_Display_LED+0x64>
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <LCD_Display_LED+0x13c>
		{
			case '1':
			LCD_Write_String("Room 2 Led");
     e0a:	82 e4       	ldi	r24, 0x42	; 66
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
     e12:	80 ec       	ldi	r24, 0xC0	; 192
     e14:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			LCD_Write_String ("is Turned on");
     e18:	87 e2       	ldi	r24, 0x27	; 39
     e1a:	91 e0       	ldi	r25, 0x01	; 1
     e1c:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			break;
     e20:	60 c0       	rjmp	.+192    	; 0xee2 <LCD_Display_LED+0x13c>
			case '0':
			LCD_Write_String("Room 2 Led");
     e22:	82 e4       	ldi	r24, 0x42	; 66
     e24:	91 e0       	ldi	r25, 0x01	; 1
     e26:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
     e2a:	80 ec       	ldi	r24, 0xC0	; 192
     e2c:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			LCD_Write_String ("is Turned Off");
     e30:	84 e3       	ldi	r24, 0x34	; 52
     e32:	91 e0       	ldi	r25, 0x01	; 1
     e34:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			break;
     e38:	54 c0       	rjmp	.+168    	; 0xee2 <LCD_Display_LED+0x13c>
		}
		break;
		
		case '3':
		switch(status)
     e3a:	60 33       	cpi	r22, 0x30	; 48
     e3c:	79 f0       	breq	.+30     	; 0xe5c <LCD_Display_LED+0xb6>
     e3e:	61 33       	cpi	r22, 0x31	; 49
     e40:	09 f0       	breq	.+2      	; 0xe44 <LCD_Display_LED+0x9e>
     e42:	4f c0       	rjmp	.+158    	; 0xee2 <LCD_Display_LED+0x13c>
		{
			case '1':
			LCD_Write_String("Room 3 Led");
     e44:	8d e4       	ldi	r24, 0x4D	; 77
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
     e4c:	80 ec       	ldi	r24, 0xC0	; 192
     e4e:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			LCD_Write_String ("is Turned on");
     e52:	87 e2       	ldi	r24, 0x27	; 39
     e54:	91 e0       	ldi	r25, 0x01	; 1
     e56:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			break;
     e5a:	43 c0       	rjmp	.+134    	; 0xee2 <LCD_Display_LED+0x13c>
			case '0':
			LCD_Write_String("Room 3 Led");
     e5c:	8d e4       	ldi	r24, 0x4D	; 77
     e5e:	91 e0       	ldi	r25, 0x01	; 1
     e60:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
     e64:	80 ec       	ldi	r24, 0xC0	; 192
     e66:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			LCD_Write_String ("is Turned Off");
     e6a:	84 e3       	ldi	r24, 0x34	; 52
     e6c:	91 e0       	ldi	r25, 0x01	; 1
     e6e:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			break;
     e72:	37 c0       	rjmp	.+110    	; 0xee2 <LCD_Display_LED+0x13c>
		}
		break;
		
		case '4':
		switch(status)
     e74:	60 33       	cpi	r22, 0x30	; 48
     e76:	71 f0       	breq	.+28     	; 0xe94 <LCD_Display_LED+0xee>
     e78:	61 33       	cpi	r22, 0x31	; 49
     e7a:	99 f5       	brne	.+102    	; 0xee2 <LCD_Display_LED+0x13c>
		{
			case '1':
			LCD_Write_String("Room 4 Led");
     e7c:	88 e5       	ldi	r24, 0x58	; 88
     e7e:	91 e0       	ldi	r25, 0x01	; 1
     e80:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
     e84:	80 ec       	ldi	r24, 0xC0	; 192
     e86:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			LCD_Write_String ("is Turned on");
     e8a:	87 e2       	ldi	r24, 0x27	; 39
     e8c:	91 e0       	ldi	r25, 0x01	; 1
     e8e:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			break;
     e92:	27 c0       	rjmp	.+78     	; 0xee2 <LCD_Display_LED+0x13c>
			case '0':
			LCD_Write_String("Room 4 Led");
     e94:	88 e5       	ldi	r24, 0x58	; 88
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
     e9c:	80 ec       	ldi	r24, 0xC0	; 192
     e9e:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			LCD_Write_String ("is Turned Off");
     ea2:	84 e3       	ldi	r24, 0x34	; 52
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			break;
     eaa:	1b c0       	rjmp	.+54     	; 0xee2 <LCD_Display_LED+0x13c>
		}
		break;
		
		case '5':
		switch(status)
     eac:	60 33       	cpi	r22, 0x30	; 48
     eae:	71 f0       	breq	.+28     	; 0xecc <LCD_Display_LED+0x126>
     eb0:	61 33       	cpi	r22, 0x31	; 49
     eb2:	b9 f4       	brne	.+46     	; 0xee2 <LCD_Display_LED+0x13c>
		{
			case '1':
			LCD_Write_String("Room 5 Led");
     eb4:	83 e6       	ldi	r24, 0x63	; 99
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
     ebc:	80 ec       	ldi	r24, 0xC0	; 192
     ebe:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			LCD_Write_String ("is Turned on");
     ec2:	87 e2       	ldi	r24, 0x27	; 39
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			break;
     eca:	0b c0       	rjmp	.+22     	; 0xee2 <LCD_Display_LED+0x13c>
			case '0':
			LCD_Write_String("Room 5 Led");
     ecc:	83 e6       	ldi	r24, 0x63	; 99
     ece:	91 e0       	ldi	r25, 0x01	; 1
     ed0:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
     ed4:	80 ec       	ldi	r24, 0xC0	; 192
     ed6:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			LCD_Write_String ("is Turned Off");
     eda:	84 e3       	ldi	r24, 0x34	; 52
     edc:	91 e0       	ldi	r25, 0x01	; 1
     ede:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
     ee2:	2f ef       	ldi	r18, 0xFF	; 255
     ee4:	83 ed       	ldi	r24, 0xD3	; 211
     ee6:	90 e3       	ldi	r25, 0x30	; 48
     ee8:	21 50       	subi	r18, 0x01	; 1
     eea:	80 40       	sbci	r24, 0x00	; 0
     eec:	90 40       	sbci	r25, 0x00	; 0
     eee:	e1 f7       	brne	.-8      	; 0xee8 <LCD_Display_LED+0x142>
     ef0:	00 c0       	rjmp	.+0      	; 0xef2 <LCD_Display_LED+0x14c>
     ef2:	00 00       	nop
			break;
		}
		break;
	}
	_delay_ms(1000);
	LCD_Clear_Screen();
     ef4:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
     ef8:	08 95       	ret

00000efa <LCD_Welcome_Message>:
}

void LCD_Welcome_Message()
{
	LCD_Write_String ("Welcome to Smart");
     efa:	8e e6       	ldi	r24, 0x6E	; 110
     efc:	91 e0       	ldi	r25, 0x01	; 1
     efe:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
	LCD_Send_CMD(Row_2_pos_0);		// Get to the second line
     f02:	80 ec       	ldi	r24, 0xC0	; 192
     f04:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
	LCD_Write_String ("Home System");
     f08:	8f ec       	ldi	r24, 0xCF	; 207
     f0a:	92 e0       	ldi	r25, 0x02	; 2
     f0c:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
     f10:	2f ef       	ldi	r18, 0xFF	; 255
     f12:	83 ed       	ldi	r24, 0xD3	; 211
     f14:	90 e3       	ldi	r25, 0x30	; 48
     f16:	21 50       	subi	r18, 0x01	; 1
     f18:	80 40       	sbci	r24, 0x00	; 0
     f1a:	90 40       	sbci	r25, 0x00	; 0
     f1c:	e1 f7       	brne	.-8      	; 0xf16 <LCD_Welcome_Message+0x1c>
     f1e:	00 c0       	rjmp	.+0      	; 0xf20 <LCD_Welcome_Message+0x26>
     f20:	00 00       	nop
	_delay_ms(1000);
	LCD_Clear_Screen();
     f22:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
     f26:	08 95       	ret

00000f28 <LCD_Rooms_Leds_Control>:



	
void LCD_Rooms_Leds_Control()
{
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
	unsigned char Keypad_Value = 0;	
	unsigned char room_no_temp = 0;
	unsigned char room_on_off_temp = 0;
	
	LCD_Write_String ("Choose a room ");
     f2e:	8f e7       	ldi	r24, 0x7F	; 127
     f30:	91 e0       	ldi	r25, 0x01	; 1
     f32:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
     f36:	2f ef       	ldi	r18, 0xFF	; 255
     f38:	83 ed       	ldi	r24, 0xD3	; 211
     f3a:	90 e3       	ldi	r25, 0x30	; 48
     f3c:	21 50       	subi	r18, 0x01	; 1
     f3e:	80 40       	sbci	r24, 0x00	; 0
     f40:	90 40       	sbci	r25, 0x00	; 0
     f42:	e1 f7       	brne	.-8      	; 0xf3c <LCD_Rooms_Leds_Control+0x14>
     f44:	00 c0       	rjmp	.+0      	; 0xf46 <LCD_Rooms_Leds_Control+0x1e>
     f46:	00 00       	nop
	_delay_ms(1000);
	LCD_Clear_Screen();
     f48:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
	
	LCD_Write_String ("1. Room 1");
     f4c:	8e e8       	ldi	r24, 0x8E	; 142
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
	LCD_Send_CMD(Row_2_pos_0);		// Get to the second line
     f54:	80 ec       	ldi	r24, 0xC0	; 192
     f56:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
	LCD_Write_String ("2. Room 2");
     f5a:	88 e9       	ldi	r24, 0x98	; 152
     f5c:	91 e0       	ldi	r25, 0x01	; 1
     f5e:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
     f62:	2f ef       	ldi	r18, 0xFF	; 255
     f64:	89 e6       	ldi	r24, 0x69	; 105
     f66:	98 e1       	ldi	r25, 0x18	; 24
     f68:	21 50       	subi	r18, 0x01	; 1
     f6a:	80 40       	sbci	r24, 0x00	; 0
     f6c:	90 40       	sbci	r25, 0x00	; 0
     f6e:	e1 f7       	brne	.-8      	; 0xf68 <LCD_Rooms_Leds_Control+0x40>
     f70:	00 c0       	rjmp	.+0      	; 0xf72 <LCD_Rooms_Leds_Control+0x4a>
     f72:	00 00       	nop
	_delay_ms(500);
	LCD_Clear_Screen();
     f74:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
	
	
	LCD_Write_String ("3. Room 3");
     f78:	82 ea       	ldi	r24, 0xA2	; 162
     f7a:	91 e0       	ldi	r25, 0x01	; 1
     f7c:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
	LCD_Send_CMD(Row_2_pos_0);		// Get to the second line
     f80:	80 ec       	ldi	r24, 0xC0	; 192
     f82:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
	LCD_Write_String ("4. Room 4");
     f86:	8c ea       	ldi	r24, 0xAC	; 172
     f88:	91 e0       	ldi	r25, 0x01	; 1
     f8a:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
     f8e:	2f ef       	ldi	r18, 0xFF	; 255
     f90:	89 e6       	ldi	r24, 0x69	; 105
     f92:	98 e1       	ldi	r25, 0x18	; 24
     f94:	21 50       	subi	r18, 0x01	; 1
     f96:	80 40       	sbci	r24, 0x00	; 0
     f98:	90 40       	sbci	r25, 0x00	; 0
     f9a:	e1 f7       	brne	.-8      	; 0xf94 <LCD_Rooms_Leds_Control+0x6c>
     f9c:	00 c0       	rjmp	.+0      	; 0xf9e <LCD_Rooms_Leds_Control+0x76>
     f9e:	00 00       	nop
	_delay_ms(500);
	LCD_Clear_Screen();
     fa0:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
	
	
	LCD_Write_String ("5. Room 5");
     fa4:	86 eb       	ldi	r24, 0xB6	; 182
     fa6:	91 e0       	ldi	r25, 0x01	; 1
     fa8:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
	LCD_Send_CMD(Row_2_pos_0);		// Get to the second line
     fac:	80 ec       	ldi	r24, 0xC0	; 192
     fae:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
	LCD_Write_String ("6. All Rooms");
     fb2:	80 ec       	ldi	r24, 0xC0	; 192
     fb4:	91 e0       	ldi	r25, 0x01	; 1
     fb6:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
     fba:	2f ef       	ldi	r18, 0xFF	; 255
     fbc:	89 e6       	ldi	r24, 0x69	; 105
     fbe:	98 e1       	ldi	r25, 0x18	; 24
     fc0:	21 50       	subi	r18, 0x01	; 1
     fc2:	80 40       	sbci	r24, 0x00	; 0
     fc4:	90 40       	sbci	r25, 0x00	; 0
     fc6:	e1 f7       	brne	.-8      	; 0xfc0 <LCD_Rooms_Leds_Control+0x98>
     fc8:	00 c0       	rjmp	.+0      	; 0xfca <LCD_Rooms_Leds_Control+0xa2>
     fca:	00 00       	nop
	_delay_ms(500);
	LCD_Clear_Screen();
     fcc:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
	
	LCD_Write_String ("Your Choice : ");
     fd0:	8d ec       	ldi	r24, 0xCD	; 205
     fd2:	91 e0       	ldi	r25, 0x01	; 1
     fd4:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
	LCD_Send_CMD(Display_ON_Cusror_ON_Blink_ON);
     fd8:	8f e0       	ldi	r24, 0x0F	; 15
     fda:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
	
	while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
	{
		Keypad_Value = Keypad_Get_Value();
     fde:	0e 94 c8 05 	call	0xb90	; 0xb90 <Keypad_Get_Value>
     fe2:	c8 2f       	mov	r28, r24
	LCD_Clear_Screen();
	
	LCD_Write_String ("Your Choice : ");
	LCD_Send_CMD(Display_ON_Cusror_ON_Blink_ON);
	
	while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
     fe4:	80 ed       	ldi	r24, 0xD0	; 208
     fe6:	8c 0f       	add	r24, r28
     fe8:	8a 30       	cpi	r24, 0x0A	; 10
     fea:	c8 f7       	brcc	.-14     	; 0xfde <LCD_Rooms_Leds_Control+0xb6>
	{
		Keypad_Value = Keypad_Get_Value();
	}
	
	LCD_Write_Char(Keypad_Value);
     fec:	8c 2f       	mov	r24, r28
     fee:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Write_Char>
     ff2:	2f ef       	ldi	r18, 0xFF	; 255
     ff4:	89 e6       	ldi	r24, 0x69	; 105
     ff6:	98 e1       	ldi	r25, 0x18	; 24
     ff8:	21 50       	subi	r18, 0x01	; 1
     ffa:	80 40       	sbci	r24, 0x00	; 0
     ffc:	90 40       	sbci	r25, 0x00	; 0
     ffe:	e1 f7       	brne	.-8      	; 0xff8 <LCD_Rooms_Leds_Control+0xd0>
    1000:	00 c0       	rjmp	.+0      	; 0x1002 <LCD_Rooms_Leds_Control+0xda>
    1002:	00 00       	nop
	_delay_ms(500);
	LCD_Clear_Screen();
    1004:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
	room_no_temp = Keypad_Value;
	
	while (!((room_no_temp >= Ascii_1) && (room_no_temp <= Ascii_6)))
    1008:	8f ec       	ldi	r24, 0xCF	; 207
    100a:	8c 0f       	add	r24, r28
    100c:	86 30       	cpi	r24, 0x06	; 6
    100e:	08 f4       	brcc	.+2      	; 0x1012 <LCD_Rooms_Leds_Control+0xea>
    1010:	da c0       	rjmp	.+436    	; 0x11c6 <LCD_Rooms_Leds_Control+0x29e>
	{
		LCD_Write_String ("Please Choose");
    1012:	8c ed       	ldi	r24, 0xDC	; 220
    1014:	91 e0       	ldi	r25, 0x01	; 1
    1016:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
		LCD_Send_CMD(Row_2_pos_0);
    101a:	80 ec       	ldi	r24, 0xC0	; 192
    101c:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
		LCD_Write_String ("from 1 to 6");	
    1020:	8f e9       	ldi	r24, 0x9F	; 159
    1022:	93 e0       	ldi	r25, 0x03	; 3
    1024:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
    1028:	2f ef       	ldi	r18, 0xFF	; 255
    102a:	83 ed       	ldi	r24, 0xD3	; 211
    102c:	90 e3       	ldi	r25, 0x30	; 48
    102e:	21 50       	subi	r18, 0x01	; 1
    1030:	80 40       	sbci	r24, 0x00	; 0
    1032:	90 40       	sbci	r25, 0x00	; 0
    1034:	e1 f7       	brne	.-8      	; 0x102e <LCD_Rooms_Leds_Control+0x106>
    1036:	00 c0       	rjmp	.+0      	; 0x1038 <LCD_Rooms_Leds_Control+0x110>
    1038:	00 00       	nop
		_delay_ms(1000);
		LCD_Clear_Screen();
    103a:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
		
		Keypad_Value = 0;
		while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
		{
			Keypad_Value = Keypad_Get_Value();
    103e:	0e 94 c8 05 	call	0xb90	; 0xb90 <Keypad_Get_Value>
    1042:	c8 2f       	mov	r28, r24
		LCD_Write_String ("from 1 to 6");	
		_delay_ms(1000);
		LCD_Clear_Screen();
		
		Keypad_Value = 0;
		while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
    1044:	80 ed       	ldi	r24, 0xD0	; 208
    1046:	8c 0f       	add	r24, r28
    1048:	8a 30       	cpi	r24, 0x0A	; 10
    104a:	c8 f7       	brcc	.-14     	; 0x103e <LCD_Rooms_Leds_Control+0x116>
		{
			Keypad_Value = Keypad_Get_Value();
		}
		
		LCD_Write_Char(Keypad_Value);
    104c:	8c 2f       	mov	r24, r28
    104e:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Write_Char>
    1052:	2f ef       	ldi	r18, 0xFF	; 255
    1054:	89 e6       	ldi	r24, 0x69	; 105
    1056:	98 e1       	ldi	r25, 0x18	; 24
    1058:	21 50       	subi	r18, 0x01	; 1
    105a:	80 40       	sbci	r24, 0x00	; 0
    105c:	90 40       	sbci	r25, 0x00	; 0
    105e:	e1 f7       	brne	.-8      	; 0x1058 <LCD_Rooms_Leds_Control+0x130>
    1060:	00 c0       	rjmp	.+0      	; 0x1062 <LCD_Rooms_Leds_Control+0x13a>
    1062:	00 00       	nop
		_delay_ms(500);
		LCD_Clear_Screen();
    1064:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
	LCD_Write_Char(Keypad_Value);
	_delay_ms(500);
	LCD_Clear_Screen();
	room_no_temp = Keypad_Value;
	
	while (!((room_no_temp >= Ascii_1) && (room_no_temp <= Ascii_6)))
    1068:	8f ec       	ldi	r24, 0xCF	; 207
    106a:	8c 0f       	add	r24, r28
    106c:	86 30       	cpi	r24, 0x06	; 6
    106e:	88 f6       	brcc	.-94     	; 0x1012 <LCD_Rooms_Leds_Control+0xea>
    1070:	aa c0       	rjmp	.+340    	; 0x11c6 <LCD_Rooms_Leds_Control+0x29e>
	LCD_Clear_Screen();
	
	Keypad_Value = 0;
	while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
	{
		Keypad_Value = Keypad_Get_Value();
    1072:	0e 94 c8 05 	call	0xb90	; 0xb90 <Keypad_Get_Value>
    1076:	d8 2f       	mov	r29, r24
	LCD_Write_String ("Turn OFF : 0");
	_delay_ms(2000);
	LCD_Clear_Screen();
	
	Keypad_Value = 0;
	while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
    1078:	10 ed       	ldi	r17, 0xD0	; 208
    107a:	18 0f       	add	r17, r24
    107c:	1a 30       	cpi	r17, 0x0A	; 10
    107e:	c8 f7       	brcc	.-14     	; 0x1072 <LCD_Rooms_Leds_Control+0x14a>
	{
		Keypad_Value = Keypad_Get_Value();
	}
	LCD_Write_Char(Keypad_Value);
    1080:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Write_Char>
    1084:	2f ef       	ldi	r18, 0xFF	; 255
    1086:	83 ed       	ldi	r24, 0xD3	; 211
    1088:	90 e3       	ldi	r25, 0x30	; 48
    108a:	21 50       	subi	r18, 0x01	; 1
    108c:	80 40       	sbci	r24, 0x00	; 0
    108e:	90 40       	sbci	r25, 0x00	; 0
    1090:	e1 f7       	brne	.-8      	; 0x108a <LCD_Rooms_Leds_Control+0x162>
    1092:	00 c0       	rjmp	.+0      	; 0x1094 <LCD_Rooms_Leds_Control+0x16c>
    1094:	00 00       	nop
	_delay_ms(1000);
	LCD_Clear_Screen();
    1096:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
	room_on_off_temp = Keypad_Value;
	
	while ((room_on_off_temp != Ascii_0) && (room_on_off_temp != Ascii_1))
    109a:	12 30       	cpi	r17, 0x02	; 2
    109c:	80 f1       	brcs	.+96     	; 0x10fe <LCD_Rooms_Leds_Control+0x1d6>
	{
		LCD_Write_String ("Please Choose");
    109e:	8c ed       	ldi	r24, 0xDC	; 220
    10a0:	91 e0       	ldi	r25, 0x01	; 1
    10a2:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
		LCD_Send_CMD(Row_2_pos_0);
    10a6:	80 ec       	ldi	r24, 0xC0	; 192
    10a8:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
		LCD_Set_Cursor(1,3);
    10ac:	63 e0       	ldi	r22, 0x03	; 3
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	0e 94 c2 06 	call	0xd84	; 0xd84 <LCD_Set_Cursor>
		LCD_Write_String ("1 or 0");
    10b4:	82 ed       	ldi	r24, 0xD2	; 210
    10b6:	93 e0       	ldi	r25, 0x03	; 3
    10b8:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
    10bc:	2f ef       	ldi	r18, 0xFF	; 255
    10be:	83 ed       	ldi	r24, 0xD3	; 211
    10c0:	90 e3       	ldi	r25, 0x30	; 48
    10c2:	21 50       	subi	r18, 0x01	; 1
    10c4:	80 40       	sbci	r24, 0x00	; 0
    10c6:	90 40       	sbci	r25, 0x00	; 0
    10c8:	e1 f7       	brne	.-8      	; 0x10c2 <LCD_Rooms_Leds_Control+0x19a>
    10ca:	00 c0       	rjmp	.+0      	; 0x10cc <LCD_Rooms_Leds_Control+0x1a4>
    10cc:	00 00       	nop
		_delay_ms(1000);
		LCD_Clear_Screen();
    10ce:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
		
		Keypad_Value = 0;
		while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
		{
			Keypad_Value = Keypad_Get_Value();
    10d2:	0e 94 c8 05 	call	0xb90	; 0xb90 <Keypad_Get_Value>
    10d6:	d8 2f       	mov	r29, r24
		LCD_Write_String ("1 or 0");
		_delay_ms(1000);
		LCD_Clear_Screen();
		
		Keypad_Value = 0;
		while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
    10d8:	10 ed       	ldi	r17, 0xD0	; 208
    10da:	18 0f       	add	r17, r24
    10dc:	1a 30       	cpi	r17, 0x0A	; 10
    10de:	c8 f7       	brcc	.-14     	; 0x10d2 <LCD_Rooms_Leds_Control+0x1aa>
		{
			Keypad_Value = Keypad_Get_Value();
		}
		
		LCD_Write_Char(Keypad_Value);
    10e0:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Write_Char>
    10e4:	2f ef       	ldi	r18, 0xFF	; 255
    10e6:	89 e6       	ldi	r24, 0x69	; 105
    10e8:	98 e1       	ldi	r25, 0x18	; 24
    10ea:	21 50       	subi	r18, 0x01	; 1
    10ec:	80 40       	sbci	r24, 0x00	; 0
    10ee:	90 40       	sbci	r25, 0x00	; 0
    10f0:	e1 f7       	brne	.-8      	; 0x10ea <LCD_Rooms_Leds_Control+0x1c2>
    10f2:	00 c0       	rjmp	.+0      	; 0x10f4 <LCD_Rooms_Leds_Control+0x1cc>
    10f4:	00 00       	nop
		_delay_ms(500);
		LCD_Clear_Screen();
    10f6:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
	LCD_Write_Char(Keypad_Value);
	_delay_ms(1000);
	LCD_Clear_Screen();
	room_on_off_temp = Keypad_Value;
	
	while ((room_on_off_temp != Ascii_0) && (room_on_off_temp != Ascii_1))
    10fa:	12 30       	cpi	r17, 0x02	; 2
    10fc:	80 f6       	brcc	.-96     	; 0x109e <LCD_Rooms_Leds_Control+0x176>
		LCD_Clear_Screen();
		room_on_off_temp = Keypad_Value;
	}
	Keypad_Value = 0;
	
	if(room_no_temp == Ascii_6)
    10fe:	c6 33       	cpi	r28, 0x36	; 54
    1100:	09 f0       	breq	.+2      	; 0x1104 <LCD_Rooms_Leds_Control+0x1dc>
    1102:	58 c0       	rjmp	.+176    	; 0x11b4 <LCD_Rooms_Leds_Control+0x28c>
	{
		if(room_on_off_temp == Ascii_1)
    1104:	d1 33       	cpi	r29, 0x31	; 49
    1106:	59 f5       	brne	.+86     	; 0x115e <LCD_Rooms_Leds_Control+0x236>
		{
			LED_STAT(ON,Room1);
    1108:	61 e3       	ldi	r22, 0x31	; 49
    110a:	81 e3       	ldi	r24, 0x31	; 49
    110c:	0e 94 80 0a 	call	0x1500	; 0x1500 <LED_STAT>
			LED_STAT(ON,Room2);
    1110:	62 e3       	ldi	r22, 0x32	; 50
    1112:	81 e3       	ldi	r24, 0x31	; 49
    1114:	0e 94 80 0a 	call	0x1500	; 0x1500 <LED_STAT>
			LED_STAT(ON,Room3);
    1118:	63 e3       	ldi	r22, 0x33	; 51
    111a:	81 e3       	ldi	r24, 0x31	; 49
    111c:	0e 94 80 0a 	call	0x1500	; 0x1500 <LED_STAT>
			LED_STAT(ON,Room4);
    1120:	64 e3       	ldi	r22, 0x34	; 52
    1122:	81 e3       	ldi	r24, 0x31	; 49
    1124:	0e 94 80 0a 	call	0x1500	; 0x1500 <LED_STAT>
			LED_STAT(ON,Room5);
    1128:	65 e3       	ldi	r22, 0x35	; 53
    112a:	81 e3       	ldi	r24, 0x31	; 49
    112c:	0e 94 80 0a 	call	0x1500	; 0x1500 <LED_STAT>
			
			LCD_Write_String("All Leds are ");
    1130:	8a ee       	ldi	r24, 0xEA	; 234
    1132:	91 e0       	ldi	r25, 0x01	; 1
    1134:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    1138:	80 ec       	ldi	r24, 0xC0	; 192
    113a:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			LCD_Write_String ("Turned On");
    113e:	86 ee       	ldi	r24, 0xE6	; 230
    1140:	93 e0       	ldi	r25, 0x03	; 3
    1142:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
    1146:	2f ef       	ldi	r18, 0xFF	; 255
    1148:	83 ed       	ldi	r24, 0xD3	; 211
    114a:	90 e3       	ldi	r25, 0x30	; 48
    114c:	21 50       	subi	r18, 0x01	; 1
    114e:	80 40       	sbci	r24, 0x00	; 0
    1150:	90 40       	sbci	r25, 0x00	; 0
    1152:	e1 f7       	brne	.-8      	; 0x114c <LCD_Rooms_Leds_Control+0x224>
    1154:	00 c0       	rjmp	.+0      	; 0x1156 <LCD_Rooms_Leds_Control+0x22e>
    1156:	00 00       	nop
			_delay_ms(1000);
			LCD_Clear_Screen();
    1158:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
    115c:	4e c0       	rjmp	.+156    	; 0x11fa <LCD_Rooms_Leds_Control+0x2d2>
		}
		else
		{
			LED_STAT(OFF,Room1);
    115e:	61 e3       	ldi	r22, 0x31	; 49
    1160:	80 e3       	ldi	r24, 0x30	; 48
    1162:	0e 94 80 0a 	call	0x1500	; 0x1500 <LED_STAT>
			LED_STAT(OFF,Room2);
    1166:	62 e3       	ldi	r22, 0x32	; 50
    1168:	80 e3       	ldi	r24, 0x30	; 48
    116a:	0e 94 80 0a 	call	0x1500	; 0x1500 <LED_STAT>
			LED_STAT(OFF,Room3);
    116e:	63 e3       	ldi	r22, 0x33	; 51
    1170:	80 e3       	ldi	r24, 0x30	; 48
    1172:	0e 94 80 0a 	call	0x1500	; 0x1500 <LED_STAT>
			LED_STAT(OFF,Room4);
    1176:	64 e3       	ldi	r22, 0x34	; 52
    1178:	80 e3       	ldi	r24, 0x30	; 48
    117a:	0e 94 80 0a 	call	0x1500	; 0x1500 <LED_STAT>
			LED_STAT(OFF,Room5);
    117e:	65 e3       	ldi	r22, 0x35	; 53
    1180:	80 e3       	ldi	r24, 0x30	; 48
    1182:	0e 94 80 0a 	call	0x1500	; 0x1500 <LED_STAT>
			
			LCD_Write_String("All Leds are ");
    1186:	8a ee       	ldi	r24, 0xEA	; 234
    1188:	91 e0       	ldi	r25, 0x01	; 1
    118a:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    118e:	80 ec       	ldi	r24, 0xC0	; 192
    1190:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			LCD_Write_String ("Turned OFF");
    1194:	88 ef       	ldi	r24, 0xF8	; 248
    1196:	91 e0       	ldi	r25, 0x01	; 1
    1198:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
    119c:	2f ef       	ldi	r18, 0xFF	; 255
    119e:	83 ed       	ldi	r24, 0xD3	; 211
    11a0:	90 e3       	ldi	r25, 0x30	; 48
    11a2:	21 50       	subi	r18, 0x01	; 1
    11a4:	80 40       	sbci	r24, 0x00	; 0
    11a6:	90 40       	sbci	r25, 0x00	; 0
    11a8:	e1 f7       	brne	.-8      	; 0x11a2 <LCD_Rooms_Leds_Control+0x27a>
    11aa:	00 c0       	rjmp	.+0      	; 0x11ac <LCD_Rooms_Leds_Control+0x284>
    11ac:	00 00       	nop
			_delay_ms(1000);
			LCD_Clear_Screen();
    11ae:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
    11b2:	23 c0       	rjmp	.+70     	; 0x11fa <LCD_Rooms_Leds_Control+0x2d2>
		}
	}
	else
	{
		LED_STAT(room_on_off_temp,room_no_temp);
    11b4:	6c 2f       	mov	r22, r28
    11b6:	8d 2f       	mov	r24, r29
    11b8:	0e 94 80 0a 	call	0x1500	; 0x1500 <LED_STAT>
		LCD_Display_LED (room_no_temp, room_on_off_temp);
    11bc:	6d 2f       	mov	r22, r29
    11be:	8c 2f       	mov	r24, r28
    11c0:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_Display_LED>
	}
}
    11c4:	1a c0       	rjmp	.+52     	; 0x11fa <LCD_Rooms_Leds_Control+0x2d2>
		_delay_ms(500);
		LCD_Clear_Screen();
		room_no_temp = Keypad_Value;
	}
	
	LCD_Send_CMD(Display_ON_Cusror_OFF_Blink_OFF);
    11c6:	8c e0       	ldi	r24, 0x0C	; 12
    11c8:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
	
	LCD_Write_String ("Turn ON : 1");
    11cc:	83 e0       	ldi	r24, 0x03	; 3
    11ce:	92 e0       	ldi	r25, 0x02	; 2
    11d0:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
	LCD_Send_CMD(Row_2_pos_0);
    11d4:	80 ec       	ldi	r24, 0xC0	; 192
    11d6:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
	LCD_Write_String ("Turn OFF : 0");
    11da:	8f e0       	ldi	r24, 0x0F	; 15
    11dc:	92 e0       	ldi	r25, 0x02	; 2
    11de:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
    11e2:	2f ef       	ldi	r18, 0xFF	; 255
    11e4:	87 ea       	ldi	r24, 0xA7	; 167
    11e6:	91 e6       	ldi	r25, 0x61	; 97
    11e8:	21 50       	subi	r18, 0x01	; 1
    11ea:	80 40       	sbci	r24, 0x00	; 0
    11ec:	90 40       	sbci	r25, 0x00	; 0
    11ee:	e1 f7       	brne	.-8      	; 0x11e8 <LCD_Rooms_Leds_Control+0x2c0>
    11f0:	00 c0       	rjmp	.+0      	; 0x11f2 <LCD_Rooms_Leds_Control+0x2ca>
    11f2:	00 00       	nop
	_delay_ms(2000);
	LCD_Clear_Screen();
    11f4:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
    11f8:	3c cf       	rjmp	.-392    	; 0x1072 <LCD_Rooms_Leds_Control+0x14a>
	else
	{
		LED_STAT(room_on_off_temp,room_no_temp);
		LCD_Display_LED (room_no_temp, room_on_off_temp);
	}
}
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	1f 91       	pop	r17
    1200:	08 95       	ret

00001202 <LCD_User_Menu>:


void LCD_User_Menu()
{
	LCD_Write_String("1.Control Leds");
    1202:	8c e1       	ldi	r24, 0x1C	; 28
    1204:	92 e0       	ldi	r25, 0x02	; 2
    1206:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
	LCD_Send_CMD(Row_2_pos_0);
    120a:	80 ec       	ldi	r24, 0xC0	; 192
    120c:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
	LCD_Write_String ("2.Dimming Lamp");
    1210:	8b e2       	ldi	r24, 0x2B	; 43
    1212:	92 e0       	ldi	r25, 0x02	; 2
    1214:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
    1218:	2f ef       	ldi	r18, 0xFF	; 255
    121a:	89 e6       	ldi	r24, 0x69	; 105
    121c:	98 e1       	ldi	r25, 0x18	; 24
    121e:	21 50       	subi	r18, 0x01	; 1
    1220:	80 40       	sbci	r24, 0x00	; 0
    1222:	90 40       	sbci	r25, 0x00	; 0
    1224:	e1 f7       	brne	.-8      	; 0x121e <LCD_User_Menu+0x1c>
    1226:	00 c0       	rjmp	.+0      	; 0x1228 <LCD_User_Menu+0x26>
    1228:	00 00       	nop
	_delay_ms(500);
	LCD_Clear_Screen();
    122a:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
	
	LCD_Write_String("3.Close the Door");
    122e:	8a e3       	ldi	r24, 0x3A	; 58
    1230:	92 e0       	ldi	r25, 0x02	; 2
    1232:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
	LCD_Send_CMD(Row_2_pos_0);
    1236:	80 ec       	ldi	r24, 0xC0	; 192
    1238:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
	LCD_Write_String ("4.Logout");
    123c:	8b e4       	ldi	r24, 0x4B	; 75
    123e:	92 e0       	ldi	r25, 0x02	; 2
    1240:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
    1244:	2f ef       	ldi	r18, 0xFF	; 255
    1246:	89 e6       	ldi	r24, 0x69	; 105
    1248:	98 e1       	ldi	r25, 0x18	; 24
    124a:	21 50       	subi	r18, 0x01	; 1
    124c:	80 40       	sbci	r24, 0x00	; 0
    124e:	90 40       	sbci	r25, 0x00	; 0
    1250:	e1 f7       	brne	.-8      	; 0x124a <LCD_User_Menu+0x48>
    1252:	00 c0       	rjmp	.+0      	; 0x1254 <LCD_User_Menu+0x52>
    1254:	00 00       	nop
	_delay_ms(500);
	LCD_Clear_Screen();
    1256:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
    125a:	08 95       	ret

0000125c <LCD_User_Interfacing>:
}



void LCD_User_Interfacing()
{
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
	unsigned char option = 0;
	unsigned char brightness_level = 0;
	
	while(option != Ascii_4)
	{
		LCD_User_Menu();
    1260:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_User_Menu>
		
		LCD_Write_String ("Your Choice : ");
    1264:	8d ec       	ldi	r24, 0xCD	; 205
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
		LCD_Send_CMD(Display_ON_Cusror_ON_Blink_ON);
    126c:	8f e0       	ldi	r24, 0x0F	; 15
    126e:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
		
		Keypad_Value = 0;
		while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
		{
			Keypad_Value = Keypad_Get_Value();
    1272:	0e 94 c8 05 	call	0xb90	; 0xb90 <Keypad_Get_Value>
    1276:	c8 2f       	mov	r28, r24
			AC_ON();
    1278:	0e 94 53 00 	call	0xa6	; 0xa6 <AC_ON>
		
		LCD_Write_String ("Your Choice : ");
		LCD_Send_CMD(Display_ON_Cusror_ON_Blink_ON);
		
		Keypad_Value = 0;
		while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
    127c:	80 ed       	ldi	r24, 0xD0	; 208
    127e:	8c 0f       	add	r24, r28
    1280:	8a 30       	cpi	r24, 0x0A	; 10
    1282:	b8 f7       	brcc	.-18     	; 0x1272 <LCD_User_Interfacing+0x16>
		{
			Keypad_Value = Keypad_Get_Value();
			AC_ON();
		}
		
		LCD_Write_Char(Keypad_Value);
    1284:	8c 2f       	mov	r24, r28
    1286:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Write_Char>
    128a:	2f ef       	ldi	r18, 0xFF	; 255
    128c:	89 e6       	ldi	r24, 0x69	; 105
    128e:	98 e1       	ldi	r25, 0x18	; 24
    1290:	21 50       	subi	r18, 0x01	; 1
    1292:	80 40       	sbci	r24, 0x00	; 0
    1294:	90 40       	sbci	r25, 0x00	; 0
    1296:	e1 f7       	brne	.-8      	; 0x1290 <LCD_User_Interfacing+0x34>
    1298:	00 c0       	rjmp	.+0      	; 0x129a <LCD_User_Interfacing+0x3e>
    129a:	00 00       	nop
		_delay_ms(500);
		LCD_Clear_Screen();
    129c:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
		
		while (!((Keypad_Value >= Ascii_1) && (Keypad_Value <= Ascii_4)))
    12a0:	8f ec       	ldi	r24, 0xCF	; 207
    12a2:	8c 0f       	add	r24, r28
    12a4:	84 30       	cpi	r24, 0x04	; 4
    12a6:	e8 f1       	brcs	.+122    	; 0x1322 <LCD_User_Interfacing+0xc6>
		{
			
			LCD_Send_CMD(Display_ON_Cusror_ON_Blink_OFF);
    12a8:	8e e0       	ldi	r24, 0x0E	; 14
    12aa:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			LCD_Write_String ("Please Choose");
    12ae:	8c ed       	ldi	r24, 0xDC	; 220
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    12b6:	80 ec       	ldi	r24, 0xC0	; 192
    12b8:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			LCD_Write_String ("from 1 to 4");
    12bc:	8f ea       	ldi	r24, 0xAF	; 175
    12be:	97 e0       	ldi	r25, 0x07	; 7
    12c0:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
    12c4:	2f ef       	ldi	r18, 0xFF	; 255
    12c6:	83 ed       	ldi	r24, 0xD3	; 211
    12c8:	90 e3       	ldi	r25, 0x30	; 48
    12ca:	21 50       	subi	r18, 0x01	; 1
    12cc:	80 40       	sbci	r24, 0x00	; 0
    12ce:	90 40       	sbci	r25, 0x00	; 0
    12d0:	e1 f7       	brne	.-8      	; 0x12ca <LCD_User_Interfacing+0x6e>
    12d2:	00 c0       	rjmp	.+0      	; 0x12d4 <LCD_User_Interfacing+0x78>
    12d4:	00 00       	nop
			_delay_ms(1000);
			LCD_Clear_Screen();
    12d6:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
			
			LCD_User_Menu();
    12da:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_User_Menu>
			LCD_Write_String ("Your Choice : ");
    12de:	8d ec       	ldi	r24, 0xCD	; 205
    12e0:	91 e0       	ldi	r25, 0x01	; 1
    12e2:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Display_ON_Cusror_ON_Blink_ON);
    12e6:	8f e0       	ldi	r24, 0x0F	; 15
    12e8:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			
			Keypad_Value = 0;
			while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
			{
				Keypad_Value = Keypad_Get_Value();
    12ec:	0e 94 c8 05 	call	0xb90	; 0xb90 <Keypad_Get_Value>
    12f0:	c8 2f       	mov	r28, r24
				AC_ON();
    12f2:	0e 94 53 00 	call	0xa6	; 0xa6 <AC_ON>
			LCD_User_Menu();
			LCD_Write_String ("Your Choice : ");
			LCD_Send_CMD(Display_ON_Cusror_ON_Blink_ON);
			
			Keypad_Value = 0;
			while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
    12f6:	80 ed       	ldi	r24, 0xD0	; 208
    12f8:	8c 0f       	add	r24, r28
    12fa:	8a 30       	cpi	r24, 0x0A	; 10
    12fc:	b8 f7       	brcc	.-18     	; 0x12ec <LCD_User_Interfacing+0x90>
			{
				Keypad_Value = Keypad_Get_Value();
				AC_ON();
			}
			
			LCD_Write_Char(Keypad_Value);
    12fe:	8c 2f       	mov	r24, r28
    1300:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Write_Char>
    1304:	2f ef       	ldi	r18, 0xFF	; 255
    1306:	89 e6       	ldi	r24, 0x69	; 105
    1308:	98 e1       	ldi	r25, 0x18	; 24
    130a:	21 50       	subi	r18, 0x01	; 1
    130c:	80 40       	sbci	r24, 0x00	; 0
    130e:	90 40       	sbci	r25, 0x00	; 0
    1310:	e1 f7       	brne	.-8      	; 0x130a <LCD_User_Interfacing+0xae>
    1312:	00 c0       	rjmp	.+0      	; 0x1314 <LCD_User_Interfacing+0xb8>
    1314:	00 00       	nop
			_delay_ms(500);
			LCD_Clear_Screen();
    1316:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
		
		LCD_Write_Char(Keypad_Value);
		_delay_ms(500);
		LCD_Clear_Screen();
		
		while (!((Keypad_Value >= Ascii_1) && (Keypad_Value <= Ascii_4)))
    131a:	8f ec       	ldi	r24, 0xCF	; 207
    131c:	8c 0f       	add	r24, r28
    131e:	84 30       	cpi	r24, 0x04	; 4
    1320:	18 f6       	brcc	.-122    	; 0x12a8 <LCD_User_Interfacing+0x4c>
			LCD_Write_Char(Keypad_Value);
			_delay_ms(500);
			LCD_Clear_Screen();
		}
		
		LCD_Send_CMD(Display_ON_Cusror_OFF_Blink_OFF);
    1322:	8c e0       	ldi	r24, 0x0C	; 12
    1324:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
		option = Keypad_Value;
		Keypad_Value = 0;
		
		
		if(option == '1')
    1328:	c1 33       	cpi	r28, 0x31	; 49
    132a:	19 f4       	brne	.+6      	; 0x1332 <LCD_User_Interfacing+0xd6>
		{
			LCD_Rooms_Leds_Control();
    132c:	0e 94 94 07 	call	0xf28	; 0xf28 <LCD_Rooms_Leds_Control>
    1330:	97 cf       	rjmp	.-210    	; 0x1260 <LCD_User_Interfacing+0x4>
		}
		else if(option == '2')
    1332:	c2 33       	cpi	r28, 0x32	; 50
    1334:	09 f0       	breq	.+2      	; 0x1338 <LCD_User_Interfacing+0xdc>
    1336:	ba c0       	rjmp	.+372    	; 0x14ac <LCD_User_Interfacing+0x250>
		{
			LCD_Write_String ("The Brightness");
    1338:	84 e5       	ldi	r24, 0x54	; 84
    133a:	92 e0       	ldi	r25, 0x02	; 2
    133c:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    1340:	80 ec       	ldi	r24, 0xC0	; 192
    1342:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			LCD_Write_String ("percentages are");
    1346:	83 e6       	ldi	r24, 0x63	; 99
    1348:	92 e0       	ldi	r25, 0x02	; 2
    134a:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
    134e:	2f ef       	ldi	r18, 0xFF	; 255
    1350:	89 e6       	ldi	r24, 0x69	; 105
    1352:	98 e1       	ldi	r25, 0x18	; 24
    1354:	21 50       	subi	r18, 0x01	; 1
    1356:	80 40       	sbci	r24, 0x00	; 0
    1358:	90 40       	sbci	r25, 0x00	; 0
    135a:	e1 f7       	brne	.-8      	; 0x1354 <LCD_User_Interfacing+0xf8>
    135c:	00 c0       	rjmp	.+0      	; 0x135e <LCD_User_Interfacing+0x102>
    135e:	00 00       	nop
			_delay_ms(500);
			LCD_Clear_Screen();
    1360:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
			
			LCD_Write_String ("0. 0 % (OFF)");
    1364:	83 e7       	ldi	r24, 0x73	; 115
    1366:	92 e0       	ldi	r25, 0x02	; 2
    1368:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    136c:	80 ec       	ldi	r24, 0xC0	; 192
    136e:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			LCD_Write_String ("1. 25 % ");
    1372:	80 e8       	ldi	r24, 0x80	; 128
    1374:	92 e0       	ldi	r25, 0x02	; 2
    1376:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
    137a:	2f ef       	ldi	r18, 0xFF	; 255
    137c:	89 e6       	ldi	r24, 0x69	; 105
    137e:	98 e1       	ldi	r25, 0x18	; 24
    1380:	21 50       	subi	r18, 0x01	; 1
    1382:	80 40       	sbci	r24, 0x00	; 0
    1384:	90 40       	sbci	r25, 0x00	; 0
    1386:	e1 f7       	brne	.-8      	; 0x1380 <LCD_User_Interfacing+0x124>
    1388:	00 c0       	rjmp	.+0      	; 0x138a <LCD_User_Interfacing+0x12e>
    138a:	00 00       	nop
			_delay_ms(500);
			LCD_Clear_Screen();
    138c:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
			
			LCD_Write_String ("2. 50 % ");
    1390:	89 e8       	ldi	r24, 0x89	; 137
    1392:	92 e0       	ldi	r25, 0x02	; 2
    1394:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    1398:	80 ec       	ldi	r24, 0xC0	; 192
    139a:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			LCD_Write_String ("3. 75 % ");
    139e:	82 e9       	ldi	r24, 0x92	; 146
    13a0:	92 e0       	ldi	r25, 0x02	; 2
    13a2:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
    13a6:	2f ef       	ldi	r18, 0xFF	; 255
    13a8:	89 e6       	ldi	r24, 0x69	; 105
    13aa:	98 e1       	ldi	r25, 0x18	; 24
    13ac:	21 50       	subi	r18, 0x01	; 1
    13ae:	80 40       	sbci	r24, 0x00	; 0
    13b0:	90 40       	sbci	r25, 0x00	; 0
    13b2:	e1 f7       	brne	.-8      	; 0x13ac <LCD_User_Interfacing+0x150>
    13b4:	00 c0       	rjmp	.+0      	; 0x13b6 <LCD_User_Interfacing+0x15a>
    13b6:	00 00       	nop
			_delay_ms(500);
			LCD_Clear_Screen();
    13b8:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
			
			LCD_Write_String ("4. 100 % ");
    13bc:	8b e9       	ldi	r24, 0x9B	; 155
    13be:	92 e0       	ldi	r25, 0x02	; 2
    13c0:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    13c4:	80 ec       	ldi	r24, 0xC0	; 192
    13c6:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			LCD_Write_String ("(Maximum Power)");
    13ca:	8a e5       	ldi	r24, 0x5A	; 90
    13cc:	95 e0       	ldi	r25, 0x05	; 5
    13ce:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
    13d2:	2f ef       	ldi	r18, 0xFF	; 255
    13d4:	89 e6       	ldi	r24, 0x69	; 105
    13d6:	98 e1       	ldi	r25, 0x18	; 24
    13d8:	21 50       	subi	r18, 0x01	; 1
    13da:	80 40       	sbci	r24, 0x00	; 0
    13dc:	90 40       	sbci	r25, 0x00	; 0
    13de:	e1 f7       	brne	.-8      	; 0x13d8 <LCD_User_Interfacing+0x17c>
    13e0:	00 c0       	rjmp	.+0      	; 0x13e2 <LCD_User_Interfacing+0x186>
    13e2:	00 00       	nop
			_delay_ms(500);
			LCD_Clear_Screen();
    13e4:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
			
			
			LCD_Write_String ("Your Choice : ");
    13e8:	8d ec       	ldi	r24, 0xCD	; 205
    13ea:	91 e0       	ldi	r25, 0x01	; 1
    13ec:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Display_ON_Cusror_ON_Blink_ON);
    13f0:	8f e0       	ldi	r24, 0x0F	; 15
    13f2:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			
			while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
			{
				Keypad_Value = Keypad_Get_Value();
    13f6:	0e 94 c8 05 	call	0xb90	; 0xb90 <Keypad_Get_Value>
    13fa:	c8 2f       	mov	r28, r24
				AC_ON();
    13fc:	0e 94 53 00 	call	0xa6	; 0xa6 <AC_ON>
			
			
			LCD_Write_String ("Your Choice : ");
			LCD_Send_CMD(Display_ON_Cusror_ON_Blink_ON);
			
			while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
    1400:	d0 ed       	ldi	r29, 0xD0	; 208
    1402:	dc 0f       	add	r29, r28
    1404:	da 30       	cpi	r29, 0x0A	; 10
    1406:	b8 f7       	brcc	.-18     	; 0x13f6 <LCD_User_Interfacing+0x19a>
			{
				Keypad_Value = Keypad_Get_Value();
				AC_ON();
			}
			
			LCD_Write_Char(Keypad_Value);
    1408:	8c 2f       	mov	r24, r28
    140a:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Write_Char>
    140e:	2f ef       	ldi	r18, 0xFF	; 255
    1410:	89 e6       	ldi	r24, 0x69	; 105
    1412:	98 e1       	ldi	r25, 0x18	; 24
    1414:	21 50       	subi	r18, 0x01	; 1
    1416:	80 40       	sbci	r24, 0x00	; 0
    1418:	90 40       	sbci	r25, 0x00	; 0
    141a:	e1 f7       	brne	.-8      	; 0x1414 <LCD_User_Interfacing+0x1b8>
    141c:	00 c0       	rjmp	.+0      	; 0x141e <LCD_User_Interfacing+0x1c2>
    141e:	00 00       	nop
			_delay_ms(500);
			LCD_Clear_Screen();
    1420:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
			
			while (!((Keypad_Value >= Ascii_0) && (Keypad_Value <= Ascii_4)))
    1424:	d5 30       	cpi	r29, 0x05	; 5
    1426:	d8 f1       	brcs	.+118    	; 0x149e <LCD_User_Interfacing+0x242>
			{
				LCD_Send_CMD(Display_ON_Cusror_ON_Blink_OFF);
    1428:	8e e0       	ldi	r24, 0x0E	; 14
    142a:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
				LCD_Write_String ("Please Choose");
    142e:	8c ed       	ldi	r24, 0xDC	; 220
    1430:	91 e0       	ldi	r25, 0x01	; 1
    1432:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
				LCD_Send_CMD(Row_2_pos_0);
    1436:	80 ec       	ldi	r24, 0xC0	; 192
    1438:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
				LCD_Write_String ("from 0 to 4");
    143c:	8d e7       	ldi	r24, 0x7D	; 125
    143e:	95 e0       	ldi	r25, 0x05	; 5
    1440:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
    1444:	2f ef       	ldi	r18, 0xFF	; 255
    1446:	83 ed       	ldi	r24, 0xD3	; 211
    1448:	90 e3       	ldi	r25, 0x30	; 48
    144a:	21 50       	subi	r18, 0x01	; 1
    144c:	80 40       	sbci	r24, 0x00	; 0
    144e:	90 40       	sbci	r25, 0x00	; 0
    1450:	e1 f7       	brne	.-8      	; 0x144a <LCD_User_Interfacing+0x1ee>
    1452:	00 c0       	rjmp	.+0      	; 0x1454 <LCD_User_Interfacing+0x1f8>
    1454:	00 00       	nop
				_delay_ms(1000);
				LCD_Clear_Screen();
    1456:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
				
				LCD_User_Menu();
    145a:	0e 94 01 09 	call	0x1202	; 0x1202 <LCD_User_Menu>
				LCD_Write_String ("Your Choice : ");
    145e:	8d ec       	ldi	r24, 0xCD	; 205
    1460:	91 e0       	ldi	r25, 0x01	; 1
    1462:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
				LCD_Send_CMD(Display_ON_Cusror_ON_Blink_ON);
    1466:	8f e0       	ldi	r24, 0x0F	; 15
    1468:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
				
				Keypad_Value = 0;
				while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
				{
					Keypad_Value = Keypad_Get_Value();
    146c:	0e 94 c8 05 	call	0xb90	; 0xb90 <Keypad_Get_Value>
    1470:	c8 2f       	mov	r28, r24
					AC_ON();
    1472:	0e 94 53 00 	call	0xa6	; 0xa6 <AC_ON>
				LCD_User_Menu();
				LCD_Write_String ("Your Choice : ");
				LCD_Send_CMD(Display_ON_Cusror_ON_Blink_ON);
				
				Keypad_Value = 0;
				while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
    1476:	d0 ed       	ldi	r29, 0xD0	; 208
    1478:	dc 0f       	add	r29, r28
    147a:	da 30       	cpi	r29, 0x0A	; 10
    147c:	b8 f7       	brcc	.-18     	; 0x146c <LCD_User_Interfacing+0x210>
				{
					Keypad_Value = Keypad_Get_Value();
					AC_ON();
				}
				
				LCD_Write_Char(Keypad_Value);
    147e:	8c 2f       	mov	r24, r28
    1480:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <LCD_Write_Char>
    1484:	2f ef       	ldi	r18, 0xFF	; 255
    1486:	89 e6       	ldi	r24, 0x69	; 105
    1488:	98 e1       	ldi	r25, 0x18	; 24
    148a:	21 50       	subi	r18, 0x01	; 1
    148c:	80 40       	sbci	r24, 0x00	; 0
    148e:	90 40       	sbci	r25, 0x00	; 0
    1490:	e1 f7       	brne	.-8      	; 0x148a <LCD_User_Interfacing+0x22e>
    1492:	00 c0       	rjmp	.+0      	; 0x1494 <LCD_User_Interfacing+0x238>
    1494:	00 00       	nop
				_delay_ms(500);
				LCD_Clear_Screen();
    1496:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
			
			LCD_Write_Char(Keypad_Value);
			_delay_ms(500);
			LCD_Clear_Screen();
			
			while (!((Keypad_Value >= Ascii_0) && (Keypad_Value <= Ascii_4)))
    149a:	d5 30       	cpi	r29, 0x05	; 5
    149c:	28 f6       	brcc	.-118    	; 0x1428 <LCD_User_Interfacing+0x1cc>
				LCD_Write_Char(Keypad_Value);
				_delay_ms(500);
				LCD_Clear_Screen();
			}
			
			LCD_Send_CMD(Display_ON_Cusror_OFF_Blink_OFF);
    149e:	8c e0       	ldi	r24, 0x0C	; 12
    14a0:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			brightness_level = Keypad_Value;
			Keypad_Value = 0;
			
			DIMMER_CONTROL(brightness_level);
    14a4:	8c 2f       	mov	r24, r28
    14a6:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <DIMMER_CONTROL>
    14aa:	da ce       	rjmp	.-588    	; 0x1260 <LCD_User_Interfacing+0x4>
		}
		
		
		else if(option == '3')
    14ac:	c3 33       	cpi	r28, 0x33	; 51
    14ae:	c9 f4       	brne	.+50     	; 0x14e2 <LCD_User_Interfacing+0x286>
		{
			closeDoor();
    14b0:	0e 94 0f 0b 	call	0x161e	; 0x161e <closeDoor>
			
			LCD_Write_String("  The door is");
    14b4:	85 ea       	ldi	r24, 0xA5	; 165
    14b6:	92 e0       	ldi	r25, 0x02	; 2
    14b8:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    14bc:	80 ec       	ldi	r24, 0xC0	; 192
    14be:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			LCD_Write_String("    Closed");
    14c2:	83 eb       	ldi	r24, 0xB3	; 179
    14c4:	92 e0       	ldi	r25, 0x02	; 2
    14c6:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
    14ca:	2f ef       	ldi	r18, 0xFF	; 255
    14cc:	83 ed       	ldi	r24, 0xD3	; 211
    14ce:	90 e3       	ldi	r25, 0x30	; 48
    14d0:	21 50       	subi	r18, 0x01	; 1
    14d2:	80 40       	sbci	r24, 0x00	; 0
    14d4:	90 40       	sbci	r25, 0x00	; 0
    14d6:	e1 f7       	brne	.-8      	; 0x14d0 <LCD_User_Interfacing+0x274>
    14d8:	00 c0       	rjmp	.+0      	; 0x14da <LCD_User_Interfacing+0x27e>
    14da:	00 00       	nop
			_delay_ms(1000);
			LCD_Clear_Screen();
    14dc:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
    14e0:	bf ce       	rjmp	.-642    	; 0x1260 <LCD_User_Interfacing+0x4>
{
	unsigned char Keypad_Value = 0;
	unsigned char option = 0;
	unsigned char brightness_level = 0;
	
	while(option != Ascii_4)
    14e2:	c4 33       	cpi	r28, 0x34	; 52
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <LCD_User_Interfacing+0x28c>
    14e6:	bc ce       	rjmp	.-648    	; 0x1260 <LCD_User_Interfacing+0x4>
		{
			
		}
		
	}
    14e8:	df 91       	pop	r29
    14ea:	cf 91       	pop	r28
    14ec:	08 95       	ret

000014ee <BUZZER_START>:
    14ee:	8f 9a       	sbi	0x11, 7	; 17
    14f0:	08 95       	ret

000014f2 <LED_START>:
    14f2:	b8 9a       	sbi	0x17, 0	; 23
    14f4:	b9 9a       	sbi	0x17, 1	; 23
    14f6:	a2 9a       	sbi	0x14, 2	; 20
    14f8:	a3 9a       	sbi	0x14, 3	; 20
    14fa:	8e 9a       	sbi	0x11, 6	; 17
    14fc:	ba 9a       	sbi	0x17, 2	; 23
    14fe:	08 95       	ret

00001500 <LED_STAT>:
    1500:	81 33       	cpi	r24, 0x31	; 49
    1502:	a1 f4       	brne	.+40     	; 0x152c <LED_STAT+0x2c>
    1504:	61 33       	cpi	r22, 0x31	; 49
    1506:	11 f4       	brne	.+4      	; 0x150c <LED_STAT+0xc>
    1508:	c0 9a       	sbi	0x18, 0	; 24
    150a:	08 95       	ret
    150c:	62 33       	cpi	r22, 0x32	; 50
    150e:	11 f4       	brne	.+4      	; 0x1514 <LED_STAT+0x14>
    1510:	c1 9a       	sbi	0x18, 1	; 24
    1512:	08 95       	ret
    1514:	63 33       	cpi	r22, 0x33	; 51
    1516:	11 f4       	brne	.+4      	; 0x151c <LED_STAT+0x1c>
    1518:	aa 9a       	sbi	0x15, 2	; 21
    151a:	08 95       	ret
    151c:	64 33       	cpi	r22, 0x34	; 52
    151e:	11 f4       	brne	.+4      	; 0x1524 <LED_STAT+0x24>
    1520:	ab 9a       	sbi	0x15, 3	; 21
    1522:	08 95       	ret
    1524:	65 33       	cpi	r22, 0x35	; 53
    1526:	b9 f4       	brne	.+46     	; 0x1556 <LED_STAT+0x56>
    1528:	96 9a       	sbi	0x12, 6	; 18
    152a:	08 95       	ret
    152c:	80 33       	cpi	r24, 0x30	; 48
    152e:	99 f4       	brne	.+38     	; 0x1556 <LED_STAT+0x56>
    1530:	61 33       	cpi	r22, 0x31	; 49
    1532:	11 f4       	brne	.+4      	; 0x1538 <LED_STAT+0x38>
    1534:	c0 98       	cbi	0x18, 0	; 24
    1536:	08 95       	ret
    1538:	62 33       	cpi	r22, 0x32	; 50
    153a:	11 f4       	brne	.+4      	; 0x1540 <LED_STAT+0x40>
    153c:	c1 98       	cbi	0x18, 1	; 24
    153e:	08 95       	ret
    1540:	63 33       	cpi	r22, 0x33	; 51
    1542:	11 f4       	brne	.+4      	; 0x1548 <LED_STAT+0x48>
    1544:	aa 98       	cbi	0x15, 2	; 21
    1546:	08 95       	ret
    1548:	64 33       	cpi	r22, 0x34	; 52
    154a:	11 f4       	brne	.+4      	; 0x1550 <LED_STAT+0x50>
    154c:	ab 98       	cbi	0x15, 3	; 21
    154e:	08 95       	ret
    1550:	65 33       	cpi	r22, 0x35	; 53
    1552:	09 f4       	brne	.+2      	; 0x1556 <LED_STAT+0x56>
    1554:	96 98       	cbi	0x12, 6	; 18
    1556:	08 95       	ret

00001558 <Alarm_On>:
    1558:	51 e0       	ldi	r21, 0x01	; 1
    155a:	42 e0       	ldi	r20, 0x02	; 2
    155c:	34 e0       	ldi	r19, 0x04	; 4
    155e:	28 e0       	ldi	r18, 0x08	; 8
    1560:	90 e4       	ldi	r25, 0x40	; 64
    1562:	97 9a       	sbi	0x12, 7	; 18
    1564:	88 b3       	in	r24, 0x18	; 24
    1566:	85 27       	eor	r24, r21
    1568:	88 bb       	out	0x18, r24	; 24
    156a:	88 b3       	in	r24, 0x18	; 24
    156c:	84 27       	eor	r24, r20
    156e:	88 bb       	out	0x18, r24	; 24
    1570:	85 b3       	in	r24, 0x15	; 21
    1572:	83 27       	eor	r24, r19
    1574:	85 bb       	out	0x15, r24	; 21
    1576:	85 b3       	in	r24, 0x15	; 21
    1578:	82 27       	eor	r24, r18
    157a:	85 bb       	out	0x15, r24	; 21
    157c:	82 b3       	in	r24, 0x12	; 18
    157e:	89 27       	eor	r24, r25
    1580:	82 bb       	out	0x12, r24	; 18
    1582:	6f ef       	ldi	r22, 0xFF	; 255
    1584:	79 e6       	ldi	r23, 0x69	; 105
    1586:	88 e1       	ldi	r24, 0x18	; 24
    1588:	61 50       	subi	r22, 0x01	; 1
    158a:	70 40       	sbci	r23, 0x00	; 0
    158c:	80 40       	sbci	r24, 0x00	; 0
    158e:	e1 f7       	brne	.-8      	; 0x1588 <Alarm_On+0x30>
    1590:	00 c0       	rjmp	.+0      	; 0x1592 <Alarm_On+0x3a>
    1592:	00 00       	nop
    1594:	e6 cf       	rjmp	.-52     	; 0x1562 <Alarm_On+0xa>

00001596 <DIMMER_Init>:
    1596:	bb 9a       	sbi	0x17, 3	; 23
    1598:	22 e3       	ldi	r18, 0x32	; 50
    159a:	42 e3       	ldi	r20, 0x32	; 50
    159c:	61 e3       	ldi	r22, 0x31	; 49
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	0e 94 14 0b 	call	0x1628	; 0x1628 <Timer>
    15a4:	08 95       	ret

000015a6 <DIMMER_CONTROL>:
    15a6:	80 33       	cpi	r24, 0x30	; 48
    15a8:	11 f4       	brne	.+4      	; 0x15ae <DIMMER_CONTROL+0x8>
    15aa:	1c be       	out	0x3c, r1	; 60
    15ac:	08 95       	ret
    15ae:	81 33       	cpi	r24, 0x31	; 49
    15b0:	19 f4       	brne	.+6      	; 0x15b8 <DIMMER_CONTROL+0x12>
    15b2:	8f e3       	ldi	r24, 0x3F	; 63
    15b4:	8c bf       	out	0x3c, r24	; 60
    15b6:	08 95       	ret
    15b8:	82 33       	cpi	r24, 0x32	; 50
    15ba:	19 f4       	brne	.+6      	; 0x15c2 <DIMMER_CONTROL+0x1c>
    15bc:	8f e7       	ldi	r24, 0x7F	; 127
    15be:	8c bf       	out	0x3c, r24	; 60
    15c0:	08 95       	ret
    15c2:	83 33       	cpi	r24, 0x33	; 51
    15c4:	19 f4       	brne	.+6      	; 0x15cc <DIMMER_CONTROL+0x26>
    15c6:	8f eb       	ldi	r24, 0xBF	; 191
    15c8:	8c bf       	out	0x3c, r24	; 60
    15ca:	08 95       	ret
    15cc:	84 33       	cpi	r24, 0x34	; 52
    15ce:	11 f4       	brne	.+4      	; 0x15d4 <DIMMER_CONTROL+0x2e>
    15d0:	8f ef       	ldi	r24, 0xFF	; 255
    15d2:	8c bf       	out	0x3c, r24	; 60
    15d4:	08 95       	ret

000015d6 <main>:



int main(void)
{
	App_Initialization();	// Initialization of all peripherals in the application (system)	
    15d6:	0e 94 1d 02 	call	0x43a	; 0x43a <App_Initialization>
	EEPROM_Save_Main_Admin();	// Save Admin 
    15da:	0e 94 cc 04 	call	0x998	; 0x998 <EEPROM_Save_Main_Admin>
	EEPROM_Write_0_Counters();	// Writing 0 on the bits of counters if the system is operated for the first time
    15de:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <EEPROM_Write_0_Counters>
	UART_Welcome_Message();
    15e2:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <UART_Welcome_Message>
	
	while (1)
	{
		App();	
    15e6:	0e 94 3a 02 	call	0x474	; 0x474 <App>
    15ea:	fd cf       	rjmp	.-6      	; 0x15e6 <main+0x10>

000015ec <Sensor_ON>:
    15ec:	d3 98       	cbi	0x1a, 3	; 26
    15ee:	08 95       	ret

000015f0 <Servo_Initialization>:
    15f0:	8d 9a       	sbi	0x11, 5	; 17
    15f2:	22 e3       	ldi	r18, 0x32	; 50
    15f4:	42 e3       	ldi	r20, 0x32	; 50
    15f6:	62 e3       	ldi	r22, 0x32	; 50
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	0e 94 14 0b 	call	0x1628	; 0x1628 <Timer>
    15fe:	8f e3       	ldi	r24, 0x3F	; 63
    1600:	9c e9       	ldi	r25, 0x9C	; 156
    1602:	97 bd       	out	0x27, r25	; 39
    1604:	86 bd       	out	0x26, r24	; 38
    1606:	1d bc       	out	0x2d, r1	; 45
    1608:	1c bc       	out	0x2c, r1	; 44
    160a:	87 eb       	ldi	r24, 0xB7	; 183
    160c:	9b e0       	ldi	r25, 0x0B	; 11
    160e:	9b bd       	out	0x2b, r25	; 43
    1610:	8a bd       	out	0x2a, r24	; 42
    1612:	08 95       	ret

00001614 <openDoor>:
    1614:	82 e8       	ldi	r24, 0x82	; 130
    1616:	94 e1       	ldi	r25, 0x14	; 20
    1618:	9b bd       	out	0x2b, r25	; 43
    161a:	8a bd       	out	0x2a, r24	; 42
    161c:	08 95       	ret

0000161e <closeDoor>:
    161e:	87 eb       	ldi	r24, 0xB7	; 183
    1620:	9b e0       	ldi	r25, 0x0B	; 11
    1622:	9b bd       	out	0x2b, r25	; 43
    1624:	8a bd       	out	0x2a, r24	; 42
    1626:	08 95       	ret

00001628 <Timer>:
    1628:	81 11       	cpse	r24, r1
    162a:	86 c0       	rjmp	.+268    	; 0x1738 <Timer+0x110>
    162c:	20 33       	cpi	r18, 0x30	; 48
    162e:	51 f4       	brne	.+20     	; 0x1644 <Timer+0x1c>
    1630:	83 b7       	in	r24, 0x33	; 51
    1632:	8e 7f       	andi	r24, 0xFE	; 254
    1634:	83 bf       	out	0x33, r24	; 51
    1636:	83 b7       	in	r24, 0x33	; 51
    1638:	8d 7f       	andi	r24, 0xFD	; 253
    163a:	83 bf       	out	0x33, r24	; 51
    163c:	83 b7       	in	r24, 0x33	; 51
    163e:	8b 7f       	andi	r24, 0xFB	; 251
    1640:	83 bf       	out	0x33, r24	; 51
    1642:	3b c0       	rjmp	.+118    	; 0x16ba <Timer+0x92>
    1644:	21 33       	cpi	r18, 0x31	; 49
    1646:	51 f4       	brne	.+20     	; 0x165c <Timer+0x34>
    1648:	83 b7       	in	r24, 0x33	; 51
    164a:	81 60       	ori	r24, 0x01	; 1
    164c:	83 bf       	out	0x33, r24	; 51
    164e:	83 b7       	in	r24, 0x33	; 51
    1650:	8d 7f       	andi	r24, 0xFD	; 253
    1652:	83 bf       	out	0x33, r24	; 51
    1654:	83 b7       	in	r24, 0x33	; 51
    1656:	8b 7f       	andi	r24, 0xFB	; 251
    1658:	83 bf       	out	0x33, r24	; 51
    165a:	2f c0       	rjmp	.+94     	; 0x16ba <Timer+0x92>
    165c:	22 33       	cpi	r18, 0x32	; 50
    165e:	51 f4       	brne	.+20     	; 0x1674 <Timer+0x4c>
    1660:	83 b7       	in	r24, 0x33	; 51
    1662:	8e 7f       	andi	r24, 0xFE	; 254
    1664:	83 bf       	out	0x33, r24	; 51
    1666:	83 b7       	in	r24, 0x33	; 51
    1668:	82 60       	ori	r24, 0x02	; 2
    166a:	83 bf       	out	0x33, r24	; 51
    166c:	83 b7       	in	r24, 0x33	; 51
    166e:	8b 7f       	andi	r24, 0xFB	; 251
    1670:	83 bf       	out	0x33, r24	; 51
    1672:	23 c0       	rjmp	.+70     	; 0x16ba <Timer+0x92>
    1674:	23 33       	cpi	r18, 0x33	; 51
    1676:	51 f4       	brne	.+20     	; 0x168c <Timer+0x64>
    1678:	83 b7       	in	r24, 0x33	; 51
    167a:	81 60       	ori	r24, 0x01	; 1
    167c:	83 bf       	out	0x33, r24	; 51
    167e:	83 b7       	in	r24, 0x33	; 51
    1680:	82 60       	ori	r24, 0x02	; 2
    1682:	83 bf       	out	0x33, r24	; 51
    1684:	83 b7       	in	r24, 0x33	; 51
    1686:	8b 7f       	andi	r24, 0xFB	; 251
    1688:	83 bf       	out	0x33, r24	; 51
    168a:	17 c0       	rjmp	.+46     	; 0x16ba <Timer+0x92>
    168c:	24 33       	cpi	r18, 0x34	; 52
    168e:	51 f4       	brne	.+20     	; 0x16a4 <Timer+0x7c>
    1690:	83 b7       	in	r24, 0x33	; 51
    1692:	8e 7f       	andi	r24, 0xFE	; 254
    1694:	83 bf       	out	0x33, r24	; 51
    1696:	83 b7       	in	r24, 0x33	; 51
    1698:	8d 7f       	andi	r24, 0xFD	; 253
    169a:	83 bf       	out	0x33, r24	; 51
    169c:	83 b7       	in	r24, 0x33	; 51
    169e:	84 60       	ori	r24, 0x04	; 4
    16a0:	83 bf       	out	0x33, r24	; 51
    16a2:	0b c0       	rjmp	.+22     	; 0x16ba <Timer+0x92>
    16a4:	25 33       	cpi	r18, 0x35	; 53
    16a6:	49 f4       	brne	.+18     	; 0x16ba <Timer+0x92>
    16a8:	83 b7       	in	r24, 0x33	; 51
    16aa:	81 60       	ori	r24, 0x01	; 1
    16ac:	83 bf       	out	0x33, r24	; 51
    16ae:	83 b7       	in	r24, 0x33	; 51
    16b0:	8d 7f       	andi	r24, 0xFD	; 253
    16b2:	83 bf       	out	0x33, r24	; 51
    16b4:	83 b7       	in	r24, 0x33	; 51
    16b6:	84 60       	ori	r24, 0x04	; 4
    16b8:	83 bf       	out	0x33, r24	; 51
    16ba:	60 33       	cpi	r22, 0x30	; 48
    16bc:	39 f4       	brne	.+14     	; 0x16cc <Timer+0xa4>
    16be:	83 b7       	in	r24, 0x33	; 51
    16c0:	87 7f       	andi	r24, 0xF7	; 247
    16c2:	83 bf       	out	0x33, r24	; 51
    16c4:	83 b7       	in	r24, 0x33	; 51
    16c6:	8f 7b       	andi	r24, 0xBF	; 191
    16c8:	83 bf       	out	0x33, r24	; 51
    16ca:	11 c0       	rjmp	.+34     	; 0x16ee <Timer+0xc6>
    16cc:	62 33       	cpi	r22, 0x32	; 50
    16ce:	39 f4       	brne	.+14     	; 0x16de <Timer+0xb6>
    16d0:	83 b7       	in	r24, 0x33	; 51
    16d2:	88 60       	ori	r24, 0x08	; 8
    16d4:	83 bf       	out	0x33, r24	; 51
    16d6:	83 b7       	in	r24, 0x33	; 51
    16d8:	80 64       	ori	r24, 0x40	; 64
    16da:	83 bf       	out	0x33, r24	; 51
    16dc:	08 c0       	rjmp	.+16     	; 0x16ee <Timer+0xc6>
    16de:	61 33       	cpi	r22, 0x31	; 49
    16e0:	31 f4       	brne	.+12     	; 0x16ee <Timer+0xc6>
    16e2:	83 b7       	in	r24, 0x33	; 51
    16e4:	87 7f       	andi	r24, 0xF7	; 247
    16e6:	83 bf       	out	0x33, r24	; 51
    16e8:	83 b7       	in	r24, 0x33	; 51
    16ea:	80 64       	ori	r24, 0x40	; 64
    16ec:	83 bf       	out	0x33, r24	; 51
    16ee:	40 33       	cpi	r20, 0x30	; 48
    16f0:	39 f4       	brne	.+14     	; 0x1700 <Timer+0xd8>
    16f2:	83 b7       	in	r24, 0x33	; 51
    16f4:	8f 7e       	andi	r24, 0xEF	; 239
    16f6:	83 bf       	out	0x33, r24	; 51
    16f8:	83 b7       	in	r24, 0x33	; 51
    16fa:	8f 7d       	andi	r24, 0xDF	; 223
    16fc:	83 bf       	out	0x33, r24	; 51
    16fe:	08 95       	ret
    1700:	41 33       	cpi	r20, 0x31	; 49
    1702:	39 f4       	brne	.+14     	; 0x1712 <Timer+0xea>
    1704:	83 b7       	in	r24, 0x33	; 51
    1706:	8f 7d       	andi	r24, 0xDF	; 223
    1708:	83 bf       	out	0x33, r24	; 51
    170a:	83 b7       	in	r24, 0x33	; 51
    170c:	80 61       	ori	r24, 0x10	; 16
    170e:	83 bf       	out	0x33, r24	; 51
    1710:	08 95       	ret
    1712:	42 33       	cpi	r20, 0x32	; 50
    1714:	39 f4       	brne	.+14     	; 0x1724 <Timer+0xfc>
    1716:	83 b7       	in	r24, 0x33	; 51
    1718:	8f 7e       	andi	r24, 0xEF	; 239
    171a:	83 bf       	out	0x33, r24	; 51
    171c:	83 b7       	in	r24, 0x33	; 51
    171e:	80 62       	ori	r24, 0x20	; 32
    1720:	83 bf       	out	0x33, r24	; 51
    1722:	08 95       	ret
    1724:	43 33       	cpi	r20, 0x33	; 51
    1726:	09 f0       	breq	.+2      	; 0x172a <Timer+0x102>
    1728:	a0 c0       	rjmp	.+320    	; 0x186a <Timer+0x242>
    172a:	83 b7       	in	r24, 0x33	; 51
    172c:	80 61       	ori	r24, 0x10	; 16
    172e:	83 bf       	out	0x33, r24	; 51
    1730:	83 b7       	in	r24, 0x33	; 51
    1732:	80 62       	ori	r24, 0x20	; 32
    1734:	83 bf       	out	0x33, r24	; 51
    1736:	08 95       	ret
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	09 f0       	breq	.+2      	; 0x173e <Timer+0x116>
    173c:	96 c0       	rjmp	.+300    	; 0x186a <Timer+0x242>
    173e:	20 33       	cpi	r18, 0x30	; 48
    1740:	51 f4       	brne	.+20     	; 0x1756 <Timer+0x12e>
    1742:	8e b5       	in	r24, 0x2e	; 46
    1744:	8e 7f       	andi	r24, 0xFE	; 254
    1746:	8e bd       	out	0x2e, r24	; 46
    1748:	8e b5       	in	r24, 0x2e	; 46
    174a:	8d 7f       	andi	r24, 0xFD	; 253
    174c:	8e bd       	out	0x2e, r24	; 46
    174e:	8e b5       	in	r24, 0x2e	; 46
    1750:	8b 7f       	andi	r24, 0xFB	; 251
    1752:	8e bd       	out	0x2e, r24	; 46
    1754:	3b c0       	rjmp	.+118    	; 0x17cc <Timer+0x1a4>
    1756:	21 33       	cpi	r18, 0x31	; 49
    1758:	51 f4       	brne	.+20     	; 0x176e <Timer+0x146>
    175a:	8e b5       	in	r24, 0x2e	; 46
    175c:	81 60       	ori	r24, 0x01	; 1
    175e:	8e bd       	out	0x2e, r24	; 46
    1760:	8e b5       	in	r24, 0x2e	; 46
    1762:	8d 7f       	andi	r24, 0xFD	; 253
    1764:	8e bd       	out	0x2e, r24	; 46
    1766:	8e b5       	in	r24, 0x2e	; 46
    1768:	8b 7f       	andi	r24, 0xFB	; 251
    176a:	8e bd       	out	0x2e, r24	; 46
    176c:	2f c0       	rjmp	.+94     	; 0x17cc <Timer+0x1a4>
    176e:	22 33       	cpi	r18, 0x32	; 50
    1770:	51 f4       	brne	.+20     	; 0x1786 <Timer+0x15e>
    1772:	8e b5       	in	r24, 0x2e	; 46
    1774:	8e 7f       	andi	r24, 0xFE	; 254
    1776:	8e bd       	out	0x2e, r24	; 46
    1778:	8e b5       	in	r24, 0x2e	; 46
    177a:	82 60       	ori	r24, 0x02	; 2
    177c:	8e bd       	out	0x2e, r24	; 46
    177e:	8e b5       	in	r24, 0x2e	; 46
    1780:	8b 7f       	andi	r24, 0xFB	; 251
    1782:	8e bd       	out	0x2e, r24	; 46
    1784:	23 c0       	rjmp	.+70     	; 0x17cc <Timer+0x1a4>
    1786:	23 33       	cpi	r18, 0x33	; 51
    1788:	51 f4       	brne	.+20     	; 0x179e <Timer+0x176>
    178a:	8e b5       	in	r24, 0x2e	; 46
    178c:	81 60       	ori	r24, 0x01	; 1
    178e:	8e bd       	out	0x2e, r24	; 46
    1790:	8e b5       	in	r24, 0x2e	; 46
    1792:	82 60       	ori	r24, 0x02	; 2
    1794:	8e bd       	out	0x2e, r24	; 46
    1796:	8e b5       	in	r24, 0x2e	; 46
    1798:	8b 7f       	andi	r24, 0xFB	; 251
    179a:	8e bd       	out	0x2e, r24	; 46
    179c:	17 c0       	rjmp	.+46     	; 0x17cc <Timer+0x1a4>
    179e:	24 33       	cpi	r18, 0x34	; 52
    17a0:	51 f4       	brne	.+20     	; 0x17b6 <Timer+0x18e>
    17a2:	8e b5       	in	r24, 0x2e	; 46
    17a4:	8e 7f       	andi	r24, 0xFE	; 254
    17a6:	8e bd       	out	0x2e, r24	; 46
    17a8:	8e b5       	in	r24, 0x2e	; 46
    17aa:	8d 7f       	andi	r24, 0xFD	; 253
    17ac:	8e bd       	out	0x2e, r24	; 46
    17ae:	8e b5       	in	r24, 0x2e	; 46
    17b0:	84 60       	ori	r24, 0x04	; 4
    17b2:	8e bd       	out	0x2e, r24	; 46
    17b4:	0b c0       	rjmp	.+22     	; 0x17cc <Timer+0x1a4>
    17b6:	25 33       	cpi	r18, 0x35	; 53
    17b8:	49 f4       	brne	.+18     	; 0x17cc <Timer+0x1a4>
    17ba:	8e b5       	in	r24, 0x2e	; 46
    17bc:	81 60       	ori	r24, 0x01	; 1
    17be:	8e bd       	out	0x2e, r24	; 46
    17c0:	8e b5       	in	r24, 0x2e	; 46
    17c2:	8d 7f       	andi	r24, 0xFD	; 253
    17c4:	8e bd       	out	0x2e, r24	; 46
    17c6:	8e b5       	in	r24, 0x2e	; 46
    17c8:	84 60       	ori	r24, 0x04	; 4
    17ca:	8e bd       	out	0x2e, r24	; 46
    17cc:	60 33       	cpi	r22, 0x30	; 48
    17ce:	69 f4       	brne	.+26     	; 0x17ea <Timer+0x1c2>
    17d0:	8f b5       	in	r24, 0x2f	; 47
    17d2:	8e 7f       	andi	r24, 0xFE	; 254
    17d4:	8f bd       	out	0x2f, r24	; 47
    17d6:	8f b5       	in	r24, 0x2f	; 47
    17d8:	8d 7f       	andi	r24, 0xFD	; 253
    17da:	8f bd       	out	0x2f, r24	; 47
    17dc:	8e b5       	in	r24, 0x2e	; 46
    17de:	87 7f       	andi	r24, 0xF7	; 247
    17e0:	8e bd       	out	0x2e, r24	; 46
    17e2:	8e b5       	in	r24, 0x2e	; 46
    17e4:	8f 7e       	andi	r24, 0xEF	; 239
    17e6:	8e bd       	out	0x2e, r24	; 46
    17e8:	1d c0       	rjmp	.+58     	; 0x1824 <Timer+0x1fc>
    17ea:	62 33       	cpi	r22, 0x32	; 50
    17ec:	69 f4       	brne	.+26     	; 0x1808 <Timer+0x1e0>
    17ee:	8f b5       	in	r24, 0x2f	; 47
    17f0:	8e 7f       	andi	r24, 0xFE	; 254
    17f2:	8f bd       	out	0x2f, r24	; 47
    17f4:	8f b5       	in	r24, 0x2f	; 47
    17f6:	82 60       	ori	r24, 0x02	; 2
    17f8:	8f bd       	out	0x2f, r24	; 47
    17fa:	8e b5       	in	r24, 0x2e	; 46
    17fc:	88 60       	ori	r24, 0x08	; 8
    17fe:	8e bd       	out	0x2e, r24	; 46
    1800:	8e b5       	in	r24, 0x2e	; 46
    1802:	80 61       	ori	r24, 0x10	; 16
    1804:	8e bd       	out	0x2e, r24	; 46
    1806:	0e c0       	rjmp	.+28     	; 0x1824 <Timer+0x1fc>
    1808:	61 33       	cpi	r22, 0x31	; 49
    180a:	61 f4       	brne	.+24     	; 0x1824 <Timer+0x1fc>
    180c:	8f b5       	in	r24, 0x2f	; 47
    180e:	8e 7f       	andi	r24, 0xFE	; 254
    1810:	8f bd       	out	0x2f, r24	; 47
    1812:	8f b5       	in	r24, 0x2f	; 47
    1814:	82 60       	ori	r24, 0x02	; 2
    1816:	8f bd       	out	0x2f, r24	; 47
    1818:	8e b5       	in	r24, 0x2e	; 46
    181a:	87 7f       	andi	r24, 0xF7	; 247
    181c:	8e bd       	out	0x2e, r24	; 46
    181e:	8e b5       	in	r24, 0x2e	; 46
    1820:	80 61       	ori	r24, 0x10	; 16
    1822:	8e bd       	out	0x2e, r24	; 46
    1824:	40 33       	cpi	r20, 0x30	; 48
    1826:	39 f4       	brne	.+14     	; 0x1836 <Timer+0x20e>
    1828:	8f b5       	in	r24, 0x2f	; 47
    182a:	8f 7b       	andi	r24, 0xBF	; 191
    182c:	8f bd       	out	0x2f, r24	; 47
    182e:	8f b5       	in	r24, 0x2f	; 47
    1830:	8f 77       	andi	r24, 0x7F	; 127
    1832:	8f bd       	out	0x2f, r24	; 47
    1834:	08 95       	ret
    1836:	41 33       	cpi	r20, 0x31	; 49
    1838:	39 f4       	brne	.+14     	; 0x1848 <Timer+0x220>
    183a:	8f b5       	in	r24, 0x2f	; 47
    183c:	80 64       	ori	r24, 0x40	; 64
    183e:	8f bd       	out	0x2f, r24	; 47
    1840:	8f b5       	in	r24, 0x2f	; 47
    1842:	8f 77       	andi	r24, 0x7F	; 127
    1844:	8f bd       	out	0x2f, r24	; 47
    1846:	08 95       	ret
    1848:	42 33       	cpi	r20, 0x32	; 50
    184a:	39 f4       	brne	.+14     	; 0x185a <Timer+0x232>
    184c:	8f b5       	in	r24, 0x2f	; 47
    184e:	8f 7b       	andi	r24, 0xBF	; 191
    1850:	8f bd       	out	0x2f, r24	; 47
    1852:	8f b5       	in	r24, 0x2f	; 47
    1854:	80 68       	ori	r24, 0x80	; 128
    1856:	8f bd       	out	0x2f, r24	; 47
    1858:	08 95       	ret
    185a:	43 33       	cpi	r20, 0x33	; 51
    185c:	31 f4       	brne	.+12     	; 0x186a <Timer+0x242>
    185e:	8f b5       	in	r24, 0x2f	; 47
    1860:	80 64       	ori	r24, 0x40	; 64
    1862:	8f bd       	out	0x2f, r24	; 47
    1864:	8f b5       	in	r24, 0x2f	; 47
    1866:	80 68       	ori	r24, 0x80	; 128
    1868:	8f bd       	out	0x2f, r24	; 47
    186a:	08 95       	ret

0000186c <UART_Bit_Stops>:
    186c:	80 b5       	in	r24, 0x20	; 32
    186e:	88 60       	ori	r24, 0x08	; 8
    1870:	80 bd       	out	0x20, r24	; 32
    1872:	08 95       	ret

00001874 <UART_Mode_Select>:
    1874:	56 98       	cbi	0x0a, 6	; 10
    1876:	08 95       	ret

00001878 <UART_Init>:
    1878:	90 bd       	out	0x20, r25	; 32
    187a:	89 b9       	out	0x09, r24	; 9
    187c:	0e 94 3a 0c 	call	0x1874	; 0x1874 <UART_Mode_Select>
    1880:	53 9a       	sbi	0x0a, 3	; 10
    1882:	54 9a       	sbi	0x0a, 4	; 10
    1884:	80 b5       	in	r24, 0x20	; 32
    1886:	80 68       	ori	r24, 0x80	; 128
    1888:	80 bd       	out	0x20, r24	; 32
    188a:	0e 94 36 0c 	call	0x186c	; 0x186c <UART_Bit_Stops>
    188e:	80 b5       	in	r24, 0x20	; 32
    1890:	82 60       	ori	r24, 0x02	; 2
    1892:	80 bd       	out	0x20, r24	; 32
    1894:	80 b5       	in	r24, 0x20	; 32
    1896:	84 60       	ori	r24, 0x04	; 4
    1898:	80 bd       	out	0x20, r24	; 32
    189a:	08 95       	ret

0000189c <UART_Transmit>:
    189c:	5d 9b       	sbis	0x0b, 5	; 11
    189e:	fe cf       	rjmp	.-4      	; 0x189c <UART_Transmit>
    18a0:	8c b9       	out	0x0c, r24	; 12
    18a2:	08 95       	ret

000018a4 <UART_Receive>:
    18a4:	5f 99       	sbic	0x0b, 7	; 11
    18a6:	04 c0       	rjmp	.+8      	; 0x18b0 <UART_Receive+0xc>
    18a8:	0e 94 53 00 	call	0xa6	; 0xa6 <AC_ON>
    18ac:	5f 9b       	sbis	0x0b, 7	; 11
    18ae:	fc cf       	rjmp	.-8      	; 0x18a8 <UART_Receive+0x4>
    18b0:	8c b1       	in	r24, 0x0c	; 12
    18b2:	08 95       	ret

000018b4 <UART_Send_String>:
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	cf 93       	push	r28
    18ba:	fc 01       	movw	r30, r24
    18bc:	80 81       	ld	r24, Z
    18be:	88 23       	and	r24, r24
    18c0:	59 f0       	breq	.+22     	; 0x18d8 <UART_Send_String+0x24>
    18c2:	8f 01       	movw	r16, r30
    18c4:	c0 e0       	ldi	r28, 0x00	; 0
    18c6:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
    18ca:	cf 5f       	subi	r28, 0xFF	; 255
    18cc:	f8 01       	movw	r30, r16
    18ce:	ec 0f       	add	r30, r28
    18d0:	f1 1d       	adc	r31, r1
    18d2:	80 81       	ld	r24, Z
    18d4:	81 11       	cpse	r24, r1
    18d6:	f7 cf       	rjmp	.-18     	; 0x18c6 <UART_Send_String+0x12>
    18d8:	cf 91       	pop	r28
    18da:	1f 91       	pop	r17
    18dc:	0f 91       	pop	r16
    18de:	08 95       	ret

000018e0 <UART_Welcome_Message>:
#include "App.h"
#include "Servo.h"

void UART_Welcome_Message()
{
	UART_Send_String ("Welcome to Smart Home System");
    18e0:	8e eb       	ldi	r24, 0xBE	; 190
    18e2:	92 e0       	ldi	r25, 0x02	; 2
    18e4:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
	UART_Transmit('\r');
    18e8:	8d e0       	ldi	r24, 0x0D	; 13
    18ea:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
	UART_Transmit('\r');
    18ee:	8d e0       	ldi	r24, 0x0D	; 13
    18f0:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
    18f4:	2f ef       	ldi	r18, 0xFF	; 255
    18f6:	85 ea       	ldi	r24, 0xA5	; 165
    18f8:	9e e0       	ldi	r25, 0x0E	; 14
    18fa:	21 50       	subi	r18, 0x01	; 1
    18fc:	80 40       	sbci	r24, 0x00	; 0
    18fe:	90 40       	sbci	r25, 0x00	; 0
    1900:	e1 f7       	brne	.-8      	; 0x18fa <UART_Welcome_Message+0x1a>
    1902:	00 c0       	rjmp	.+0      	; 0x1904 <UART_Welcome_Message+0x24>
    1904:	00 00       	nop
    1906:	08 95       	ret

00001908 <UART_Mode_Choice>:
	_delay_ms(300);
}

unsigned char UART_Mode_Choice()
{
    1908:	cf 93       	push	r28
	unsigned char uart_var = 0;
	
	UART_Send_String ("Please choose your Mode (Admin/User) ");
    190a:	8b ed       	ldi	r24, 0xDB	; 219
    190c:	92 e0       	ldi	r25, 0x02	; 2
    190e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
	UART_Transmit('\r');
    1912:	8d e0       	ldi	r24, 0x0D	; 13
    1914:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
	UART_Send_String ("1. Admin Mode ");
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	93 e0       	ldi	r25, 0x03	; 3
    191c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
	UART_Transmit('\r');
    1920:	8d e0       	ldi	r24, 0x0D	; 13
    1922:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
	UART_Send_String ("2. User Mode ");
    1926:	80 e1       	ldi	r24, 0x10	; 16
    1928:	93 e0       	ldi	r25, 0x03	; 3
    192a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
	UART_Transmit('\r');
    192e:	8d e0       	ldi	r24, 0x0D	; 13
    1930:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
	UART_Transmit('\r');
    1934:	8d e0       	ldi	r24, 0x0D	; 13
    1936:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
    193a:	2f ef       	ldi	r18, 0xFF	; 255
    193c:	85 ea       	ldi	r24, 0xA5	; 165
    193e:	9e e0       	ldi	r25, 0x0E	; 14
    1940:	21 50       	subi	r18, 0x01	; 1
    1942:	80 40       	sbci	r24, 0x00	; 0
    1944:	90 40       	sbci	r25, 0x00	; 0
    1946:	e1 f7       	brne	.-8      	; 0x1940 <UART_Mode_Choice+0x38>
    1948:	00 c0       	rjmp	.+0      	; 0x194a <UART_Mode_Choice+0x42>
    194a:	00 00       	nop
	_delay_ms(300);
	
	UART_Send_String ("Your Choice : ");
    194c:	8d ec       	ldi	r24, 0xCD	; 205
    194e:	91 e0       	ldi	r25, 0x01	; 1
    1950:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
	while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
	{
		uart_var = UART_Receive();
    1954:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
    1958:	c8 2f       	mov	r28, r24
		UART_Transmit(uart_var);
    195a:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
	UART_Transmit('\r');
	UART_Transmit('\r');
	_delay_ms(300);
	
	UART_Send_String ("Your Choice : ");
	while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    195e:	80 ed       	ldi	r24, 0xD0	; 208
    1960:	8c 0f       	add	r24, r28
    1962:	8a 30       	cpi	r24, 0x0A	; 10
    1964:	b8 f7       	brcc	.-18     	; 0x1954 <UART_Mode_Choice+0x4c>
	{
		uart_var = UART_Receive();
		UART_Transmit(uart_var);
	}
	
	UART_Transmit('\r');
    1966:	8d e0       	ldi	r24, 0x0D	; 13
    1968:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
	UART_Transmit('\r');
    196c:	8d e0       	ldi	r24, 0x0D	; 13
    196e:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
	
	while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_2)))
    1972:	8f ec       	ldi	r24, 0xCF	; 207
    1974:	8c 0f       	add	r24, r28
    1976:	82 30       	cpi	r24, 0x02	; 2
    1978:	08 f1       	brcs	.+66     	; 0x19bc <UART_Mode_Choice+0xb4>
	{
		UART_Send_String ("Please Choose only 1 or 2");
    197a:	8e e1       	ldi	r24, 0x1E	; 30
    197c:	93 e0       	ldi	r25, 0x03	; 3
    197e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
		UART_Transmit('\r');
    1982:	8d e0       	ldi	r24, 0x0D	; 13
    1984:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		UART_Transmit('\r');
    1988:	8d e0       	ldi	r24, 0x0D	; 13
    198a:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		uart_var = 0;
		UART_Send_String("Your choice : ");
    198e:	88 e3       	ldi	r24, 0x38	; 56
    1990:	93 e0       	ldi	r25, 0x03	; 3
    1992:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
		{
			uart_var = UART_Receive();
    1996:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
    199a:	c8 2f       	mov	r28, r24
			UART_Transmit(uart_var);	
    199c:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		UART_Send_String ("Please Choose only 1 or 2");
		UART_Transmit('\r');
		UART_Transmit('\r');
		uart_var = 0;
		UART_Send_String("Your choice : ");
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    19a0:	80 ed       	ldi	r24, 0xD0	; 208
    19a2:	8c 0f       	add	r24, r28
    19a4:	8a 30       	cpi	r24, 0x0A	; 10
    19a6:	b8 f7       	brcc	.-18     	; 0x1996 <UART_Mode_Choice+0x8e>
		{
			uart_var = UART_Receive();
			UART_Transmit(uart_var);	
		}
		
		UART_Transmit('\r');
    19a8:	8d e0       	ldi	r24, 0x0D	; 13
    19aa:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		UART_Transmit('\r');
    19ae:	8d e0       	ldi	r24, 0x0D	; 13
    19b0:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
	}
	
	UART_Transmit('\r');
	UART_Transmit('\r');
	
	while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_2)))
    19b4:	8f ec       	ldi	r24, 0xCF	; 207
    19b6:	8c 0f       	add	r24, r28
    19b8:	82 30       	cpi	r24, 0x02	; 2
    19ba:	f8 f6       	brcc	.-66     	; 0x197a <UART_Mode_Choice+0x72>
		UART_Transmit('\r');
		UART_Transmit('\r');
	}
	
	return uart_var;
}
    19bc:	8c 2f       	mov	r24, r28
    19be:	cf 91       	pop	r28
    19c0:	08 95       	ret

000019c2 <UART_Rooms_Leds_Control>:

void UART_Rooms_Leds_Control()
{
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
	unsigned char room_no_temp = 0;
	unsigned char room_on_off_temp = 0;
	unsigned char uart_var = 0;
	
	UART_Send_String ("1. Room 1 ");
    19c6:	87 e4       	ldi	r24, 0x47	; 71
    19c8:	93 e0       	ldi	r25, 0x03	; 3
    19ca:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
	UART_Transmit('\r');
    19ce:	8d e0       	ldi	r24, 0x0D	; 13
    19d0:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
	UART_Send_String ("2. Room 2 ");
    19d4:	82 e5       	ldi	r24, 0x52	; 82
    19d6:	93 e0       	ldi	r25, 0x03	; 3
    19d8:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
	UART_Transmit('\r');
    19dc:	8d e0       	ldi	r24, 0x0D	; 13
    19de:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
	UART_Send_String ("3. Room 3 ");
    19e2:	8d e5       	ldi	r24, 0x5D	; 93
    19e4:	93 e0       	ldi	r25, 0x03	; 3
    19e6:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
	UART_Transmit('\r');
    19ea:	8d e0       	ldi	r24, 0x0D	; 13
    19ec:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
	UART_Send_String ("4. Room 4 ");
    19f0:	88 e6       	ldi	r24, 0x68	; 104
    19f2:	93 e0       	ldi	r25, 0x03	; 3
    19f4:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
	UART_Transmit('\r');
    19f8:	8d e0       	ldi	r24, 0x0D	; 13
    19fa:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
	UART_Send_String ("5. Room 5 ");
    19fe:	83 e7       	ldi	r24, 0x73	; 115
    1a00:	93 e0       	ldi	r25, 0x03	; 3
    1a02:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
	UART_Transmit('\r');
    1a06:	8d e0       	ldi	r24, 0x0D	; 13
    1a08:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
	UART_Send_String ("6. All rooms ");
    1a0c:	8e e7       	ldi	r24, 0x7E	; 126
    1a0e:	93 e0       	ldi	r25, 0x03	; 3
    1a10:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
	UART_Transmit('\r');
    1a14:	8d e0       	ldi	r24, 0x0D	; 13
    1a16:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
	UART_Transmit('\r');
    1a1a:	8d e0       	ldi	r24, 0x0D	; 13
    1a1c:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
	UART_Send_String("Your choice : ");
    1a20:	88 e3       	ldi	r24, 0x38	; 56
    1a22:	93 e0       	ldi	r25, 0x03	; 3
    1a24:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
	
	while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
	{
		uart_var = UART_Receive();
    1a28:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
    1a2c:	c8 2f       	mov	r28, r24
		UART_Transmit(uart_var);
    1a2e:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		UART_Transmit('\r');
    1a32:	8d e0       	ldi	r24, 0x0D	; 13
    1a34:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		UART_Transmit('\r');
    1a38:	8d e0       	ldi	r24, 0x0D	; 13
    1a3a:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
	UART_Send_String ("6. All rooms ");
	UART_Transmit('\r');
	UART_Transmit('\r');
	UART_Send_String("Your choice : ");
	
	while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1a3e:	80 ed       	ldi	r24, 0xD0	; 208
    1a40:	8c 0f       	add	r24, r28
    1a42:	8a 30       	cpi	r24, 0x0A	; 10
    1a44:	88 f7       	brcc	.-30     	; 0x1a28 <UART_Rooms_Leds_Control+0x66>
    1a46:	1d c0       	rjmp	.+58     	; 0x1a82 <UART_Rooms_Leds_Control+0xc0>
	}
	room_no_temp = uart_var;
	
	while (!((room_no_temp >= Ascii_1) && (room_no_temp <= Ascii_6)))
	{
		UART_Send_String ("Please Choose only from 1 to 6");
    1a48:	8c e8       	ldi	r24, 0x8C	; 140
    1a4a:	93 e0       	ldi	r25, 0x03	; 3
    1a4c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
		UART_Transmit('\r');
    1a50:	8d e0       	ldi	r24, 0x0D	; 13
    1a52:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		UART_Transmit('\r');
    1a56:	8d e0       	ldi	r24, 0x0D	; 13
    1a58:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		UART_Send_String("Your choice : ");
    1a5c:	88 e3       	ldi	r24, 0x38	; 56
    1a5e:	93 e0       	ldi	r25, 0x03	; 3
    1a60:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
		
		uart_var = 0;
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
		{
			uart_var = UART_Receive();
    1a64:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
    1a68:	c8 2f       	mov	r28, r24
			UART_Transmit(uart_var);
    1a6a:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Transmit('\r');
    1a6e:	8d e0       	ldi	r24, 0x0D	; 13
    1a70:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Transmit('\r');
    1a74:	8d e0       	ldi	r24, 0x0D	; 13
    1a76:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		UART_Transmit('\r');
		UART_Transmit('\r');
		UART_Send_String("Your choice : ");
		
		uart_var = 0;
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1a7a:	80 ed       	ldi	r24, 0xD0	; 208
    1a7c:	8c 0f       	add	r24, r28
    1a7e:	8a 30       	cpi	r24, 0x0A	; 10
    1a80:	88 f7       	brcc	.-30     	; 0x1a64 <UART_Rooms_Leds_Control+0xa2>
		UART_Transmit('\r');
		UART_Transmit('\r');
	}
	room_no_temp = uart_var;
	
	while (!((room_no_temp >= Ascii_1) && (room_no_temp <= Ascii_6)))
    1a82:	8f ec       	ldi	r24, 0xCF	; 207
    1a84:	8c 0f       	add	r24, r28
    1a86:	86 30       	cpi	r24, 0x06	; 6
    1a88:	f8 f6       	brcc	.-66     	; 0x1a48 <UART_Rooms_Leds_Control+0x86>
		}
		room_no_temp = uart_var;
	}
	uart_var = 0;
	
	UART_Send_String ("Turn On : 1");
    1a8a:	8b ea       	ldi	r24, 0xAB	; 171
    1a8c:	93 e0       	ldi	r25, 0x03	; 3
    1a8e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
	UART_Transmit('\r');
    1a92:	8d e0       	ldi	r24, 0x0D	; 13
    1a94:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
	UART_Send_String ("Turn Off : 0");
    1a98:	87 eb       	ldi	r24, 0xB7	; 183
    1a9a:	93 e0       	ldi	r25, 0x03	; 3
    1a9c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
	UART_Transmit('\r');
    1aa0:	8d e0       	ldi	r24, 0x0D	; 13
    1aa2:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
	UART_Transmit('\r');
    1aa6:	8d e0       	ldi	r24, 0x0D	; 13
    1aa8:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
	UART_Send_String("Your Choice : ");
    1aac:	8d ec       	ldi	r24, 0xCD	; 205
    1aae:	91 e0       	ldi	r25, 0x01	; 1
    1ab0:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
	while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
	{
		uart_var = UART_Receive();
    1ab4:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
    1ab8:	d8 2f       	mov	r29, r24
		UART_Transmit(uart_var);
    1aba:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		UART_Transmit('\r');
    1abe:	8d e0       	ldi	r24, 0x0D	; 13
    1ac0:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		UART_Transmit('\r');
    1ac4:	8d e0       	ldi	r24, 0x0D	; 13
    1ac6:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
	UART_Transmit('\r');
	UART_Send_String ("Turn Off : 0");
	UART_Transmit('\r');
	UART_Transmit('\r');
	UART_Send_String("Your Choice : ");
	while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1aca:	80 ed       	ldi	r24, 0xD0	; 208
    1acc:	8d 0f       	add	r24, r29
    1ace:	8a 30       	cpi	r24, 0x0A	; 10
    1ad0:	88 f7       	brcc	.-30     	; 0x1ab4 <UART_Rooms_Leds_Control+0xf2>
    1ad2:	1d c0       	rjmp	.+58     	; 0x1b0e <UART_Rooms_Leds_Control+0x14c>
	}
	room_on_off_temp = uart_var;
	
	while ((room_on_off_temp != Ascii_1) && (room_on_off_temp != Ascii_0))
	{
		UART_Send_String ("Please Choose 1 or 0");
    1ad4:	84 ec       	ldi	r24, 0xC4	; 196
    1ad6:	93 e0       	ldi	r25, 0x03	; 3
    1ad8:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
		UART_Transmit('\r');
    1adc:	8d e0       	ldi	r24, 0x0D	; 13
    1ade:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		UART_Transmit('\r');
    1ae2:	8d e0       	ldi	r24, 0x0D	; 13
    1ae4:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		
		uart_var = 0;
		UART_Send_String("Your choice : ");
    1ae8:	88 e3       	ldi	r24, 0x38	; 56
    1aea:	93 e0       	ldi	r25, 0x03	; 3
    1aec:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
		{
			uart_var = UART_Receive();
    1af0:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
    1af4:	d8 2f       	mov	r29, r24
			UART_Transmit(uart_var);
    1af6:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Transmit('\r');
    1afa:	8d e0       	ldi	r24, 0x0D	; 13
    1afc:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Transmit('\r');
    1b00:	8d e0       	ldi	r24, 0x0D	; 13
    1b02:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		UART_Transmit('\r');
		UART_Transmit('\r');
		
		uart_var = 0;
		UART_Send_String("Your choice : ");
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1b06:	80 ed       	ldi	r24, 0xD0	; 208
    1b08:	8d 0f       	add	r24, r29
    1b0a:	8a 30       	cpi	r24, 0x0A	; 10
    1b0c:	88 f7       	brcc	.-30     	; 0x1af0 <UART_Rooms_Leds_Control+0x12e>
		UART_Transmit('\r');
		UART_Transmit('\r');
	}
	room_on_off_temp = uart_var;
	
	while ((room_on_off_temp != Ascii_1) && (room_on_off_temp != Ascii_0))
    1b0e:	80 ed       	ldi	r24, 0xD0	; 208
    1b10:	8d 0f       	add	r24, r29
    1b12:	82 30       	cpi	r24, 0x02	; 2
    1b14:	f8 f6       	brcc	.-66     	; 0x1ad4 <UART_Rooms_Leds_Control+0x112>
		}
		room_on_off_temp = uart_var;
	}
	uart_var = 0;
	
	if(room_no_temp == Ascii_6)
    1b16:	c6 33       	cpi	r28, 0x36	; 54
    1b18:	09 f0       	breq	.+2      	; 0x1b1c <UART_Rooms_Leds_Control+0x15a>
    1b1a:	6c c0       	rjmp	.+216    	; 0x1bf4 <UART_Rooms_Leds_Control+0x232>
	{
		if(room_on_off_temp == Ascii_1)
    1b1c:	d1 33       	cpi	r29, 0x31	; 49
    1b1e:	a9 f5       	brne	.+106    	; 0x1b8a <UART_Rooms_Leds_Control+0x1c8>
		{
			LED_STAT(ON,Room1);
    1b20:	61 e3       	ldi	r22, 0x31	; 49
    1b22:	81 e3       	ldi	r24, 0x31	; 49
    1b24:	0e 94 80 0a 	call	0x1500	; 0x1500 <LED_STAT>
			LED_STAT(ON,Room2);
    1b28:	62 e3       	ldi	r22, 0x32	; 50
    1b2a:	81 e3       	ldi	r24, 0x31	; 49
    1b2c:	0e 94 80 0a 	call	0x1500	; 0x1500 <LED_STAT>
			LED_STAT(ON,Room3);
    1b30:	63 e3       	ldi	r22, 0x33	; 51
    1b32:	81 e3       	ldi	r24, 0x31	; 49
    1b34:	0e 94 80 0a 	call	0x1500	; 0x1500 <LED_STAT>
			LED_STAT(ON,Room4);
    1b38:	64 e3       	ldi	r22, 0x34	; 52
    1b3a:	81 e3       	ldi	r24, 0x31	; 49
    1b3c:	0e 94 80 0a 	call	0x1500	; 0x1500 <LED_STAT>
			LED_STAT(ON,Room5);
    1b40:	65 e3       	ldi	r22, 0x35	; 53
    1b42:	81 e3       	ldi	r24, 0x31	; 49
    1b44:	0e 94 80 0a 	call	0x1500	; 0x1500 <LED_STAT>
			
			UART_Send_String("All Leds are Turned On");
    1b48:	89 ed       	ldi	r24, 0xD9	; 217
    1b4a:	93 e0       	ldi	r25, 0x03	; 3
    1b4c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Transmit('\r');
    1b50:	8d e0       	ldi	r24, 0x0D	; 13
    1b52:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Transmit('\r');
    1b56:	8d e0       	ldi	r24, 0x0D	; 13
    1b58:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			
			
			LCD_Write_String("All Leds are ");
    1b5c:	8a ee       	ldi	r24, 0xEA	; 234
    1b5e:	91 e0       	ldi	r25, 0x01	; 1
    1b60:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    1b64:	80 ec       	ldi	r24, 0xC0	; 192
    1b66:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			LCD_Write_String ("Turned On");
    1b6a:	86 ee       	ldi	r24, 0xE6	; 230
    1b6c:	93 e0       	ldi	r25, 0x03	; 3
    1b6e:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
    1b72:	2f ef       	ldi	r18, 0xFF	; 255
    1b74:	83 ed       	ldi	r24, 0xD3	; 211
    1b76:	90 e3       	ldi	r25, 0x30	; 48
    1b78:	21 50       	subi	r18, 0x01	; 1
    1b7a:	80 40       	sbci	r24, 0x00	; 0
    1b7c:	90 40       	sbci	r25, 0x00	; 0
    1b7e:	e1 f7       	brne	.-8      	; 0x1b78 <UART_Rooms_Leds_Control+0x1b6>
    1b80:	00 c0       	rjmp	.+0      	; 0x1b82 <UART_Rooms_Leds_Control+0x1c0>
    1b82:	00 00       	nop
			_delay_ms(1000);
			LCD_Clear_Screen();
    1b84:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
    1b88:	3d c0       	rjmp	.+122    	; 0x1c04 <UART_Rooms_Leds_Control+0x242>
		}
		else
		{
			LED_STAT(OFF,Room1);
    1b8a:	61 e3       	ldi	r22, 0x31	; 49
    1b8c:	80 e3       	ldi	r24, 0x30	; 48
    1b8e:	0e 94 80 0a 	call	0x1500	; 0x1500 <LED_STAT>
			LED_STAT(OFF,Room2);
    1b92:	62 e3       	ldi	r22, 0x32	; 50
    1b94:	80 e3       	ldi	r24, 0x30	; 48
    1b96:	0e 94 80 0a 	call	0x1500	; 0x1500 <LED_STAT>
			LED_STAT(OFF,Room3);
    1b9a:	63 e3       	ldi	r22, 0x33	; 51
    1b9c:	80 e3       	ldi	r24, 0x30	; 48
    1b9e:	0e 94 80 0a 	call	0x1500	; 0x1500 <LED_STAT>
			LED_STAT(OFF,Room4);
    1ba2:	64 e3       	ldi	r22, 0x34	; 52
    1ba4:	80 e3       	ldi	r24, 0x30	; 48
    1ba6:	0e 94 80 0a 	call	0x1500	; 0x1500 <LED_STAT>
			LED_STAT(OFF,Room5);
    1baa:	65 e3       	ldi	r22, 0x35	; 53
    1bac:	80 e3       	ldi	r24, 0x30	; 48
    1bae:	0e 94 80 0a 	call	0x1500	; 0x1500 <LED_STAT>
			
			UART_Send_String("All Leds are Turned Off");
    1bb2:	80 ef       	ldi	r24, 0xF0	; 240
    1bb4:	93 e0       	ldi	r25, 0x03	; 3
    1bb6:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Transmit('\r');
    1bba:	8d e0       	ldi	r24, 0x0D	; 13
    1bbc:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Transmit('\r');
    1bc0:	8d e0       	ldi	r24, 0x0D	; 13
    1bc2:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			
			LCD_Write_String("All Leds are ");
    1bc6:	8a ee       	ldi	r24, 0xEA	; 234
    1bc8:	91 e0       	ldi	r25, 0x01	; 1
    1bca:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    1bce:	80 ec       	ldi	r24, 0xC0	; 192
    1bd0:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			LCD_Write_String ("Turned Off");
    1bd4:	8d ef       	ldi	r24, 0xFD	; 253
    1bd6:	93 e0       	ldi	r25, 0x03	; 3
    1bd8:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
    1bdc:	2f ef       	ldi	r18, 0xFF	; 255
    1bde:	83 ed       	ldi	r24, 0xD3	; 211
    1be0:	90 e3       	ldi	r25, 0x30	; 48
    1be2:	21 50       	subi	r18, 0x01	; 1
    1be4:	80 40       	sbci	r24, 0x00	; 0
    1be6:	90 40       	sbci	r25, 0x00	; 0
    1be8:	e1 f7       	brne	.-8      	; 0x1be2 <UART_Rooms_Leds_Control+0x220>
    1bea:	00 c0       	rjmp	.+0      	; 0x1bec <UART_Rooms_Leds_Control+0x22a>
    1bec:	00 00       	nop
			_delay_ms(1000);
			LCD_Clear_Screen();
    1bee:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
    1bf2:	08 c0       	rjmp	.+16     	; 0x1c04 <UART_Rooms_Leds_Control+0x242>
		}
	}
	else
	{
		LED_STAT(room_on_off_temp,room_no_temp);
    1bf4:	6c 2f       	mov	r22, r28
    1bf6:	8d 2f       	mov	r24, r29
    1bf8:	0e 94 80 0a 	call	0x1500	; 0x1500 <LED_STAT>
		LCD_Display_LED (room_no_temp, room_on_off_temp);	
    1bfc:	6d 2f       	mov	r22, r29
    1bfe:	8c 2f       	mov	r24, r28
    1c00:	0e 94 d3 06 	call	0xda6	; 0xda6 <LCD_Display_LED>
	}
	
	UART_Transmit('\r');
    1c04:	8d e0       	ldi	r24, 0x0D	; 13
    1c06:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
	UART_Transmit('\r');
    1c0a:	8d e0       	ldi	r24, 0x0D	; 13
    1c0c:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
	UART_Transmit('\r');
    1c10:	8d e0       	ldi	r24, 0x0D	; 13
    1c12:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
}
    1c16:	df 91       	pop	r29
    1c18:	cf 91       	pop	r28
    1c1a:	08 95       	ret

00001c1c <UART_Admin_Interfacing>:



void UART_Admin_Interfacing()
{
    1c1c:	2f 92       	push	r2
    1c1e:	3f 92       	push	r3
    1c20:	4f 92       	push	r4
    1c22:	5f 92       	push	r5
    1c24:	6f 92       	push	r6
    1c26:	7f 92       	push	r7
    1c28:	8f 92       	push	r8
    1c2a:	9f 92       	push	r9
    1c2c:	af 92       	push	r10
    1c2e:	bf 92       	push	r11
    1c30:	cf 92       	push	r12
    1c32:	df 92       	push	r13
    1c34:	ef 92       	push	r14
    1c36:	ff 92       	push	r15
    1c38:	0f 93       	push	r16
    1c3a:	1f 93       	push	r17
    1c3c:	cf 93       	push	r28
    1c3e:	df 93       	push	r29
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	a6 97       	sbiw	r28, 0x26	; 38
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	f8 94       	cli
    1c4a:	de bf       	out	0x3e, r29	; 62
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	cd bf       	out	0x3d, r28	; 61
	char password_temp_arr[4];	// array taken from eeprom to compare.
	char username_arr_2[4];		// array taken from eeprom in deleting user part.
	char password_arr_2[4];		// array taken from eeprom in deleting user part.
	unsigned char Compare_Var = 0;
	unsigned char user_type = 0;
	char admin_counter = 0;
    1c50:	19 8e       	std	Y+25, r1	; 0x19
	char user_counter = 0;
    1c52:	1a 8e       	std	Y+26, r1	; 0x1a
	char max_number_var = 0;
    1c54:	1b 8e       	std	Y+27, r1	; 0x1b
	char password_arr[4];		// array filled by user interface (ADMIN/USER)
	char username_temp_arr[4];	// array taken from eeprom to compare.
	char password_temp_arr[4];	// array taken from eeprom to compare.
	char username_arr_2[4];		// array taken from eeprom in deleting user part.
	char password_arr_2[4];		// array taken from eeprom in deleting user part.
	unsigned char Compare_Var = 0;
    1c56:	91 2c       	mov	r9, r1
void UART_Admin_Interfacing()
{
	unsigned char uart_var = 0;
	unsigned char option = 0;
	unsigned char brightness_level = 0;
	unsigned char looping_counter = 0;
    1c58:	10 e0       	ldi	r17, 0x00	; 0
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	05 96       	adiw	r24, 0x05	; 5
    1c5e:	9d 8f       	std	Y+29, r25	; 0x1d
    1c60:	8c 8f       	std	Y+28, r24	; 0x1c
    1c62:	2e 01       	movw	r4, r28
    1c64:	99 e0       	ldi	r25, 0x09	; 9
    1c66:	49 0e       	add	r4, r25
    1c68:	51 1c       	adc	r5, r1
						EEPROM_readByte(LCD_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
						_delay_ms(10);
					}
					
					
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	31 96       	adiw	r30, 0x01	; 1
    1c6e:	7f 01       	movw	r14, r30
    1c70:	24 2c       	mov	r2, r4
    1c72:	5e 8e       	std	Y+30, r5	; 0x1e
    1c74:	ef 8f       	std	Y+31, r30	; 0x1f
    1c76:	3f 2c       	mov	r3, r15
    1c78:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1c7a:	fd a3       	std	Y+37, r31	; 0x25
    1c7c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1c7e:	2e a3       	std	Y+38, r18	; 0x26
	char user_counter = 0;
	char max_number_var = 0;
	
	while (option != Ascii_8)	// Corresponding to Logout
	{
		UART_Send_String ("1. Controlling Lighting (Room 1 to Room 5)");
    1c80:	88 e0       	ldi	r24, 0x08	; 8
    1c82:	94 e0       	ldi	r25, 0x04	; 4
    1c84:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
		UART_Transmit('\r');
    1c88:	8d e0       	ldi	r24, 0x0D	; 13
    1c8a:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		UART_Send_String ("2. Dimming lamp");
    1c8e:	83 e3       	ldi	r24, 0x33	; 51
    1c90:	94 e0       	ldi	r25, 0x04	; 4
    1c92:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
		UART_Transmit('\r');
    1c96:	8d e0       	ldi	r24, 0x0D	; 13
    1c98:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		UART_Send_String ("3. Open the Door");
    1c9c:	83 e4       	ldi	r24, 0x43	; 67
    1c9e:	94 e0       	ldi	r25, 0x04	; 4
    1ca0:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
		UART_Transmit('\r');
    1ca4:	8d e0       	ldi	r24, 0x0D	; 13
    1ca6:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		UART_Send_String ("4. Close the Door");
    1caa:	84 e5       	ldi	r24, 0x54	; 84
    1cac:	94 e0       	ldi	r25, 0x04	; 4
    1cae:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
		UART_Transmit('\r');
    1cb2:	8d e0       	ldi	r24, 0x0D	; 13
    1cb4:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		UART_Send_String ("5. Add admin to the system");
    1cb8:	86 e6       	ldi	r24, 0x66	; 102
    1cba:	94 e0       	ldi	r25, 0x04	; 4
    1cbc:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
		UART_Transmit('\r');
    1cc0:	8d e0       	ldi	r24, 0x0D	; 13
    1cc2:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		UART_Send_String ("6. Add user to the system");
    1cc6:	81 e8       	ldi	r24, 0x81	; 129
    1cc8:	94 e0       	ldi	r25, 0x04	; 4
    1cca:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
		UART_Transmit('\r');
    1cce:	8d e0       	ldi	r24, 0x0D	; 13
    1cd0:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		UART_Send_String ("7. Remove a user from the system");
    1cd4:	8b e9       	ldi	r24, 0x9B	; 155
    1cd6:	94 e0       	ldi	r25, 0x04	; 4
    1cd8:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
		UART_Transmit('\r');
    1cdc:	8d e0       	ldi	r24, 0x0D	; 13
    1cde:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		UART_Send_String ("8. Log out");	// return to Mode choice function (Admin / User)
    1ce2:	8c eb       	ldi	r24, 0xBC	; 188
    1ce4:	94 e0       	ldi	r25, 0x04	; 4
    1ce6:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
		UART_Transmit('\r');
    1cea:	8d e0       	ldi	r24, 0x0D	; 13
    1cec:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		UART_Transmit('\r');	
    1cf0:	8d e0       	ldi	r24, 0x0D	; 13
    1cf2:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		
		UART_Send_String ("Your Choice : ");
    1cf6:	8d ec       	ldi	r24, 0xCD	; 205
    1cf8:	91 e0       	ldi	r25, 0x01	; 1
    1cfa:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
		
		uart_var = 0; 
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
		{
			uart_var = UART_Receive();
    1cfe:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
		UART_Transmit('\r');	
		
		UART_Send_String ("Your Choice : ");
		
		uart_var = 0; 
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1d02:	90 ed       	ldi	r25, 0xD0	; 208
    1d04:	98 0f       	add	r25, r24
    1d06:	9a 30       	cpi	r25, 0x0A	; 10
    1d08:	d0 f7       	brcc	.-12     	; 0x1cfe <UART_Admin_Interfacing+0xe2>
    1d0a:	08 2f       	mov	r16, r24
		{
			uart_var = UART_Receive();
		}	
		UART_Transmit(uart_var);
    1d0c:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		UART_Transmit('\r');
    1d10:	8d e0       	ldi	r24, 0x0D	; 13
    1d12:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		UART_Transmit('\r');
    1d16:	8d e0       	ldi	r24, 0x0D	; 13
    1d18:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_8)))
    1d1c:	8f ec       	ldi	r24, 0xCF	; 207
    1d1e:	80 0f       	add	r24, r16
    1d20:	88 30       	cpi	r24, 0x08	; 8
    1d22:	08 f1       	brcs	.+66     	; 0x1d66 <UART_Admin_Interfacing+0x14a>
		{
			UART_Send_String ("Please Choose only from 1 to 8");
    1d24:	87 ec       	ldi	r24, 0xC7	; 199
    1d26:	94 e0       	ldi	r25, 0x04	; 4
    1d28:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Transmit('\r');
    1d2c:	8d e0       	ldi	r24, 0x0D	; 13
    1d2e:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Transmit('\r');
    1d32:	8d e0       	ldi	r24, 0x0D	; 13
    1d34:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			uart_var = 0;
			UART_Send_String("Your choice : ");
    1d38:	88 e3       	ldi	r24, 0x38	; 56
    1d3a:	93 e0       	ldi	r25, 0x03	; 3
    1d3c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
			{
				uart_var = UART_Receive();
    1d40:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
    1d44:	08 2f       	mov	r16, r24
				UART_Transmit(uart_var);
    1d46:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Send_String ("Please Choose only from 1 to 8");
			UART_Transmit('\r');
			UART_Transmit('\r');
			uart_var = 0;
			UART_Send_String("Your choice : ");
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1d4a:	80 ed       	ldi	r24, 0xD0	; 208
    1d4c:	80 0f       	add	r24, r16
    1d4e:	8a 30       	cpi	r24, 0x0A	; 10
    1d50:	b8 f7       	brcc	.-18     	; 0x1d40 <UART_Admin_Interfacing+0x124>
			{
				uart_var = UART_Receive();
				UART_Transmit(uart_var);
			}
			UART_Transmit('\r');
    1d52:	8d e0       	ldi	r24, 0x0D	; 13
    1d54:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Transmit('\r');
    1d58:	8d e0       	ldi	r24, 0x0D	; 13
    1d5a:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			uart_var = UART_Receive();
		}	
		UART_Transmit(uart_var);
		UART_Transmit('\r');
		UART_Transmit('\r');
		while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_8)))
    1d5e:	8f ec       	ldi	r24, 0xCF	; 207
    1d60:	80 0f       	add	r24, r16
    1d62:	88 30       	cpi	r24, 0x08	; 8
    1d64:	f8 f6       	brcc	.-66     	; 0x1d24 <UART_Admin_Interfacing+0x108>
			UART_Transmit('\r');
		}
		option = uart_var;
	
	
		if(option == '1')
    1d66:	01 33       	cpi	r16, 0x31	; 49
    1d68:	19 f4       	brne	.+6      	; 0x1d70 <UART_Admin_Interfacing+0x154>
		{	
			UART_Rooms_Leds_Control();
    1d6a:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <UART_Rooms_Leds_Control>
    1d6e:	88 cf       	rjmp	.-240    	; 0x1c80 <UART_Admin_Interfacing+0x64>
		}
		else if(option == '2')
    1d70:	02 33       	cpi	r16, 0x32	; 50
    1d72:	09 f0       	breq	.+2      	; 0x1d76 <UART_Admin_Interfacing+0x15a>
    1d74:	6c c0       	rjmp	.+216    	; 0x1e4e <UART_Admin_Interfacing+0x232>
		{
			UART_Transmit('\r');
    1d76:	8d e0       	ldi	r24, 0x0D	; 13
    1d78:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Transmit('\r');
    1d7c:	8d e0       	ldi	r24, 0x0D	; 13
    1d7e:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Send_String ("Please Choose one of the following brightness percentages :  ");
    1d82:	86 ee       	ldi	r24, 0xE6	; 230
    1d84:	94 e0       	ldi	r25, 0x04	; 4
    1d86:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Transmit('\r');
    1d8a:	8d e0       	ldi	r24, 0x0D	; 13
    1d8c:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Transmit('\r');
    1d90:	8d e0       	ldi	r24, 0x0D	; 13
    1d92:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		
			UART_Send_String ("0. 0% (Turn Off Led)");
    1d96:	84 e2       	ldi	r24, 0x24	; 36
    1d98:	95 e0       	ldi	r25, 0x05	; 5
    1d9a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Transmit('\r');
    1d9e:	8d e0       	ldi	r24, 0x0D	; 13
    1da0:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Send_String ("1. 25% ");
    1da4:	89 e3       	ldi	r24, 0x39	; 57
    1da6:	95 e0       	ldi	r25, 0x05	; 5
    1da8:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Transmit('\r');
    1dac:	8d e0       	ldi	r24, 0x0D	; 13
    1dae:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Send_String ("2. 50% ");
    1db2:	81 e4       	ldi	r24, 0x41	; 65
    1db4:	95 e0       	ldi	r25, 0x05	; 5
    1db6:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Transmit('\r');
    1dba:	8d e0       	ldi	r24, 0x0D	; 13
    1dbc:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Send_String ("3. 75% ");
    1dc0:	89 e4       	ldi	r24, 0x49	; 73
    1dc2:	95 e0       	ldi	r25, 0x05	; 5
    1dc4:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Transmit('\r');
    1dc8:	8d e0       	ldi	r24, 0x0D	; 13
    1dca:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Send_String ("4. 100%  (Maximum Power)");
    1dce:	81 e5       	ldi	r24, 0x51	; 81
    1dd0:	95 e0       	ldi	r25, 0x05	; 5
    1dd2:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Transmit('\r');
    1dd6:	8d e0       	ldi	r24, 0x0D	; 13
    1dd8:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		
			UART_Send_String("Your choice : ");
    1ddc:	88 e3       	ldi	r24, 0x38	; 56
    1dde:	93 e0       	ldi	r25, 0x03	; 3
    1de0:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			uart_var = 0;
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
			{
				uart_var = UART_Receive();
    1de4:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
    1de8:	08 2f       	mov	r16, r24
				UART_Transmit(uart_var);
    1dea:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				UART_Transmit('\r');
    1dee:	8d e0       	ldi	r24, 0x0D	; 13
    1df0:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				UART_Transmit('\r');
    1df4:	8d e0       	ldi	r24, 0x0D	; 13
    1df6:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Send_String ("4. 100%  (Maximum Power)");
			UART_Transmit('\r');
		
			UART_Send_String("Your choice : ");
			uart_var = 0;
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1dfa:	80 ed       	ldi	r24, 0xD0	; 208
    1dfc:	80 0f       	add	r24, r16
    1dfe:	8a 30       	cpi	r24, 0x0A	; 10
    1e00:	88 f7       	brcc	.-30     	; 0x1de4 <UART_Admin_Interfacing+0x1c8>
    1e02:	1d c0       	rjmp	.+58     	; 0x1e3e <UART_Admin_Interfacing+0x222>
				UART_Transmit('\r');
			}
		
			while (!((uart_var >= Ascii_0) && (uart_var <= Ascii_4)))
			{
				UART_Send_String ("Please Choose only from 0 to 4");
    1e04:	8a e6       	ldi	r24, 0x6A	; 106
    1e06:	95 e0       	ldi	r25, 0x05	; 5
    1e08:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
				UART_Transmit('\r');
    1e0c:	8d e0       	ldi	r24, 0x0D	; 13
    1e0e:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				UART_Transmit('\r');
    1e12:	8d e0       	ldi	r24, 0x0D	; 13
    1e14:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				uart_var = 0;
				UART_Send_String("Your choice : ");
    1e18:	88 e3       	ldi	r24, 0x38	; 56
    1e1a:	93 e0       	ldi	r25, 0x03	; 3
    1e1c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
				{
					uart_var = UART_Receive();
    1e20:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
    1e24:	08 2f       	mov	r16, r24
					UART_Transmit(uart_var);
    1e26:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Transmit('\r');
    1e2a:	8d e0       	ldi	r24, 0x0D	; 13
    1e2c:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Transmit('\r');
    1e30:	8d e0       	ldi	r24, 0x0D	; 13
    1e32:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				UART_Send_String ("Please Choose only from 0 to 4");
				UART_Transmit('\r');
				UART_Transmit('\r');
				uart_var = 0;
				UART_Send_String("Your choice : ");
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1e36:	80 ed       	ldi	r24, 0xD0	; 208
    1e38:	80 0f       	add	r24, r16
    1e3a:	8a 30       	cpi	r24, 0x0A	; 10
    1e3c:	88 f7       	brcc	.-30     	; 0x1e20 <UART_Admin_Interfacing+0x204>
				UART_Transmit(uart_var);
				UART_Transmit('\r');
				UART_Transmit('\r');
			}
		
			while (!((uart_var >= Ascii_0) && (uart_var <= Ascii_4)))
    1e3e:	80 ed       	ldi	r24, 0xD0	; 208
    1e40:	80 0f       	add	r24, r16
    1e42:	85 30       	cpi	r24, 0x05	; 5
    1e44:	f8 f6       	brcc	.-66     	; 0x1e04 <UART_Admin_Interfacing+0x1e8>
				}
			}
		
			brightness_level = uart_var;
			uart_var = 0;
			DIMMER_CONTROL(brightness_level); 
    1e46:	80 2f       	mov	r24, r16
    1e48:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <DIMMER_CONTROL>
    1e4c:	19 cf       	rjmp	.-462    	; 0x1c80 <UART_Admin_Interfacing+0x64>
					
		}	
		else if(option == '3')
    1e4e:	03 33       	cpi	r16, 0x33	; 51
    1e50:	59 f5       	brne	.+86     	; 0x1ea8 <UART_Admin_Interfacing+0x28c>
		{
			openDoor();
    1e52:	0e 94 0a 0b 	call	0x1614	; 0x1614 <openDoor>
			UART_Send_String("\r");
    1e56:	89 e8       	ldi	r24, 0x89	; 137
    1e58:	95 e0       	ldi	r25, 0x05	; 5
    1e5a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Transmit('\r');
    1e5e:	8d e0       	ldi	r24, 0x0D	; 13
    1e60:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Send_String("The door is opened");
    1e64:	8b e8       	ldi	r24, 0x8B	; 139
    1e66:	95 e0       	ldi	r25, 0x05	; 5
    1e68:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Send_String("\r");
    1e6c:	89 e8       	ldi	r24, 0x89	; 137
    1e6e:	95 e0       	ldi	r25, 0x05	; 5
    1e70:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Transmit('\r');
    1e74:	8d e0       	ldi	r24, 0x0D	; 13
    1e76:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		
			LCD_Write_String("  The door is");
    1e7a:	85 ea       	ldi	r24, 0xA5	; 165
    1e7c:	92 e0       	ldi	r25, 0x02	; 2
    1e7e:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    1e82:	80 ec       	ldi	r24, 0xC0	; 192
    1e84:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			LCD_Write_String("     Opened");
    1e88:	8e e9       	ldi	r24, 0x9E	; 158
    1e8a:	95 e0       	ldi	r25, 0x05	; 5
    1e8c:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
    1e90:	8f ef       	ldi	r24, 0xFF	; 255
    1e92:	99 e6       	ldi	r25, 0x69	; 105
    1e94:	e8 e1       	ldi	r30, 0x18	; 24
    1e96:	81 50       	subi	r24, 0x01	; 1
    1e98:	90 40       	sbci	r25, 0x00	; 0
    1e9a:	e0 40       	sbci	r30, 0x00	; 0
    1e9c:	e1 f7       	brne	.-8      	; 0x1e96 <UART_Admin_Interfacing+0x27a>
    1e9e:	00 c0       	rjmp	.+0      	; 0x1ea0 <UART_Admin_Interfacing+0x284>
    1ea0:	00 00       	nop
			_delay_ms(500);
			LCD_Clear_Screen();
    1ea2:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
    1ea6:	ec ce       	rjmp	.-552    	; 0x1c80 <UART_Admin_Interfacing+0x64>
		}
		else if(option == '4')
    1ea8:	04 33       	cpi	r16, 0x34	; 52
    1eaa:	59 f5       	brne	.+86     	; 0x1f02 <UART_Admin_Interfacing+0x2e6>
		{
			closeDoor();
    1eac:	0e 94 0f 0b 	call	0x161e	; 0x161e <closeDoor>
			UART_Send_String("\r");
    1eb0:	89 e8       	ldi	r24, 0x89	; 137
    1eb2:	95 e0       	ldi	r25, 0x05	; 5
    1eb4:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Transmit('\r');
    1eb8:	8d e0       	ldi	r24, 0x0D	; 13
    1eba:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Send_String("The door is closed");
    1ebe:	8a ea       	ldi	r24, 0xAA	; 170
    1ec0:	95 e0       	ldi	r25, 0x05	; 5
    1ec2:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Send_String("\r");
    1ec6:	89 e8       	ldi	r24, 0x89	; 137
    1ec8:	95 e0       	ldi	r25, 0x05	; 5
    1eca:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Transmit('\r');
    1ece:	8d e0       	ldi	r24, 0x0D	; 13
    1ed0:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		
			LCD_Write_String("  The door is");
    1ed4:	85 ea       	ldi	r24, 0xA5	; 165
    1ed6:	92 e0       	ldi	r25, 0x02	; 2
    1ed8:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    1edc:	80 ec       	ldi	r24, 0xC0	; 192
    1ede:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			LCD_Write_String("    Closed");
    1ee2:	83 eb       	ldi	r24, 0xB3	; 179
    1ee4:	92 e0       	ldi	r25, 0x02	; 2
    1ee6:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
    1eea:	ff ef       	ldi	r31, 0xFF	; 255
    1eec:	29 e6       	ldi	r18, 0x69	; 105
    1eee:	88 e1       	ldi	r24, 0x18	; 24
    1ef0:	f1 50       	subi	r31, 0x01	; 1
    1ef2:	20 40       	sbci	r18, 0x00	; 0
    1ef4:	80 40       	sbci	r24, 0x00	; 0
    1ef6:	e1 f7       	brne	.-8      	; 0x1ef0 <UART_Admin_Interfacing+0x2d4>
    1ef8:	00 c0       	rjmp	.+0      	; 0x1efa <UART_Admin_Interfacing+0x2de>
    1efa:	00 00       	nop
			_delay_ms(500);
			LCD_Clear_Screen();
    1efc:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
    1f00:	bf ce       	rjmp	.-642    	; 0x1c80 <UART_Admin_Interfacing+0x64>
		}
	
		else if(option == '5')	// Add Admin to the system
    1f02:	05 33       	cpi	r16, 0x35	; 53
    1f04:	09 f0       	breq	.+2      	; 0x1f08 <UART_Admin_Interfacing+0x2ec>
    1f06:	cf c0       	rjmp	.+414    	; 0x20a6 <UART_Admin_Interfacing+0x48a>
		{
				EEPROM_readByte(Counters_Block,Admins_number_BIT,&max_number_var);
    1f08:	ae 01       	movw	r20, r28
    1f0a:	45 5e       	subi	r20, 0xE5	; 229
    1f0c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f0e:	61 e0       	ldi	r22, 0x01	; 1
    1f10:	8e ea       	ldi	r24, 0xAE	; 174
    1f12:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
    1f16:	ef e3       	ldi	r30, 0x3F	; 63
    1f18:	fc e9       	ldi	r31, 0x9C	; 156
    1f1a:	31 97       	sbiw	r30, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <UART_Admin_Interfacing+0x2fe>
    1f1e:	00 c0       	rjmp	.+0      	; 0x1f20 <UART_Admin_Interfacing+0x304>
    1f20:	00 00       	nop
				_delay_ms(10);
				
				if(max_number_var < ADMINS_MAX_NO)
    1f22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f24:	80 34       	cpi	r24, 0x40	; 64
    1f26:	08 f0       	brcs	.+2      	; 0x1f2a <UART_Admin_Interfacing+0x30e>
    1f28:	a3 c0       	rjmp	.+326    	; 0x2070 <UART_Admin_Interfacing+0x454>
				{
					/*-----------------	Writing the username -----------------*/
					UART_Transmit('\r');
    1f2a:	8d e0       	ldi	r24, 0x0D	; 13
    1f2c:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Transmit('\r');
    1f30:	8d e0       	ldi	r24, 0x0D	; 13
    1f32:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Send_String("Enter Username : ");
    1f36:	87 ea       	ldi	r24, 0xA7	; 167
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>

					while(looping_counter < LOGIN_SIZE)
    1f3e:	14 30       	cpi	r17, 0x04	; 4
    1f40:	88 f4       	brcc	.+34     	; 0x1f64 <UART_Admin_Interfacing+0x348>
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
						{
							uart_var = UART_Receive();
    1f42:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
    1f46:	08 2f       	mov	r16, r24
					UART_Send_String("Enter Username : ");

					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1f48:	80 ed       	ldi	r24, 0xD0	; 208
    1f4a:	80 0f       	add	r24, r16
    1f4c:	8a 30       	cpi	r24, 0x0A	; 10
    1f4e:	c8 f7       	brcc	.-14     	; 0x1f42 <UART_Admin_Interfacing+0x326>
						{
							uart_var = UART_Receive();
						}
						
						UART_Transmit(uart_var);
    1f50:	80 2f       	mov	r24, r16
    1f52:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
						username_arr[looping_counter] = uart_var;
    1f56:	f7 01       	movw	r30, r14
    1f58:	e1 0f       	add	r30, r17
    1f5a:	f1 1d       	adc	r31, r1
    1f5c:	00 83       	st	Z, r16
						looping_counter++;
    1f5e:	1f 5f       	subi	r17, 0xFF	; 255
					/*-----------------	Writing the username -----------------*/
					UART_Transmit('\r');
					UART_Transmit('\r');
					UART_Send_String("Enter Username : ");

					while(looping_counter < LOGIN_SIZE)
    1f60:	14 30       	cpi	r17, 0x04	; 4
    1f62:	79 f7       	brne	.-34     	; 0x1f42 <UART_Admin_Interfacing+0x326>
						UART_Transmit(uart_var);
						username_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
					UART_Transmit('\r');
    1f64:	8d e0       	ldi	r24, 0x0D	; 13
    1f66:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					
					/*-----------------	Writing the password -----------------*/
					UART_Send_String("Enter Password : ");
    1f6a:	89 eb       	ldi	r24, 0xB9	; 185
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
    1f72:	3e 01       	movw	r6, r28
    1f74:	f5 e0       	ldi	r31, 0x05	; 5
    1f76:	6f 0e       	add	r6, r31
    1f78:	71 1c       	adc	r7, r1
    1f7a:	63 01       	movw	r12, r6
					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
						{
							uart_var = UART_Receive();
    1f7c:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
    1f80:	18 2f       	mov	r17, r24
					UART_Send_String("Enter Password : ");

					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1f82:	80 ed       	ldi	r24, 0xD0	; 208
    1f84:	81 0f       	add	r24, r17
    1f86:	8a 30       	cpi	r24, 0x0A	; 10
    1f88:	c8 f7       	brcc	.-14     	; 0x1f7c <UART_Admin_Interfacing+0x360>
						{
							uart_var = UART_Receive();
						}
						
						UART_Transmit(uart_var);
    1f8a:	81 2f       	mov	r24, r17
    1f8c:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
						password_arr[looping_counter] = uart_var;
    1f90:	f6 01       	movw	r30, r12
    1f92:	11 93       	st	Z+, r17
    1f94:	6f 01       	movw	r12, r30
					UART_Transmit('\r');
					
					/*-----------------	Writing the password -----------------*/
					UART_Send_String("Enter Password : ");

					while(looping_counter < LOGIN_SIZE)
    1f96:	e4 15       	cp	r30, r4
    1f98:	f5 05       	cpc	r31, r5
    1f9a:	81 f7       	brne	.-32     	; 0x1f7c <UART_Admin_Interfacing+0x360>
						UART_Transmit(uart_var);
						password_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
					UART_Transmit('\r');
    1f9c:	8d e0       	ldi	r24, 0x0D	; 13
    1f9e:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					
					EEPROM_readByte(Counters_Block,Admins_number_BIT,&admin_counter);
    1fa2:	ae 01       	movw	r20, r28
    1fa4:	47 5e       	subi	r20, 0xE7	; 231
    1fa6:	5f 4f       	sbci	r21, 0xFF	; 255
    1fa8:	61 e0       	ldi	r22, 0x01	; 1
    1faa:	8e ea       	ldi	r24, 0xAE	; 174
    1fac:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
    1fb0:	8f e3       	ldi	r24, 0x3F	; 63
    1fb2:	9c e9       	ldi	r25, 0x9C	; 156
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <UART_Admin_Interfacing+0x398>
    1fb8:	00 c0       	rjmp	.+0      	; 0x1fba <UART_Admin_Interfacing+0x39e>
    1fba:	00 00       	nop
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	31 96       	adiw	r30, 0x01	; 1
    1fc0:	6f 01       	movw	r12, r30
					_delay_ms(10);
				
					for(char i = 0; i < LOGIN_SIZE; i++)
    1fc2:	b1 2c       	mov	r11, r1
    1fc4:	1b 2d       	mov	r17, r11
					{
						EEPROM_writeByte(Admin_Username_Block, (4*admin_counter)+i, username_arr[i]);
    1fc6:	f6 01       	movw	r30, r12
    1fc8:	41 91       	ld	r20, Z+
    1fca:	6f 01       	movw	r12, r30
    1fcc:	69 8d       	ldd	r22, Y+25	; 0x19
    1fce:	66 0f       	add	r22, r22
    1fd0:	66 0f       	add	r22, r22
    1fd2:	61 0f       	add	r22, r17
    1fd4:	82 ea       	ldi	r24, 0xA2	; 162
    1fd6:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>
    1fda:	8f e3       	ldi	r24, 0x3F	; 63
    1fdc:	9c e9       	ldi	r25, 0x9C	; 156
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <UART_Admin_Interfacing+0x3c2>
    1fe2:	00 c0       	rjmp	.+0      	; 0x1fe4 <UART_Admin_Interfacing+0x3c8>
    1fe4:	00 00       	nop
						_delay_ms(10);
						EEPROM_writeByte(Admin_Password_Block, (4*admin_counter)+i, password_arr[i]);
    1fe6:	f3 01       	movw	r30, r6
    1fe8:	41 91       	ld	r20, Z+
    1fea:	3f 01       	movw	r6, r30
    1fec:	69 8d       	ldd	r22, Y+25	; 0x19
    1fee:	66 0f       	add	r22, r22
    1ff0:	66 0f       	add	r22, r22
    1ff2:	61 0f       	add	r22, r17
    1ff4:	84 ea       	ldi	r24, 0xA4	; 164
    1ff6:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>
    1ffa:	8f e3       	ldi	r24, 0x3F	; 63
    1ffc:	9c e9       	ldi	r25, 0x9C	; 156
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	f1 f7       	brne	.-4      	; 0x1ffe <UART_Admin_Interfacing+0x3e2>
    2002:	00 c0       	rjmp	.+0      	; 0x2004 <UART_Admin_Interfacing+0x3e8>
    2004:	00 00       	nop
					UART_Transmit('\r');
					
					EEPROM_readByte(Counters_Block,Admins_number_BIT,&admin_counter);
					_delay_ms(10);
				
					for(char i = 0; i < LOGIN_SIZE; i++)
    2006:	1f 5f       	subi	r17, 0xFF	; 255
    2008:	14 30       	cpi	r17, 0x04	; 4
    200a:	e9 f6       	brne	.-70     	; 0x1fc6 <UART_Admin_Interfacing+0x3aa>
						EEPROM_writeByte(Admin_Username_Block, (4*admin_counter)+i, username_arr[i]);
						_delay_ms(10);
						EEPROM_writeByte(Admin_Password_Block, (4*admin_counter)+i, password_arr[i]);
						_delay_ms(10);
					}
					admin_counter++;
    200c:	49 8d       	ldd	r20, Y+25	; 0x19
    200e:	4f 5f       	subi	r20, 0xFF	; 255
    2010:	49 8f       	std	Y+25, r20	; 0x19
					EEPROM_writeByte(Counters_Block,Admins_number_BIT,admin_counter);
    2012:	61 e0       	ldi	r22, 0x01	; 1
    2014:	8e ea       	ldi	r24, 0xAE	; 174
    2016:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>
    201a:	ef e3       	ldi	r30, 0x3F	; 63
    201c:	fc e9       	ldi	r31, 0x9C	; 156
    201e:	31 97       	sbiw	r30, 0x01	; 1
    2020:	f1 f7       	brne	.-4      	; 0x201e <UART_Admin_Interfacing+0x402>
    2022:	00 c0       	rjmp	.+0      	; 0x2024 <UART_Admin_Interfacing+0x408>
    2024:	00 00       	nop
					_delay_ms(10);		
				
					UART_Send_String("The admin is added successfully");
    2026:	8d eb       	ldi	r24, 0xBD	; 189
    2028:	95 e0       	ldi	r25, 0x05	; 5
    202a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
					UART_Transmit('\r');
    202e:	8d e0       	ldi	r24, 0x0D	; 13
    2030:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Transmit('\r');
    2034:	8d e0       	ldi	r24, 0x0D	; 13
    2036:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					
					
					LCD_Set_Cursor(0,1);
    203a:	61 e0       	ldi	r22, 0x01	; 1
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	0e 94 c2 06 	call	0xd84	; 0xd84 <LCD_Set_Cursor>
					LCD_Write_String("Admin is added");
    2042:	8d ed       	ldi	r24, 0xDD	; 221
    2044:	95 e0       	ldi	r25, 0x05	; 5
    2046:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
					LCD_Set_Cursor(1,2);
    204a:	62 e0       	ldi	r22, 0x02	; 2
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	0e 94 c2 06 	call	0xd84	; 0xd84 <LCD_Set_Cursor>
					LCD_Write_String("successfully");
    2052:	80 ed       	ldi	r24, 0xD0	; 208
    2054:	95 e0       	ldi	r25, 0x05	; 5
    2056:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
    205a:	ff ef       	ldi	r31, 0xFF	; 255
    205c:	29 e6       	ldi	r18, 0x69	; 105
    205e:	88 e1       	ldi	r24, 0x18	; 24
    2060:	f1 50       	subi	r31, 0x01	; 1
    2062:	20 40       	sbci	r18, 0x00	; 0
    2064:	80 40       	sbci	r24, 0x00	; 0
    2066:	e1 f7       	brne	.-8      	; 0x2060 <UART_Admin_Interfacing+0x444>
    2068:	00 c0       	rjmp	.+0      	; 0x206a <UART_Admin_Interfacing+0x44e>
    206a:	00 00       	nop
						
						UART_Transmit(uart_var);
						password_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
    206c:	10 e0       	ldi	r17, 0x00	; 0
    206e:	08 ce       	rjmp	.-1008   	; 0x1c80 <UART_Admin_Interfacing+0x64>
					_delay_ms(500);
					
				}
				else
				{
					UART_Send_String("Sorry, the maximum number for users is 64 users");
    2070:	8c ee       	ldi	r24, 0xEC	; 236
    2072:	95 e0       	ldi	r25, 0x05	; 5
    2074:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
					UART_Transmit('\r');
    2078:	8d e0       	ldi	r24, 0x0D	; 13
    207a:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Send_String("The system can't add more");
    207e:	8c e1       	ldi	r24, 0x1C	; 28
    2080:	96 e0       	ldi	r25, 0x06	; 6
    2082:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
					UART_Transmit('\r');
    2086:	8d e0       	ldi	r24, 0x0D	; 13
    2088:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Transmit('\r');
    208c:	8d e0       	ldi	r24, 0x0D	; 13
    208e:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
    2092:	9f ef       	ldi	r25, 0xFF	; 255
    2094:	e9 e6       	ldi	r30, 0x69	; 105
    2096:	f8 e1       	ldi	r31, 0x18	; 24
    2098:	91 50       	subi	r25, 0x01	; 1
    209a:	e0 40       	sbci	r30, 0x00	; 0
    209c:	f0 40       	sbci	r31, 0x00	; 0
    209e:	e1 f7       	brne	.-8      	; 0x2098 <UART_Admin_Interfacing+0x47c>
    20a0:	00 c0       	rjmp	.+0      	; 0x20a2 <UART_Admin_Interfacing+0x486>
    20a2:	00 00       	nop
    20a4:	ed cd       	rjmp	.-1062   	; 0x1c80 <UART_Admin_Interfacing+0x64>
					_delay_ms(500);	
				}
		}
	
		else if(option == '6')	// Add a user to the system
    20a6:	06 33       	cpi	r16, 0x36	; 54
    20a8:	09 f0       	breq	.+2      	; 0x20ac <UART_Admin_Interfacing+0x490>
    20aa:	d6 c1       	rjmp	.+940    	; 0x2458 <UART_Admin_Interfacing+0x83c>
		{
			UART_Transmit('\r');
    20ac:	8d e0       	ldi	r24, 0x0D	; 13
    20ae:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Transmit('\r');
    20b2:	8d e0       	ldi	r24, 0x0D	; 13
    20b4:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Send_String("1. Remote User (UART)");
    20b8:	86 e3       	ldi	r24, 0x36	; 54
    20ba:	96 e0       	ldi	r25, 0x06	; 6
    20bc:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Transmit('\r');
    20c0:	8d e0       	ldi	r24, 0x0D	; 13
    20c2:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Send_String("2. LCD & Keypad User ");
    20c6:	8c e4       	ldi	r24, 0x4C	; 76
    20c8:	96 e0       	ldi	r25, 0x06	; 6
    20ca:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Transmit('\r');
    20ce:	8d e0       	ldi	r24, 0x0D	; 13
    20d0:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Transmit('\r');
    20d4:	8d e0       	ldi	r24, 0x0D	; 13
    20d6:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			
			UART_Send_String("Your choice : ");
    20da:	88 e3       	ldi	r24, 0x38	; 56
    20dc:	93 e0       	ldi	r25, 0x03	; 3
    20de:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			
			uart_var = 0;
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
			{
				uart_var = UART_Receive();
    20e2:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
    20e6:	08 2f       	mov	r16, r24
				UART_Transmit(uart_var);
    20e8:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Transmit('\r');
			
			UART_Send_String("Your choice : ");
			
			uart_var = 0;
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    20ec:	80 ed       	ldi	r24, 0xD0	; 208
    20ee:	80 0f       	add	r24, r16
    20f0:	8a 30       	cpi	r24, 0x0A	; 10
    20f2:	b8 f7       	brcc	.-18     	; 0x20e2 <UART_Admin_Interfacing+0x4c6>
			{
				uart_var = UART_Receive();
				UART_Transmit(uart_var);
			}
			
			while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_2)))
    20f4:	8f ec       	ldi	r24, 0xCF	; 207
    20f6:	80 0f       	add	r24, r16
    20f8:	82 30       	cpi	r24, 0x02	; 2
    20fa:	e0 f0       	brcs	.+56     	; 0x2134 <UART_Admin_Interfacing+0x518>
			{
				UART_Send_String ("Please Choose only 1 or 2");
    20fc:	8e e1       	ldi	r24, 0x1E	; 30
    20fe:	93 e0       	ldi	r25, 0x03	; 3
    2100:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
				UART_Transmit('\r');
    2104:	8d e0       	ldi	r24, 0x0D	; 13
    2106:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				UART_Transmit('\r');
    210a:	8d e0       	ldi	r24, 0x0D	; 13
    210c:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				uart_var = 0;
				UART_Send_String("Your choice : ");
    2110:	88 e3       	ldi	r24, 0x38	; 56
    2112:	93 e0       	ldi	r25, 0x03	; 3
    2114:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
				{
					uart_var = UART_Receive();
    2118:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
    211c:	08 2f       	mov	r16, r24
				UART_Send_String ("Please Choose only 1 or 2");
				UART_Transmit('\r');
				UART_Transmit('\r');
				uart_var = 0;
				UART_Send_String("Your choice : ");
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    211e:	80 ed       	ldi	r24, 0xD0	; 208
    2120:	80 0f       	add	r24, r16
    2122:	8a 30       	cpi	r24, 0x0A	; 10
    2124:	c8 f7       	brcc	.-14     	; 0x2118 <UART_Admin_Interfacing+0x4fc>
				{
					uart_var = UART_Receive();
				}
				UART_Transmit(uart_var);
    2126:	80 2f       	mov	r24, r16
    2128:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			{
				uart_var = UART_Receive();
				UART_Transmit(uart_var);
			}
			
			while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_2)))
    212c:	8f ec       	ldi	r24, 0xCF	; 207
    212e:	80 0f       	add	r24, r16
    2130:	82 30       	cpi	r24, 0x02	; 2
    2132:	20 f7       	brcc	.-56     	; 0x20fc <UART_Admin_Interfacing+0x4e0>
				UART_Transmit(uart_var);
			}
			user_type = uart_var;
			
			
			if(user_type == '1')	// uart_user
    2134:	01 33       	cpi	r16, 0x31	; 49
    2136:	09 f0       	breq	.+2      	; 0x213a <UART_Admin_Interfacing+0x51e>
    2138:	d0 c0       	rjmp	.+416    	; 0x22da <UART_Admin_Interfacing+0x6be>
			{
				EEPROM_readByte(Counters_Block,Users_UART_number_BIT,&max_number_var);
    213a:	ae 01       	movw	r20, r28
    213c:	45 5e       	subi	r20, 0xE5	; 229
    213e:	5f 4f       	sbci	r21, 0xFF	; 255
    2140:	62 e0       	ldi	r22, 0x02	; 2
    2142:	8e ea       	ldi	r24, 0xAE	; 174
    2144:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
    2148:	8f e3       	ldi	r24, 0x3F	; 63
    214a:	9c e9       	ldi	r25, 0x9C	; 156
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <UART_Admin_Interfacing+0x530>
    2150:	00 c0       	rjmp	.+0      	; 0x2152 <UART_Admin_Interfacing+0x536>
    2152:	00 00       	nop
				_delay_ms(10);
				
				if(max_number_var < USERS_MAX_NO)
    2154:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2156:	80 34       	cpi	r24, 0x40	; 64
    2158:	08 f0       	brcs	.+2      	; 0x215c <UART_Admin_Interfacing+0x540>
    215a:	a4 c0       	rjmp	.+328    	; 0x22a4 <UART_Admin_Interfacing+0x688>
				{
					/*-----------------	Writing the username -----------------*/
					UART_Transmit('\r');
    215c:	8d e0       	ldi	r24, 0x0D	; 13
    215e:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Transmit('\r');
    2162:	8d e0       	ldi	r24, 0x0D	; 13
    2164:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Send_String("Enter Username : ");
    2168:	87 ea       	ldi	r24, 0xA7	; 167
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>

					while(looping_counter < LOGIN_SIZE)
    2170:	14 30       	cpi	r17, 0x04	; 4
    2172:	88 f4       	brcc	.+34     	; 0x2196 <UART_Admin_Interfacing+0x57a>
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
						{
							uart_var = UART_Receive();
    2174:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
    2178:	08 2f       	mov	r16, r24
					UART_Send_String("Enter Username : ");

					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    217a:	80 ed       	ldi	r24, 0xD0	; 208
    217c:	80 0f       	add	r24, r16
    217e:	8a 30       	cpi	r24, 0x0A	; 10
    2180:	c8 f7       	brcc	.-14     	; 0x2174 <UART_Admin_Interfacing+0x558>
						{
							uart_var = UART_Receive();
						}
						
						UART_Transmit(uart_var);
    2182:	80 2f       	mov	r24, r16
    2184:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
						username_arr[looping_counter] = uart_var;
    2188:	f7 01       	movw	r30, r14
    218a:	e1 0f       	add	r30, r17
    218c:	f1 1d       	adc	r31, r1
    218e:	00 83       	st	Z, r16
						looping_counter++;
    2190:	1f 5f       	subi	r17, 0xFF	; 255
					/*-----------------	Writing the username -----------------*/
					UART_Transmit('\r');
					UART_Transmit('\r');
					UART_Send_String("Enter Username : ");

					while(looping_counter < LOGIN_SIZE)
    2192:	14 30       	cpi	r17, 0x04	; 4
    2194:	79 f7       	brne	.-34     	; 0x2174 <UART_Admin_Interfacing+0x558>
						UART_Transmit(uart_var);
						username_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
					UART_Transmit('\r');
    2196:	8d e0       	ldi	r24, 0x0D	; 13
    2198:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					
					/*-----------------	Writing the password -----------------*/
					UART_Send_String("Enter Password : ");
    219c:	89 eb       	ldi	r24, 0xB9	; 185
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
    21a4:	8e 01       	movw	r16, r28
    21a6:	0b 5f       	subi	r16, 0xFB	; 251
    21a8:	1f 4f       	sbci	r17, 0xFF	; 255
    21aa:	68 01       	movw	r12, r16
    21ac:	58 01       	movw	r10, r16
					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
						{
							uart_var = UART_Receive();
    21ae:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
    21b2:	18 2f       	mov	r17, r24
					UART_Send_String("Enter Password : ");

					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    21b4:	80 ed       	ldi	r24, 0xD0	; 208
    21b6:	81 0f       	add	r24, r17
    21b8:	8a 30       	cpi	r24, 0x0A	; 10
    21ba:	c8 f7       	brcc	.-14     	; 0x21ae <UART_Admin_Interfacing+0x592>
						{
							uart_var = UART_Receive();
						}
						
						UART_Transmit(uart_var);
    21bc:	81 2f       	mov	r24, r17
    21be:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
						password_arr[looping_counter] = uart_var;
    21c2:	f6 01       	movw	r30, r12
    21c4:	11 93       	st	Z+, r17
    21c6:	6f 01       	movw	r12, r30
					UART_Transmit('\r');
					
					/*-----------------	Writing the password -----------------*/
					UART_Send_String("Enter Password : ");

					while(looping_counter < LOGIN_SIZE)
    21c8:	4e 16       	cp	r4, r30
    21ca:	5f 06       	cpc	r5, r31
    21cc:	81 f7       	brne	.-32     	; 0x21ae <UART_Admin_Interfacing+0x592>
    21ce:	85 01       	movw	r16, r10
						UART_Transmit(uart_var);
						password_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
					UART_Transmit('\r');
    21d0:	8d e0       	ldi	r24, 0x0D	; 13
    21d2:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					
					EEPROM_readByte(Counters_Block,Users_UART_number_BIT,&user_counter);
    21d6:	ae 01       	movw	r20, r28
    21d8:	46 5e       	subi	r20, 0xE6	; 230
    21da:	5f 4f       	sbci	r21, 0xFF	; 255
    21dc:	62 e0       	ldi	r22, 0x02	; 2
    21de:	8e ea       	ldi	r24, 0xAE	; 174
    21e0:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
    21e4:	8f e3       	ldi	r24, 0x3F	; 63
    21e6:	9c e9       	ldi	r25, 0x9C	; 156
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	f1 f7       	brne	.-4      	; 0x21e8 <UART_Admin_Interfacing+0x5cc>
    21ec:	00 c0       	rjmp	.+0      	; 0x21ee <UART_Admin_Interfacing+0x5d2>
    21ee:	00 00       	nop
    21f0:	fe 01       	movw	r30, r28
    21f2:	31 96       	adiw	r30, 0x01	; 1
    21f4:	6f 01       	movw	r12, r30
					_delay_ms(10);
					
					for(char i = 0; i < LOGIN_SIZE; i++)
    21f6:	b1 2c       	mov	r11, r1
					{
						EEPROM_writeByte(UART_User_Username_Block, (4*user_counter)+i, username_arr[i]);
    21f8:	f6 01       	movw	r30, r12
    21fa:	41 91       	ld	r20, Z+
    21fc:	6f 01       	movw	r12, r30
    21fe:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2200:	66 0f       	add	r22, r22
    2202:	66 0f       	add	r22, r22
    2204:	6b 0d       	add	r22, r11
    2206:	86 ea       	ldi	r24, 0xA6	; 166
    2208:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>
    220c:	8f e3       	ldi	r24, 0x3F	; 63
    220e:	9c e9       	ldi	r25, 0x9C	; 156
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	f1 f7       	brne	.-4      	; 0x2210 <UART_Admin_Interfacing+0x5f4>
    2214:	00 c0       	rjmp	.+0      	; 0x2216 <UART_Admin_Interfacing+0x5fa>
    2216:	00 00       	nop
						_delay_ms(10);
						EEPROM_writeByte(UART_User_Password_Block, (4*user_counter)+i, password_arr[i]);
    2218:	f8 01       	movw	r30, r16
    221a:	41 91       	ld	r20, Z+
    221c:	8f 01       	movw	r16, r30
    221e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2220:	66 0f       	add	r22, r22
    2222:	66 0f       	add	r22, r22
    2224:	6b 0d       	add	r22, r11
    2226:	88 ea       	ldi	r24, 0xA8	; 168
    2228:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>
    222c:	8f e3       	ldi	r24, 0x3F	; 63
    222e:	9c e9       	ldi	r25, 0x9C	; 156
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	f1 f7       	brne	.-4      	; 0x2230 <UART_Admin_Interfacing+0x614>
    2234:	00 c0       	rjmp	.+0      	; 0x2236 <UART_Admin_Interfacing+0x61a>
    2236:	00 00       	nop
					UART_Transmit('\r');
					
					EEPROM_readByte(Counters_Block,Users_UART_number_BIT,&user_counter);
					_delay_ms(10);
					
					for(char i = 0; i < LOGIN_SIZE; i++)
    2238:	b3 94       	inc	r11
    223a:	94 e0       	ldi	r25, 0x04	; 4
    223c:	b9 12       	cpse	r11, r25
    223e:	dc cf       	rjmp	.-72     	; 0x21f8 <UART_Admin_Interfacing+0x5dc>
						EEPROM_writeByte(UART_User_Username_Block, (4*user_counter)+i, username_arr[i]);
						_delay_ms(10);
						EEPROM_writeByte(UART_User_Password_Block, (4*user_counter)+i, password_arr[i]);
						_delay_ms(10);
					}
					user_counter++;
    2240:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2242:	4f 5f       	subi	r20, 0xFF	; 255
    2244:	4a 8f       	std	Y+26, r20	; 0x1a
					EEPROM_writeByte(Counters_Block,Users_UART_number_BIT,user_counter);
    2246:	62 e0       	ldi	r22, 0x02	; 2
    2248:	8e ea       	ldi	r24, 0xAE	; 174
    224a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>
    224e:	ef e3       	ldi	r30, 0x3F	; 63
    2250:	fc e9       	ldi	r31, 0x9C	; 156
    2252:	31 97       	sbiw	r30, 0x01	; 1
    2254:	f1 f7       	brne	.-4      	; 0x2252 <UART_Admin_Interfacing+0x636>
    2256:	00 c0       	rjmp	.+0      	; 0x2258 <UART_Admin_Interfacing+0x63c>
    2258:	00 00       	nop
					_delay_ms(10);		
				
					UART_Send_String("The user is added successfully");
    225a:	82 e6       	ldi	r24, 0x62	; 98
    225c:	96 e0       	ldi	r25, 0x06	; 6
    225e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
					UART_Transmit('\r');
    2262:	8d e0       	ldi	r24, 0x0D	; 13
    2264:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Transmit('\r');
    2268:	8d e0       	ldi	r24, 0x0D	; 13
    226a:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					
					LCD_Set_Cursor(0,1);
    226e:	61 e0       	ldi	r22, 0x01	; 1
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	0e 94 c2 06 	call	0xd84	; 0xd84 <LCD_Set_Cursor>
					LCD_Write_String("User is added");
    2276:	81 e8       	ldi	r24, 0x81	; 129
    2278:	96 e0       	ldi	r25, 0x06	; 6
    227a:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
					LCD_Set_Cursor(1,2);
    227e:	62 e0       	ldi	r22, 0x02	; 2
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	0e 94 c2 06 	call	0xd84	; 0xd84 <LCD_Set_Cursor>
					LCD_Write_String("successfully");
    2286:	80 ed       	ldi	r24, 0xD0	; 208
    2288:	95 e0       	ldi	r25, 0x05	; 5
    228a:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
    228e:	ff ef       	ldi	r31, 0xFF	; 255
    2290:	21 ee       	ldi	r18, 0xE1	; 225
    2292:	84 e0       	ldi	r24, 0x04	; 4
    2294:	f1 50       	subi	r31, 0x01	; 1
    2296:	20 40       	sbci	r18, 0x00	; 0
    2298:	80 40       	sbci	r24, 0x00	; 0
    229a:	e1 f7       	brne	.-8      	; 0x2294 <UART_Admin_Interfacing+0x678>
    229c:	00 c0       	rjmp	.+0      	; 0x229e <UART_Admin_Interfacing+0x682>
    229e:	00 00       	nop
						
						UART_Transmit(uart_var);
						password_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
    22a0:	10 e0       	ldi	r17, 0x00	; 0
    22a2:	ee cc       	rjmp	.-1572   	; 0x1c80 <UART_Admin_Interfacing+0x64>
					
					_delay_ms(100);	
				}
				else
				{
					UART_Send_String("Sorry, the maximum number for users is 64 users");
    22a4:	8c ee       	ldi	r24, 0xEC	; 236
    22a6:	95 e0       	ldi	r25, 0x05	; 5
    22a8:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
					UART_Transmit('\r');
    22ac:	8d e0       	ldi	r24, 0x0D	; 13
    22ae:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Send_String("The system can't add more");
    22b2:	8c e1       	ldi	r24, 0x1C	; 28
    22b4:	96 e0       	ldi	r25, 0x06	; 6
    22b6:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
					UART_Transmit('\r');
    22ba:	8d e0       	ldi	r24, 0x0D	; 13
    22bc:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Transmit('\r');
    22c0:	8d e0       	ldi	r24, 0x0D	; 13
    22c2:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
    22c6:	9f ef       	ldi	r25, 0xFF	; 255
    22c8:	e9 e6       	ldi	r30, 0x69	; 105
    22ca:	f8 e1       	ldi	r31, 0x18	; 24
    22cc:	91 50       	subi	r25, 0x01	; 1
    22ce:	e0 40       	sbci	r30, 0x00	; 0
    22d0:	f0 40       	sbci	r31, 0x00	; 0
    22d2:	e1 f7       	brne	.-8      	; 0x22cc <UART_Admin_Interfacing+0x6b0>
    22d4:	00 c0       	rjmp	.+0      	; 0x22d6 <UART_Admin_Interfacing+0x6ba>
    22d6:	00 00       	nop
    22d8:	d3 cc       	rjmp	.-1626   	; 0x1c80 <UART_Admin_Interfacing+0x64>
					_delay_ms(500);	
				}
			}
			else  // lcd_user
			{
				EEPROM_readByte(Counters_Block,Users_LCD_number_BIT,&max_number_var);
    22da:	ae 01       	movw	r20, r28
    22dc:	45 5e       	subi	r20, 0xE5	; 229
    22de:	5f 4f       	sbci	r21, 0xFF	; 255
    22e0:	63 e0       	ldi	r22, 0x03	; 3
    22e2:	8e ea       	ldi	r24, 0xAE	; 174
    22e4:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
    22e8:	8f e3       	ldi	r24, 0x3F	; 63
    22ea:	9c e9       	ldi	r25, 0x9C	; 156
    22ec:	01 97       	sbiw	r24, 0x01	; 1
    22ee:	f1 f7       	brne	.-4      	; 0x22ec <UART_Admin_Interfacing+0x6d0>
    22f0:	00 c0       	rjmp	.+0      	; 0x22f2 <UART_Admin_Interfacing+0x6d6>
    22f2:	00 00       	nop
				_delay_ms(10);
				
				if(max_number_var < USERS_MAX_NO)
    22f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22f6:	80 34       	cpi	r24, 0x40	; 64
    22f8:	08 f0       	brcs	.+2      	; 0x22fc <UART_Admin_Interfacing+0x6e0>
    22fa:	93 c0       	rjmp	.+294    	; 0x2422 <UART_Admin_Interfacing+0x806>
				{
					/*-----------------	Writing the username -----------------*/
					UART_Transmit('\r');
    22fc:	8d e0       	ldi	r24, 0x0D	; 13
    22fe:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Transmit('\r');
    2302:	8d e0       	ldi	r24, 0x0D	; 13
    2304:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Send_String("Enter Username : ");
    2308:	87 ea       	ldi	r24, 0xA7	; 167
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>

					while(looping_counter < LOGIN_SIZE)
    2310:	14 30       	cpi	r17, 0x04	; 4
    2312:	88 f4       	brcc	.+34     	; 0x2336 <UART_Admin_Interfacing+0x71a>
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
						{
							uart_var = UART_Receive();
    2314:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
    2318:	08 2f       	mov	r16, r24
					UART_Send_String("Enter Username : ");

					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    231a:	80 ed       	ldi	r24, 0xD0	; 208
    231c:	80 0f       	add	r24, r16
    231e:	8a 30       	cpi	r24, 0x0A	; 10
    2320:	c8 f7       	brcc	.-14     	; 0x2314 <UART_Admin_Interfacing+0x6f8>
						{
							uart_var = UART_Receive();
						}
						
						UART_Transmit(uart_var);
    2322:	80 2f       	mov	r24, r16
    2324:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
						username_arr[looping_counter] = uart_var;
    2328:	f7 01       	movw	r30, r14
    232a:	e1 0f       	add	r30, r17
    232c:	f1 1d       	adc	r31, r1
    232e:	00 83       	st	Z, r16
						looping_counter++;
    2330:	1f 5f       	subi	r17, 0xFF	; 255
					/*-----------------	Writing the username -----------------*/
					UART_Transmit('\r');
					UART_Transmit('\r');
					UART_Send_String("Enter Username : ");

					while(looping_counter < LOGIN_SIZE)
    2332:	14 30       	cpi	r17, 0x04	; 4
    2334:	79 f7       	brne	.-34     	; 0x2314 <UART_Admin_Interfacing+0x6f8>
						UART_Transmit(uart_var);
						username_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
					UART_Transmit('\r');
    2336:	8d e0       	ldi	r24, 0x0D	; 13
    2338:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					
					/*-----------------	Writing the password -----------------*/
					UART_Send_String("Enter Password : ");
    233c:	89 eb       	ldi	r24, 0xB9	; 185
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
    2344:	3e 01       	movw	r6, r28
    2346:	95 e0       	ldi	r25, 0x05	; 5
    2348:	69 0e       	add	r6, r25
    234a:	71 1c       	adc	r7, r1
    234c:	63 01       	movw	r12, r6
					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
						{
							uart_var = UART_Receive();
    234e:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
    2352:	18 2f       	mov	r17, r24
					UART_Send_String("Enter Password : ");

					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    2354:	80 ed       	ldi	r24, 0xD0	; 208
    2356:	81 0f       	add	r24, r17
    2358:	8a 30       	cpi	r24, 0x0A	; 10
    235a:	c8 f7       	brcc	.-14     	; 0x234e <UART_Admin_Interfacing+0x732>
						{
							uart_var = UART_Receive();
						}
						
						UART_Transmit(uart_var);
    235c:	81 2f       	mov	r24, r17
    235e:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
						password_arr[looping_counter] = uart_var;
    2362:	f6 01       	movw	r30, r12
    2364:	11 93       	st	Z+, r17
    2366:	6f 01       	movw	r12, r30
					UART_Transmit('\r');
					
					/*-----------------	Writing the password -----------------*/
					UART_Send_String("Enter Password : ");

					while(looping_counter < LOGIN_SIZE)
    2368:	e4 15       	cp	r30, r4
    236a:	f5 05       	cpc	r31, r5
    236c:	81 f7       	brne	.-32     	; 0x234e <UART_Admin_Interfacing+0x732>
						UART_Transmit(uart_var);
						password_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
					UART_Transmit('\r');
    236e:	8d e0       	ldi	r24, 0x0D	; 13
    2370:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					
					EEPROM_readByte(Counters_Block,Users_LCD_number_BIT,&user_counter);
    2374:	ae 01       	movw	r20, r28
    2376:	46 5e       	subi	r20, 0xE6	; 230
    2378:	5f 4f       	sbci	r21, 0xFF	; 255
    237a:	63 e0       	ldi	r22, 0x03	; 3
    237c:	8e ea       	ldi	r24, 0xAE	; 174
    237e:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
    2382:	8f e3       	ldi	r24, 0x3F	; 63
    2384:	9c e9       	ldi	r25, 0x9C	; 156
    2386:	01 97       	sbiw	r24, 0x01	; 1
    2388:	f1 f7       	brne	.-4      	; 0x2386 <UART_Admin_Interfacing+0x76a>
    238a:	00 c0       	rjmp	.+0      	; 0x238c <UART_Admin_Interfacing+0x770>
    238c:	00 00       	nop
    238e:	fe 01       	movw	r30, r28
    2390:	31 96       	adiw	r30, 0x01	; 1
    2392:	6f 01       	movw	r12, r30
					_delay_ms(10);
					
					for(char i = 0; i < LOGIN_SIZE; i++)
    2394:	b1 2c       	mov	r11, r1
    2396:	1b 2d       	mov	r17, r11
					{
						EEPROM_writeByte(LCD_User_Username_Block, (4*user_counter)+i, username_arr[i]);
    2398:	f6 01       	movw	r30, r12
    239a:	41 91       	ld	r20, Z+
    239c:	6f 01       	movw	r12, r30
    239e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    23a0:	66 0f       	add	r22, r22
    23a2:	66 0f       	add	r22, r22
    23a4:	61 0f       	add	r22, r17
    23a6:	8a ea       	ldi	r24, 0xAA	; 170
    23a8:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>
    23ac:	8f e3       	ldi	r24, 0x3F	; 63
    23ae:	9c e9       	ldi	r25, 0x9C	; 156
    23b0:	01 97       	sbiw	r24, 0x01	; 1
    23b2:	f1 f7       	brne	.-4      	; 0x23b0 <UART_Admin_Interfacing+0x794>
    23b4:	00 c0       	rjmp	.+0      	; 0x23b6 <UART_Admin_Interfacing+0x79a>
    23b6:	00 00       	nop
						_delay_ms(10);
						EEPROM_writeByte(LCD_User_Password_Block, (4*user_counter)+i, password_arr[i]);
    23b8:	f3 01       	movw	r30, r6
    23ba:	41 91       	ld	r20, Z+
    23bc:	3f 01       	movw	r6, r30
    23be:	6a 8d       	ldd	r22, Y+26	; 0x1a
    23c0:	66 0f       	add	r22, r22
    23c2:	66 0f       	add	r22, r22
    23c4:	61 0f       	add	r22, r17
    23c6:	8c ea       	ldi	r24, 0xAC	; 172
    23c8:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>
    23cc:	8f e3       	ldi	r24, 0x3F	; 63
    23ce:	9c e9       	ldi	r25, 0x9C	; 156
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	f1 f7       	brne	.-4      	; 0x23d0 <UART_Admin_Interfacing+0x7b4>
    23d4:	00 c0       	rjmp	.+0      	; 0x23d6 <UART_Admin_Interfacing+0x7ba>
    23d6:	00 00       	nop
					UART_Transmit('\r');
					
					EEPROM_readByte(Counters_Block,Users_LCD_number_BIT,&user_counter);
					_delay_ms(10);
					
					for(char i = 0; i < LOGIN_SIZE; i++)
    23d8:	1f 5f       	subi	r17, 0xFF	; 255
    23da:	14 30       	cpi	r17, 0x04	; 4
    23dc:	e9 f6       	brne	.-70     	; 0x2398 <UART_Admin_Interfacing+0x77c>
						EEPROM_writeByte(LCD_User_Username_Block, (4*user_counter)+i, username_arr[i]);
						_delay_ms(10);
						EEPROM_writeByte(LCD_User_Password_Block, (4*user_counter)+i, password_arr[i]);
						_delay_ms(10);
					}
					user_counter++;
    23de:	4a 8d       	ldd	r20, Y+26	; 0x1a
    23e0:	4f 5f       	subi	r20, 0xFF	; 255
    23e2:	4a 8f       	std	Y+26, r20	; 0x1a
					EEPROM_writeByte(Counters_Block,Users_LCD_number_BIT,user_counter);
    23e4:	63 e0       	ldi	r22, 0x03	; 3
    23e6:	8e ea       	ldi	r24, 0xAE	; 174
    23e8:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>
    23ec:	ef e3       	ldi	r30, 0x3F	; 63
    23ee:	fc e9       	ldi	r31, 0x9C	; 156
    23f0:	31 97       	sbiw	r30, 0x01	; 1
    23f2:	f1 f7       	brne	.-4      	; 0x23f0 <UART_Admin_Interfacing+0x7d4>
    23f4:	00 c0       	rjmp	.+0      	; 0x23f6 <UART_Admin_Interfacing+0x7da>
    23f6:	00 00       	nop
					_delay_ms(10);		
				
					UART_Send_String("The user is added successfully");
    23f8:	82 e6       	ldi	r24, 0x62	; 98
    23fa:	96 e0       	ldi	r25, 0x06	; 6
    23fc:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
					UART_Transmit('\r');
    2400:	8d e0       	ldi	r24, 0x0D	; 13
    2402:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Transmit('\r');
    2406:	8d e0       	ldi	r24, 0x0D	; 13
    2408:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
    240c:	ff ef       	ldi	r31, 0xFF	; 255
    240e:	29 e6       	ldi	r18, 0x69	; 105
    2410:	88 e1       	ldi	r24, 0x18	; 24
    2412:	f1 50       	subi	r31, 0x01	; 1
    2414:	20 40       	sbci	r18, 0x00	; 0
    2416:	80 40       	sbci	r24, 0x00	; 0
    2418:	e1 f7       	brne	.-8      	; 0x2412 <UART_Admin_Interfacing+0x7f6>
    241a:	00 c0       	rjmp	.+0      	; 0x241c <UART_Admin_Interfacing+0x800>
    241c:	00 00       	nop
						
						UART_Transmit(uart_var);
						password_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
    241e:	10 e0       	ldi	r17, 0x00	; 0
    2420:	2f cc       	rjmp	.-1954   	; 0x1c80 <UART_Admin_Interfacing+0x64>
					_delay_ms(500);
					
				}
				else
				{
					UART_Send_String("Sorry, the maximum number for users is 64 users");
    2422:	8c ee       	ldi	r24, 0xEC	; 236
    2424:	95 e0       	ldi	r25, 0x05	; 5
    2426:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
					UART_Transmit('\r');
    242a:	8d e0       	ldi	r24, 0x0D	; 13
    242c:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Send_String("The system can't add more");
    2430:	8c e1       	ldi	r24, 0x1C	; 28
    2432:	96 e0       	ldi	r25, 0x06	; 6
    2434:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
					UART_Transmit('\r');
    2438:	8d e0       	ldi	r24, 0x0D	; 13
    243a:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Transmit('\r');
    243e:	8d e0       	ldi	r24, 0x0D	; 13
    2440:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
    2444:	9f ef       	ldi	r25, 0xFF	; 255
    2446:	e9 e6       	ldi	r30, 0x69	; 105
    2448:	f8 e1       	ldi	r31, 0x18	; 24
    244a:	91 50       	subi	r25, 0x01	; 1
    244c:	e0 40       	sbci	r30, 0x00	; 0
    244e:	f0 40       	sbci	r31, 0x00	; 0
    2450:	e1 f7       	brne	.-8      	; 0x244a <UART_Admin_Interfacing+0x82e>
    2452:	00 c0       	rjmp	.+0      	; 0x2454 <UART_Admin_Interfacing+0x838>
    2454:	00 00       	nop
    2456:	14 cc       	rjmp	.-2008   	; 0x1c80 <UART_Admin_Interfacing+0x64>
					_delay_ms(500);	
				}
			}
		}
		
		else if(option == '7')	// Delete User from the system
    2458:	07 33       	cpi	r16, 0x37	; 55
    245a:	09 f0       	breq	.+2      	; 0x245e <UART_Admin_Interfacing+0x842>
    245c:	bc c2       	rjmp	.+1400   	; 0x29d6 <UART_Admin_Interfacing+0xdba>
		{
			
			UART_Transmit('\r');
    245e:	8d e0       	ldi	r24, 0x0D	; 13
    2460:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Send_String("1. Delete a remote (UART) User  ");
    2464:	8f e8       	ldi	r24, 0x8F	; 143
    2466:	96 e0       	ldi	r25, 0x06	; 6
    2468:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Transmit('\r');
    246c:	8d e0       	ldi	r24, 0x0D	; 13
    246e:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Send_String("2. Delete an LCD & Keypad User  ");
    2472:	80 eb       	ldi	r24, 0xB0	; 176
    2474:	96 e0       	ldi	r25, 0x06	; 6
    2476:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Transmit('\r');
    247a:	8d e0       	ldi	r24, 0x0D	; 13
    247c:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Transmit('\r');
    2480:	8d e0       	ldi	r24, 0x0D	; 13
    2482:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			
			UART_Send_String("Your choice : ");
    2486:	88 e3       	ldi	r24, 0x38	; 56
    2488:	93 e0       	ldi	r25, 0x03	; 3
    248a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
	
			uart_var = 0;
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
			{
				uart_var = UART_Receive();
    248e:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
			UART_Transmit('\r');
			
			UART_Send_String("Your choice : ");
	
			uart_var = 0;
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    2492:	90 ed       	ldi	r25, 0xD0	; 208
    2494:	98 0f       	add	r25, r24
    2496:	9a 30       	cpi	r25, 0x0A	; 10
    2498:	d0 f7       	brcc	.-12     	; 0x248e <UART_Admin_Interfacing+0x872>
    249a:	18 2f       	mov	r17, r24
			{
				uart_var = UART_Receive();
			}
			UART_Transmit(uart_var);
    249c:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			
			while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_2)))
    24a0:	8f ec       	ldi	r24, 0xCF	; 207
    24a2:	81 0f       	add	r24, r17
    24a4:	82 30       	cpi	r24, 0x02	; 2
    24a6:	e0 f0       	brcs	.+56     	; 0x24e0 <UART_Admin_Interfacing+0x8c4>
			{
				UART_Send_String ("Please Choose only 1 or 2");
    24a8:	8e e1       	ldi	r24, 0x1E	; 30
    24aa:	93 e0       	ldi	r25, 0x03	; 3
    24ac:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
				UART_Transmit('\r');
    24b0:	8d e0       	ldi	r24, 0x0D	; 13
    24b2:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				UART_Transmit('\r');
    24b6:	8d e0       	ldi	r24, 0x0D	; 13
    24b8:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				uart_var = 0;
				UART_Send_String("Your choice : ");
    24bc:	88 e3       	ldi	r24, 0x38	; 56
    24be:	93 e0       	ldi	r25, 0x03	; 3
    24c0:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
				{
					uart_var = UART_Receive();
    24c4:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
    24c8:	18 2f       	mov	r17, r24
				UART_Send_String ("Please Choose only 1 or 2");
				UART_Transmit('\r');
				UART_Transmit('\r');
				uart_var = 0;
				UART_Send_String("Your choice : ");
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    24ca:	80 ed       	ldi	r24, 0xD0	; 208
    24cc:	81 0f       	add	r24, r17
    24ce:	8a 30       	cpi	r24, 0x0A	; 10
    24d0:	c8 f7       	brcc	.-14     	; 0x24c4 <UART_Admin_Interfacing+0x8a8>
				{
					uart_var = UART_Receive();
				}
				UART_Transmit(uart_var);
    24d2:	81 2f       	mov	r24, r17
    24d4:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			{
				uart_var = UART_Receive();
			}
			UART_Transmit(uart_var);
			
			while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_2)))
    24d8:	8f ec       	ldi	r24, 0xCF	; 207
    24da:	81 0f       	add	r24, r17
    24dc:	82 30       	cpi	r24, 0x02	; 2
    24de:	20 f7       	brcc	.-56     	; 0x24a8 <UART_Admin_Interfacing+0x88c>
			}
			
			user_type = uart_var;
	
			/*-----------------	Writing the username -----------------*/
			UART_Transmit('\r');
    24e0:	8d e0       	ldi	r24, 0x0D	; 13
    24e2:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Transmit('\r');
    24e6:	8d e0       	ldi	r24, 0x0D	; 13
    24e8:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Send_String("Enter User's Username to be deleted : ");
    24ec:	81 ed       	ldi	r24, 0xD1	; 209
    24ee:	96 e0       	ldi	r25, 0x06	; 6
    24f0:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
    24f4:	ce 01       	movw	r24, r28
    24f6:	01 96       	adiw	r24, 0x01	; 1
    24f8:	6c 01       	movw	r12, r24
			while(looping_counter < LOGIN_SIZE)
			{
				uart_var = 0;
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
				{
					uart_var = UART_Receive();
    24fa:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
    24fe:	08 2f       	mov	r16, r24
			
			looping_counter = 0;
			while(looping_counter < LOGIN_SIZE)
			{
				uart_var = 0;
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    2500:	80 ed       	ldi	r24, 0xD0	; 208
    2502:	80 0f       	add	r24, r16
    2504:	8a 30       	cpi	r24, 0x0A	; 10
    2506:	c8 f7       	brcc	.-14     	; 0x24fa <UART_Admin_Interfacing+0x8de>
				{
					uart_var = UART_Receive();
				}
				
				UART_Transmit(uart_var);
    2508:	80 2f       	mov	r24, r16
    250a:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				username_arr[looping_counter] = uart_var;
    250e:	f6 01       	movw	r30, r12
    2510:	01 93       	st	Z+, r16
    2512:	6f 01       	movw	r12, r30
			UART_Transmit('\r');
			UART_Transmit('\r');
			UART_Send_String("Enter User's Username to be deleted : ");
			
			looping_counter = 0;
			while(looping_counter < LOGIN_SIZE)
    2514:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2516:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2518:	e8 17       	cp	r30, r24
    251a:	f9 07       	cpc	r31, r25
    251c:	71 f7       	brne	.-36     	; 0x24fa <UART_Admin_Interfacing+0x8de>
				UART_Transmit(uart_var);
				username_arr[looping_counter] = uart_var;
				looping_counter++;
			}
			looping_counter = 0;
			UART_Transmit('\r');
    251e:	8d e0       	ldi	r24, 0x0D	; 13
    2520:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			
			/*-----------------	Writing the password -----------------*/
			UART_Send_String("Enter User's Password to be deleted : ");
    2524:	88 ef       	ldi	r24, 0xF8	; 248
    2526:	96 e0       	ldi	r25, 0x06	; 6
    2528:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
    252c:	6e 01       	movw	r12, r28
    252e:	95 e0       	ldi	r25, 0x05	; 5
    2530:	c9 0e       	add	r12, r25
    2532:	d1 1c       	adc	r13, r1
			while(looping_counter < LOGIN_SIZE)
			{
				uart_var = 0;
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
				{
					uart_var = UART_Receive();
    2534:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
    2538:	08 2f       	mov	r16, r24
			UART_Send_String("Enter User's Password to be deleted : ");

			while(looping_counter < LOGIN_SIZE)
			{
				uart_var = 0;
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    253a:	80 ed       	ldi	r24, 0xD0	; 208
    253c:	80 0f       	add	r24, r16
    253e:	8a 30       	cpi	r24, 0x0A	; 10
    2540:	c8 f7       	brcc	.-14     	; 0x2534 <UART_Admin_Interfacing+0x918>
				{
					uart_var = UART_Receive();
				}
				
				UART_Transmit(uart_var);
    2542:	80 2f       	mov	r24, r16
    2544:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				password_arr[looping_counter] = uart_var;
    2548:	f6 01       	movw	r30, r12
    254a:	01 93       	st	Z+, r16
    254c:	6f 01       	movw	r12, r30
			UART_Transmit('\r');
			
			/*-----------------	Writing the password -----------------*/
			UART_Send_String("Enter User's Password to be deleted : ");

			while(looping_counter < LOGIN_SIZE)
    254e:	e4 15       	cp	r30, r4
    2550:	f5 05       	cpc	r31, r5
    2552:	81 f7       	brne	.-32     	; 0x2534 <UART_Admin_Interfacing+0x918>
				UART_Transmit(uart_var);
				password_arr[looping_counter] = uart_var;
				looping_counter++;
			}
			looping_counter = 0;
			UART_Transmit('\r');
    2554:	8d e0       	ldi	r24, 0x0D	; 13
    2556:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			
			
			if(user_type == '1')	// Remoted User
    255a:	11 33       	cpi	r17, 0x31	; 49
    255c:	09 f0       	breq	.+2      	; 0x2560 <UART_Admin_Interfacing+0x944>
    255e:	1b c1       	rjmp	.+566    	; 0x2796 <UART_Admin_Interfacing+0xb7a>
			{
				EEPROM_readByte(Counters_Block,Users_UART_number_BIT,&user_counter);
    2560:	ae 01       	movw	r20, r28
    2562:	46 5e       	subi	r20, 0xE6	; 230
    2564:	5f 4f       	sbci	r21, 0xFF	; 255
    2566:	62 e0       	ldi	r22, 0x02	; 2
    2568:	8e ea       	ldi	r24, 0xAE	; 174
    256a:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
    256e:	8f e3       	ldi	r24, 0x3F	; 63
    2570:	9c e9       	ldi	r25, 0x9C	; 156
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	f1 f7       	brne	.-4      	; 0x2572 <UART_Admin_Interfacing+0x956>
    2576:	00 c0       	rjmp	.+0      	; 0x2578 <UART_Admin_Interfacing+0x95c>
    2578:	00 00       	nop
				_delay_ms(10);
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
    257a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    257c:	81 11       	cpse	r24, r1
    257e:	e9 c0       	rjmp	.+466    	; 0x2752 <UART_Admin_Interfacing+0xb36>
    2580:	10 e0       	ldi	r17, 0x00	; 0
    2582:	f5 c0       	rjmp	.+490    	; 0x276e <UART_Admin_Interfacing+0xb52>
				{
					for(char i = 0; i<LOGIN_SIZE; i++)
					{
						EEPROM_readByte(UART_User_Username_Block,(4*looping_counter)+i,&username_temp_arr[i]);
    2584:	a5 01       	movw	r20, r10
    2586:	60 2f       	mov	r22, r16
    2588:	86 ea       	ldi	r24, 0xA6	; 166
    258a:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
    258e:	ef e3       	ldi	r30, 0x3F	; 63
    2590:	fc e9       	ldi	r31, 0x9C	; 156
    2592:	31 97       	sbiw	r30, 0x01	; 1
    2594:	f1 f7       	brne	.-4      	; 0x2592 <UART_Admin_Interfacing+0x976>
    2596:	00 c0       	rjmp	.+0      	; 0x2598 <UART_Admin_Interfacing+0x97c>
    2598:	00 00       	nop
						_delay_ms(10);
						EEPROM_readByte(UART_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
    259a:	a6 01       	movw	r20, r12
    259c:	60 2f       	mov	r22, r16
    259e:	88 ea       	ldi	r24, 0xA8	; 168
    25a0:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
    25a4:	8f e3       	ldi	r24, 0x3F	; 63
    25a6:	9c e9       	ldi	r25, 0x9C	; 156
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	f1 f7       	brne	.-4      	; 0x25a8 <UART_Admin_Interfacing+0x98c>
    25ac:	00 c0       	rjmp	.+0      	; 0x25ae <UART_Admin_Interfacing+0x992>
    25ae:	00 00       	nop
    25b0:	0f 5f       	subi	r16, 0xFF	; 255
    25b2:	9f ef       	ldi	r25, 0xFF	; 255
    25b4:	a9 1a       	sub	r10, r25
    25b6:	b9 0a       	sbc	r11, r25
    25b8:	ef ef       	ldi	r30, 0xFF	; 255
    25ba:	ce 1a       	sub	r12, r30
    25bc:	de 0a       	sbc	r13, r30
				EEPROM_readByte(Counters_Block,Users_UART_number_BIT,&user_counter);
				_delay_ms(10);
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
				{
					for(char i = 0; i<LOGIN_SIZE; i++)
    25be:	10 13       	cpse	r17, r16
    25c0:	e1 cf       	rjmp	.-62     	; 0x2584 <UART_Admin_Interfacing+0x968>
						_delay_ms(10);
						EEPROM_readByte(UART_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
						_delay_ms(10);
					}
					
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
    25c2:	44 e0       	ldi	r20, 0x04	; 4
    25c4:	62 2d       	mov	r22, r2
    25c6:	7e 8d       	ldd	r23, Y+30	; 0x1e
    25c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25ca:	93 2d       	mov	r25, r3
    25cc:	0e 94 ac 04 	call	0x958	; 0x958 <Compare_Passwords>
    25d0:	81 33       	cpi	r24, 0x31	; 49
    25d2:	09 f0       	breq	.+2      	; 0x25d6 <UART_Admin_Interfacing+0x9ba>
    25d4:	b7 c0       	rjmp	.+366    	; 0x2744 <UART_Admin_Interfacing+0xb28>
    25d6:	44 e0       	ldi	r20, 0x04	; 4
    25d8:	be 01       	movw	r22, r28
    25da:	63 5f       	subi	r22, 0xF3	; 243
    25dc:	7f 4f       	sbci	r23, 0xFF	; 255
    25de:	8d a1       	ldd	r24, Y+37	; 0x25
    25e0:	9e a1       	ldd	r25, Y+38	; 0x26
    25e2:	0e 94 ac 04 	call	0x958	; 0x958 <Compare_Passwords>
    25e6:	81 33       	cpi	r24, 0x31	; 49
    25e8:	09 f0       	breq	.+2      	; 0x25ec <UART_Admin_Interfacing+0x9d0>
    25ea:	ac c0       	rjmp	.+344    	; 0x2744 <UART_Admin_Interfacing+0xb28>
    25ec:	18 2d       	mov	r17, r8
					{
						for(char counter = looping_counter; counter < user_counter-1; counter++)
    25ee:	88 2d       	mov	r24, r8
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	2a 8d       	ldd	r18, Y+26	; 0x1a
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	21 50       	subi	r18, 0x01	; 1
    25f8:	31 09       	sbc	r19, r1
    25fa:	82 17       	cp	r24, r18
    25fc:	93 07       	cpc	r25, r19
    25fe:	0c f0       	brlt	.+2      	; 0x2602 <UART_Admin_Interfacing+0x9e6>
    2600:	6a c0       	rjmp	.+212    	; 0x26d6 <UART_Admin_Interfacing+0xaba>
    2602:	88 0c       	add	r8, r8
    2604:	88 0c       	add	r8, r8
    2606:	91 2e       	mov	r9, r17
    2608:	5a a2       	std	Y+34, r5	; 0x22
    260a:	49 a2       	std	Y+33, r4	; 0x21
    260c:	fc a2       	std	Y+36, r15	; 0x24
    260e:	eb a2       	std	Y+35, r14	; 0x23
    2610:	f3 2c       	mov	r15, r3
    2612:	31 2e       	mov	r3, r17
    2614:	47 c0       	rjmp	.+142    	; 0x26a4 <UART_Admin_Interfacing+0xa88>
						{
							for(char i = 0; i<LOGIN_SIZE; i++)
							{
								EEPROM_readByte(UART_User_Username_Block,4*(counter+1)+i,&username_arr_2[i]);
    2616:	a6 01       	movw	r20, r12
    2618:	60 2f       	mov	r22, r16
    261a:	86 ea       	ldi	r24, 0xA6	; 166
    261c:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
    2620:	8f e3       	ldi	r24, 0x3F	; 63
    2622:	9c e9       	ldi	r25, 0x9C	; 156
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <UART_Admin_Interfacing+0xa08>
    2628:	00 c0       	rjmp	.+0      	; 0x262a <UART_Admin_Interfacing+0xa0e>
    262a:	00 00       	nop
								_delay_ms(10);
								EEPROM_readByte(UART_User_Password_Block,4*(counter+1)+i,&password_arr_2[i]);
    262c:	a5 01       	movw	r20, r10
    262e:	60 2f       	mov	r22, r16
    2630:	88 ea       	ldi	r24, 0xA8	; 168
    2632:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
    2636:	ef e3       	ldi	r30, 0x3F	; 63
    2638:	fc e9       	ldi	r31, 0x9C	; 156
    263a:	31 97       	sbiw	r30, 0x01	; 1
    263c:	f1 f7       	brne	.-4      	; 0x263a <UART_Admin_Interfacing+0xa1e>
    263e:	00 c0       	rjmp	.+0      	; 0x2640 <UART_Admin_Interfacing+0xa24>
    2640:	00 00       	nop
    2642:	15 2d       	mov	r17, r5
    2644:	10 0f       	add	r17, r16
								_delay_ms(10);
								
								EEPROM_writeByte(UART_User_Username_Block , 4*(counter)+i , username_arr_2[i]);
    2646:	f6 01       	movw	r30, r12
    2648:	40 81       	ld	r20, Z
    264a:	ff ef       	ldi	r31, 0xFF	; 255
    264c:	cf 1a       	sub	r12, r31
    264e:	df 0a       	sbc	r13, r31
    2650:	61 2f       	mov	r22, r17
    2652:	86 ea       	ldi	r24, 0xA6	; 166
    2654:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>
    2658:	8f e3       	ldi	r24, 0x3F	; 63
    265a:	9c e9       	ldi	r25, 0x9C	; 156
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	f1 f7       	brne	.-4      	; 0x265c <UART_Admin_Interfacing+0xa40>
    2660:	00 c0       	rjmp	.+0      	; 0x2662 <UART_Admin_Interfacing+0xa46>
    2662:	00 00       	nop
								_delay_ms(10);
								EEPROM_writeByte(UART_User_Password_Block , 4*(counter)+i , password_arr_2[i]);
    2664:	f5 01       	movw	r30, r10
    2666:	40 81       	ld	r20, Z
    2668:	9f ef       	ldi	r25, 0xFF	; 255
    266a:	a9 1a       	sub	r10, r25
    266c:	b9 0a       	sbc	r11, r25
    266e:	61 2f       	mov	r22, r17
    2670:	88 ea       	ldi	r24, 0xA8	; 168
    2672:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>
    2676:	ef e3       	ldi	r30, 0x3F	; 63
    2678:	fc e9       	ldi	r31, 0x9C	; 156
    267a:	31 97       	sbiw	r30, 0x01	; 1
    267c:	f1 f7       	brne	.-4      	; 0x267a <UART_Admin_Interfacing+0xa5e>
    267e:	00 c0       	rjmp	.+0      	; 0x2680 <UART_Admin_Interfacing+0xa64>
    2680:	00 00       	nop
    2682:	0f 5f       	subi	r16, 0xFF	; 255
					
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
					{
						for(char counter = looping_counter; counter < user_counter-1; counter++)
						{
							for(char i = 0; i<LOGIN_SIZE; i++)
    2684:	f8 a1       	ldd	r31, Y+32	; 0x20
    2686:	0f 13       	cpse	r16, r31
    2688:	c6 cf       	rjmp	.-116    	; 0x2616 <UART_Admin_Interfacing+0x9fa>
    268a:	f4 2c       	mov	r15, r4
						_delay_ms(10);
					}
					
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
					{
						for(char counter = looping_counter; counter < user_counter-1; counter++)
    268c:	93 94       	inc	r9
    268e:	89 2d       	mov	r24, r9
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	24 e0       	ldi	r18, 0x04	; 4
    2694:	82 0e       	add	r8, r18
    2696:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	21 50       	subi	r18, 0x01	; 1
    269c:	31 09       	sbc	r19, r1
    269e:	82 17       	cp	r24, r18
    26a0:	93 07       	cpc	r25, r19
    26a2:	9c f4       	brge	.+38     	; 0x26ca <UART_Admin_Interfacing+0xaae>
						{
							for(char i = 0; i<LOGIN_SIZE; i++)
							{
								EEPROM_readByte(UART_User_Username_Block,4*(counter+1)+i,&username_arr_2[i]);
    26a4:	01 96       	adiw	r24, 0x01	; 1
    26a6:	88 0f       	add	r24, r24
    26a8:	88 0f       	add	r24, r24
    26aa:	6e 01       	movw	r12, r28
    26ac:	91 e1       	ldi	r25, 0x11	; 17
    26ae:	c9 0e       	add	r12, r25
    26b0:	d1 1c       	adc	r13, r1
    26b2:	5e 01       	movw	r10, r28
    26b4:	e5 e1       	ldi	r30, 0x15	; 21
    26b6:	ae 0e       	add	r10, r30
    26b8:	b1 1c       	adc	r11, r1
    26ba:	f4 e0       	ldi	r31, 0x04	; 4
    26bc:	f8 0f       	add	r31, r24
    26be:	f8 a3       	std	Y+32, r31	; 0x20
    26c0:	08 2f       	mov	r16, r24
    26c2:	58 2c       	mov	r5, r8
    26c4:	58 1a       	sub	r5, r24
    26c6:	4f 2c       	mov	r4, r15
    26c8:	a6 cf       	rjmp	.-180    	; 0x2616 <UART_Admin_Interfacing+0x9fa>
    26ca:	13 2d       	mov	r17, r3
    26cc:	49 a0       	ldd	r4, Y+33	; 0x21
    26ce:	5a a0       	ldd	r5, Y+34	; 0x22
    26d0:	3f 2c       	mov	r3, r15
    26d2:	eb a0       	ldd	r14, Y+35	; 0x23
    26d4:	fc a0       	ldd	r15, Y+36	; 0x24
								_delay_ms(10);
							
							}
						}						
						
						UART_Send_String("The user is deleted successfully");
    26d6:	8f e1       	ldi	r24, 0x1F	; 31
    26d8:	97 e0       	ldi	r25, 0x07	; 7
    26da:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
						UART_Transmit('\r');
    26de:	8d e0       	ldi	r24, 0x0D	; 13
    26e0:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
						
						for(char i = 0; i < LOGIN_SIZE; i++)
    26e4:	00 e0       	ldi	r16, 0x00	; 0
						{
							EEPROM_writeByte(UART_User_Username_Block, 4*(user_counter-1)+i, 0xFF);
    26e6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    26e8:	66 0f       	add	r22, r22
    26ea:	66 0f       	add	r22, r22
    26ec:	64 50       	subi	r22, 0x04	; 4
    26ee:	60 0f       	add	r22, r16
    26f0:	4f ef       	ldi	r20, 0xFF	; 255
    26f2:	86 ea       	ldi	r24, 0xA6	; 166
    26f4:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>
    26f8:	8f e3       	ldi	r24, 0x3F	; 63
    26fa:	9c e9       	ldi	r25, 0x9C	; 156
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	f1 f7       	brne	.-4      	; 0x26fc <UART_Admin_Interfacing+0xae0>
    2700:	00 c0       	rjmp	.+0      	; 0x2702 <UART_Admin_Interfacing+0xae6>
    2702:	00 00       	nop
							_delay_ms(10);
							EEPROM_writeByte(UART_User_Password_Block, 4*(user_counter-1)+i, 0xFF);
    2704:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2706:	66 0f       	add	r22, r22
    2708:	66 0f       	add	r22, r22
    270a:	64 50       	subi	r22, 0x04	; 4
    270c:	60 0f       	add	r22, r16
    270e:	4f ef       	ldi	r20, 0xFF	; 255
    2710:	88 ea       	ldi	r24, 0xA8	; 168
    2712:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>
    2716:	ef e3       	ldi	r30, 0x3F	; 63
    2718:	fc e9       	ldi	r31, 0x9C	; 156
    271a:	31 97       	sbiw	r30, 0x01	; 1
    271c:	f1 f7       	brne	.-4      	; 0x271a <UART_Admin_Interfacing+0xafe>
    271e:	00 c0       	rjmp	.+0      	; 0x2720 <UART_Admin_Interfacing+0xb04>
    2720:	00 00       	nop
						}						
						
						UART_Send_String("The user is deleted successfully");
						UART_Transmit('\r');
						
						for(char i = 0; i < LOGIN_SIZE; i++)
    2722:	0f 5f       	subi	r16, 0xFF	; 255
    2724:	04 30       	cpi	r16, 0x04	; 4
    2726:	f9 f6       	brne	.-66     	; 0x26e6 <UART_Admin_Interfacing+0xaca>
							_delay_ms(10);
							EEPROM_writeByte(UART_User_Password_Block, 4*(user_counter-1)+i, 0xFF);
							_delay_ms(10);
						}
						
						user_counter--;
    2728:	4a 8d       	ldd	r20, Y+26	; 0x1a
    272a:	41 50       	subi	r20, 0x01	; 1
    272c:	4a 8f       	std	Y+26, r20	; 0x1a
						EEPROM_writeByte(Counters_Block,Users_UART_number_BIT,user_counter);
    272e:	62 e0       	ldi	r22, 0x02	; 2
    2730:	8e ea       	ldi	r24, 0xAE	; 174
    2732:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>
    2736:	8f e3       	ldi	r24, 0x3F	; 63
    2738:	9c e9       	ldi	r25, 0x9C	; 156
    273a:	01 97       	sbiw	r24, 0x01	; 1
    273c:	f1 f7       	brne	.-4      	; 0x273a <UART_Admin_Interfacing+0xb1e>
    273e:	00 c0       	rjmp	.+0      	; 0x2740 <UART_Admin_Interfacing+0xb24>
    2740:	00 00       	nop
    2742:	56 c1       	rjmp	.+684    	; 0x29f0 <UART_Admin_Interfacing+0xdd4>
			if(user_type == '1')	// Remoted User
			{
				EEPROM_readByte(Counters_Block,Users_UART_number_BIT,&user_counter);
				_delay_ms(10);
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
    2744:	83 94       	inc	r8
    2746:	01 2f       	mov	r16, r17
    2748:	8a 8d       	ldd	r24, Y+26	; 0x1a
    274a:	88 16       	cp	r8, r24
    274c:	28 f0       	brcs	.+10     	; 0x2758 <UART_Admin_Interfacing+0xb3c>
    274e:	18 2d       	mov	r17, r8
    2750:	0e c0       	rjmp	.+28     	; 0x276e <UART_Admin_Interfacing+0xb52>
    2752:	00 e0       	ldi	r16, 0x00	; 0
    2754:	10 e0       	ldi	r17, 0x00	; 0
    2756:	81 2e       	mov	r8, r17
    2758:	5e 01       	movw	r10, r28
    275a:	99 e0       	ldi	r25, 0x09	; 9
    275c:	a9 0e       	add	r10, r25
    275e:	b1 1c       	adc	r11, r1
    2760:	6e 01       	movw	r12, r28
    2762:	ed e0       	ldi	r30, 0x0D	; 13
    2764:	ce 0e       	add	r12, r30
    2766:	d1 1c       	adc	r13, r1
    2768:	14 e0       	ldi	r17, 0x04	; 4
    276a:	10 0f       	add	r17, r16
    276c:	0b cf       	rjmp	.-490    	; 0x2584 <UART_Admin_Interfacing+0x968>
						
						Compare_Var = 1;
						break;
					}
				}
				if(Compare_Var == 0)
    276e:	91 10       	cpse	r9, r1
    2770:	87 ca       	rjmp	.-2802   	; 0x1c80 <UART_Admin_Interfacing+0x64>
				{
					UART_Send_String("The entered Username & Password are not found");
    2772:	80 e4       	ldi	r24, 0x40	; 64
    2774:	97 e0       	ldi	r25, 0x07	; 7
    2776:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
					UART_Transmit('\r');
    277a:	8d e0       	ldi	r24, 0x0D	; 13
    277c:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Send_String("Please Try again");
    2780:	8e e6       	ldi	r24, 0x6E	; 110
    2782:	97 e0       	ldi	r25, 0x07	; 7
    2784:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
					UART_Transmit('\r');
    2788:	8d e0       	ldi	r24, 0x0D	; 13
    278a:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Transmit('\r');
    278e:	8d e0       	ldi	r24, 0x0D	; 13
    2790:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
    2794:	75 ca       	rjmp	.-2838   	; 0x1c80 <UART_Admin_Interfacing+0x64>
				}
				
			}
			else					// LCD & Keypad User
			{
				EEPROM_readByte(Counters_Block,Users_LCD_number_BIT,&user_counter);	// 3
    2796:	ae 01       	movw	r20, r28
    2798:	46 5e       	subi	r20, 0xE6	; 230
    279a:	5f 4f       	sbci	r21, 0xFF	; 255
    279c:	63 e0       	ldi	r22, 0x03	; 3
    279e:	8e ea       	ldi	r24, 0xAE	; 174
    27a0:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
    27a4:	8f e3       	ldi	r24, 0x3F	; 63
    27a6:	9c e9       	ldi	r25, 0x9C	; 156
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	f1 f7       	brne	.-4      	; 0x27a8 <UART_Admin_Interfacing+0xb8c>
    27ac:	00 c0       	rjmp	.+0      	; 0x27ae <UART_Admin_Interfacing+0xb92>
    27ae:	00 00       	nop
				_delay_ms(10);
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
    27b0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    27b2:	81 11       	cpse	r24, r1
    27b4:	e9 c0       	rjmp	.+466    	; 0x2988 <UART_Admin_Interfacing+0xd6c>
    27b6:	10 e0       	ldi	r17, 0x00	; 0
    27b8:	f7 c0       	rjmp	.+494    	; 0x29a8 <UART_Admin_Interfacing+0xd8c>
				{
					for(char i = 0; i<LOGIN_SIZE; i++)
					{
						EEPROM_readByte(LCD_User_Username_Block,(4*looping_counter)+i,&username_temp_arr[i]);
    27ba:	a5 01       	movw	r20, r10
    27bc:	60 2f       	mov	r22, r16
    27be:	8a ea       	ldi	r24, 0xAA	; 170
    27c0:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
    27c4:	ef e3       	ldi	r30, 0x3F	; 63
    27c6:	fc e9       	ldi	r31, 0x9C	; 156
    27c8:	31 97       	sbiw	r30, 0x01	; 1
    27ca:	f1 f7       	brne	.-4      	; 0x27c8 <UART_Admin_Interfacing+0xbac>
    27cc:	00 c0       	rjmp	.+0      	; 0x27ce <UART_Admin_Interfacing+0xbb2>
    27ce:	00 00       	nop
						_delay_ms(10);
						EEPROM_readByte(LCD_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
    27d0:	a6 01       	movw	r20, r12
    27d2:	60 2f       	mov	r22, r16
    27d4:	8c ea       	ldi	r24, 0xAC	; 172
    27d6:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
    27da:	8f e3       	ldi	r24, 0x3F	; 63
    27dc:	9c e9       	ldi	r25, 0x9C	; 156
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	f1 f7       	brne	.-4      	; 0x27de <UART_Admin_Interfacing+0xbc2>
    27e2:	00 c0       	rjmp	.+0      	; 0x27e4 <UART_Admin_Interfacing+0xbc8>
    27e4:	00 00       	nop
    27e6:	0f 5f       	subi	r16, 0xFF	; 255
    27e8:	9f ef       	ldi	r25, 0xFF	; 255
    27ea:	a9 1a       	sub	r10, r25
    27ec:	b9 0a       	sbc	r11, r25
    27ee:	ef ef       	ldi	r30, 0xFF	; 255
    27f0:	ce 1a       	sub	r12, r30
    27f2:	de 0a       	sbc	r13, r30
				EEPROM_readByte(Counters_Block,Users_LCD_number_BIT,&user_counter);	// 3
				_delay_ms(10);
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
				{
					for(char i = 0; i<LOGIN_SIZE; i++)
    27f4:	01 13       	cpse	r16, r17
    27f6:	e1 cf       	rjmp	.-62     	; 0x27ba <UART_Admin_Interfacing+0xb9e>
						EEPROM_readByte(LCD_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
						_delay_ms(10);
					}
					
					
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
    27f8:	44 e0       	ldi	r20, 0x04	; 4
    27fa:	62 2d       	mov	r22, r2
    27fc:	77 2d       	mov	r23, r7
    27fe:	86 2d       	mov	r24, r6
    2800:	93 2d       	mov	r25, r3
    2802:	0e 94 ac 04 	call	0x958	; 0x958 <Compare_Passwords>
    2806:	81 33       	cpi	r24, 0x31	; 49
    2808:	09 f0       	breq	.+2      	; 0x280c <UART_Admin_Interfacing+0xbf0>
    280a:	b7 c0       	rjmp	.+366    	; 0x297a <UART_Admin_Interfacing+0xd5e>
    280c:	44 e0       	ldi	r20, 0x04	; 4
    280e:	be 01       	movw	r22, r28
    2810:	63 5f       	subi	r22, 0xF3	; 243
    2812:	7f 4f       	sbci	r23, 0xFF	; 255
    2814:	8d a1       	ldd	r24, Y+37	; 0x25
    2816:	9e a1       	ldd	r25, Y+38	; 0x26
    2818:	0e 94 ac 04 	call	0x958	; 0x958 <Compare_Passwords>
    281c:	81 33       	cpi	r24, 0x31	; 49
    281e:	09 f0       	breq	.+2      	; 0x2822 <UART_Admin_Interfacing+0xc06>
    2820:	ac c0       	rjmp	.+344    	; 0x297a <UART_Admin_Interfacing+0xd5e>
    2822:	18 2d       	mov	r17, r8
					{
						
						for(unsigned char counter = looping_counter; counter < (user_counter-1); counter++)
    2824:	88 2d       	mov	r24, r8
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	2a 8d       	ldd	r18, Y+26	; 0x1a
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	21 50       	subi	r18, 0x01	; 1
    282e:	31 09       	sbc	r19, r1
    2830:	82 17       	cp	r24, r18
    2832:	93 07       	cpc	r25, r19
    2834:	0c f0       	brlt	.+2      	; 0x2838 <UART_Admin_Interfacing+0xc1c>
    2836:	6a c0       	rjmp	.+212    	; 0x290c <UART_Admin_Interfacing+0xcf0>
    2838:	88 0c       	add	r8, r8
    283a:	88 0c       	add	r8, r8
    283c:	91 2e       	mov	r9, r17
    283e:	5a a2       	std	Y+34, r5	; 0x22
    2840:	49 a2       	std	Y+33, r4	; 0x21
    2842:	fc a2       	std	Y+36, r15	; 0x24
    2844:	eb a2       	std	Y+35, r14	; 0x23
    2846:	f3 2c       	mov	r15, r3
    2848:	31 2e       	mov	r3, r17
    284a:	47 c0       	rjmp	.+142    	; 0x28da <UART_Admin_Interfacing+0xcbe>
						{			
							for(char i = 0; i<LOGIN_SIZE; i++)
							{
								EEPROM_readByte(LCD_User_Username_Block,4*(counter+1)+i,&username_arr_2[i]);
    284c:	a6 01       	movw	r20, r12
    284e:	60 2f       	mov	r22, r16
    2850:	8a ea       	ldi	r24, 0xAA	; 170
    2852:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
    2856:	8f e3       	ldi	r24, 0x3F	; 63
    2858:	9c e9       	ldi	r25, 0x9C	; 156
    285a:	01 97       	sbiw	r24, 0x01	; 1
    285c:	f1 f7       	brne	.-4      	; 0x285a <UART_Admin_Interfacing+0xc3e>
    285e:	00 c0       	rjmp	.+0      	; 0x2860 <UART_Admin_Interfacing+0xc44>
    2860:	00 00       	nop
								_delay_ms(10);
								EEPROM_readByte(LCD_User_Password_Block,4*(counter+1)+i,&password_arr_2[i]);
    2862:	a5 01       	movw	r20, r10
    2864:	60 2f       	mov	r22, r16
    2866:	8c ea       	ldi	r24, 0xAC	; 172
    2868:	0e 94 8b 04 	call	0x916	; 0x916 <EEPROM_readByte>
    286c:	ef e3       	ldi	r30, 0x3F	; 63
    286e:	fc e9       	ldi	r31, 0x9C	; 156
    2870:	31 97       	sbiw	r30, 0x01	; 1
    2872:	f1 f7       	brne	.-4      	; 0x2870 <UART_Admin_Interfacing+0xc54>
    2874:	00 c0       	rjmp	.+0      	; 0x2876 <UART_Admin_Interfacing+0xc5a>
    2876:	00 00       	nop
    2878:	15 2d       	mov	r17, r5
    287a:	10 0f       	add	r17, r16
								_delay_ms(10);
								
								EEPROM_writeByte(LCD_User_Username_Block , 4*(counter)+i , username_arr_2[i]);
    287c:	f6 01       	movw	r30, r12
    287e:	40 81       	ld	r20, Z
    2880:	ff ef       	ldi	r31, 0xFF	; 255
    2882:	cf 1a       	sub	r12, r31
    2884:	df 0a       	sbc	r13, r31
    2886:	61 2f       	mov	r22, r17
    2888:	8a ea       	ldi	r24, 0xAA	; 170
    288a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>
    288e:	8f e3       	ldi	r24, 0x3F	; 63
    2890:	9c e9       	ldi	r25, 0x9C	; 156
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	f1 f7       	brne	.-4      	; 0x2892 <UART_Admin_Interfacing+0xc76>
    2896:	00 c0       	rjmp	.+0      	; 0x2898 <UART_Admin_Interfacing+0xc7c>
    2898:	00 00       	nop
								_delay_ms(10);
								EEPROM_writeByte(LCD_User_Password_Block , 4*(counter)+i , password_arr_2[i]);
    289a:	f5 01       	movw	r30, r10
    289c:	40 81       	ld	r20, Z
    289e:	9f ef       	ldi	r25, 0xFF	; 255
    28a0:	a9 1a       	sub	r10, r25
    28a2:	b9 0a       	sbc	r11, r25
    28a4:	61 2f       	mov	r22, r17
    28a6:	8c ea       	ldi	r24, 0xAC	; 172
    28a8:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>
    28ac:	ef e3       	ldi	r30, 0x3F	; 63
    28ae:	fc e9       	ldi	r31, 0x9C	; 156
    28b0:	31 97       	sbiw	r30, 0x01	; 1
    28b2:	f1 f7       	brne	.-4      	; 0x28b0 <UART_Admin_Interfacing+0xc94>
    28b4:	00 c0       	rjmp	.+0      	; 0x28b6 <UART_Admin_Interfacing+0xc9a>
    28b6:	00 00       	nop
    28b8:	0f 5f       	subi	r16, 0xFF	; 255
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
					{
						
						for(unsigned char counter = looping_counter; counter < (user_counter-1); counter++)
						{			
							for(char i = 0; i<LOGIN_SIZE; i++)
    28ba:	f8 a1       	ldd	r31, Y+32	; 0x20
    28bc:	f0 13       	cpse	r31, r16
    28be:	c6 cf       	rjmp	.-116    	; 0x284c <UART_Admin_Interfacing+0xc30>
    28c0:	f4 2c       	mov	r15, r4
					
					
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
					{
						
						for(unsigned char counter = looping_counter; counter < (user_counter-1); counter++)
    28c2:	93 94       	inc	r9
    28c4:	89 2d       	mov	r24, r9
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	24 e0       	ldi	r18, 0x04	; 4
    28ca:	82 0e       	add	r8, r18
    28cc:	2a 8d       	ldd	r18, Y+26	; 0x1a
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	21 50       	subi	r18, 0x01	; 1
    28d2:	31 09       	sbc	r19, r1
    28d4:	82 17       	cp	r24, r18
    28d6:	93 07       	cpc	r25, r19
    28d8:	9c f4       	brge	.+38     	; 0x2900 <UART_Admin_Interfacing+0xce4>
						{			
							for(char i = 0; i<LOGIN_SIZE; i++)
							{
								EEPROM_readByte(LCD_User_Username_Block,4*(counter+1)+i,&username_arr_2[i]);
    28da:	01 96       	adiw	r24, 0x01	; 1
    28dc:	88 0f       	add	r24, r24
    28de:	88 0f       	add	r24, r24
    28e0:	6e 01       	movw	r12, r28
    28e2:	91 e1       	ldi	r25, 0x11	; 17
    28e4:	c9 0e       	add	r12, r25
    28e6:	d1 1c       	adc	r13, r1
    28e8:	5e 01       	movw	r10, r28
    28ea:	e5 e1       	ldi	r30, 0x15	; 21
    28ec:	ae 0e       	add	r10, r30
    28ee:	b1 1c       	adc	r11, r1
    28f0:	f4 e0       	ldi	r31, 0x04	; 4
    28f2:	f8 0f       	add	r31, r24
    28f4:	f8 a3       	std	Y+32, r31	; 0x20
    28f6:	08 2f       	mov	r16, r24
    28f8:	58 2c       	mov	r5, r8
    28fa:	58 1a       	sub	r5, r24
    28fc:	4f 2c       	mov	r4, r15
    28fe:	a6 cf       	rjmp	.-180    	; 0x284c <UART_Admin_Interfacing+0xc30>
    2900:	13 2d       	mov	r17, r3
    2902:	49 a0       	ldd	r4, Y+33	; 0x21
    2904:	5a a0       	ldd	r5, Y+34	; 0x22
    2906:	3f 2c       	mov	r3, r15
    2908:	eb a0       	ldd	r14, Y+35	; 0x23
    290a:	fc a0       	ldd	r15, Y+36	; 0x24
								_delay_ms(10);
								EEPROM_writeByte(LCD_User_Password_Block , 4*(counter)+i , password_arr_2[i]);
								_delay_ms(10);
							}
						}
						UART_Send_String("The user is deleted successfully");
    290c:	8f e1       	ldi	r24, 0x1F	; 31
    290e:	97 e0       	ldi	r25, 0x07	; 7
    2910:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
						UART_Transmit('\r');
    2914:	8d e0       	ldi	r24, 0x0D	; 13
    2916:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
						
						for(char i = 0; i < LOGIN_SIZE; i++)
    291a:	00 e0       	ldi	r16, 0x00	; 0
						{
							EEPROM_writeByte(LCD_User_Username_Block, 4*(user_counter-1)+i, 0xFF);
    291c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    291e:	66 0f       	add	r22, r22
    2920:	66 0f       	add	r22, r22
    2922:	64 50       	subi	r22, 0x04	; 4
    2924:	60 0f       	add	r22, r16
    2926:	4f ef       	ldi	r20, 0xFF	; 255
    2928:	8a ea       	ldi	r24, 0xAA	; 170
    292a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>
    292e:	8f e3       	ldi	r24, 0x3F	; 63
    2930:	9c e9       	ldi	r25, 0x9C	; 156
    2932:	01 97       	sbiw	r24, 0x01	; 1
    2934:	f1 f7       	brne	.-4      	; 0x2932 <UART_Admin_Interfacing+0xd16>
    2936:	00 c0       	rjmp	.+0      	; 0x2938 <UART_Admin_Interfacing+0xd1c>
    2938:	00 00       	nop
							_delay_ms(10);
							EEPROM_writeByte(LCD_User_Password_Block, 4*(user_counter-1)+i, 0xFF);
    293a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    293c:	66 0f       	add	r22, r22
    293e:	66 0f       	add	r22, r22
    2940:	64 50       	subi	r22, 0x04	; 4
    2942:	60 0f       	add	r22, r16
    2944:	4f ef       	ldi	r20, 0xFF	; 255
    2946:	8c ea       	ldi	r24, 0xAC	; 172
    2948:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>
    294c:	ef e3       	ldi	r30, 0x3F	; 63
    294e:	fc e9       	ldi	r31, 0x9C	; 156
    2950:	31 97       	sbiw	r30, 0x01	; 1
    2952:	f1 f7       	brne	.-4      	; 0x2950 <UART_Admin_Interfacing+0xd34>
    2954:	00 c0       	rjmp	.+0      	; 0x2956 <UART_Admin_Interfacing+0xd3a>
    2956:	00 00       	nop
							}
						}
						UART_Send_String("The user is deleted successfully");
						UART_Transmit('\r');
						
						for(char i = 0; i < LOGIN_SIZE; i++)
    2958:	0f 5f       	subi	r16, 0xFF	; 255
    295a:	04 30       	cpi	r16, 0x04	; 4
    295c:	f9 f6       	brne	.-66     	; 0x291c <UART_Admin_Interfacing+0xd00>
							_delay_ms(10);
							EEPROM_writeByte(LCD_User_Password_Block, 4*(user_counter-1)+i, 0xFF);
							_delay_ms(10);
						}
						
						user_counter--;
    295e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2960:	41 50       	subi	r20, 0x01	; 1
    2962:	4a 8f       	std	Y+26, r20	; 0x1a
						EEPROM_writeByte(Counters_Block,Users_LCD_number_BIT,user_counter);
    2964:	63 e0       	ldi	r22, 0x03	; 3
    2966:	8e ea       	ldi	r24, 0xAE	; 174
    2968:	0e 94 6e 04 	call	0x8dc	; 0x8dc <EEPROM_writeByte>
    296c:	8f e3       	ldi	r24, 0x3F	; 63
    296e:	9c e9       	ldi	r25, 0x9C	; 156
    2970:	01 97       	sbiw	r24, 0x01	; 1
    2972:	f1 f7       	brne	.-4      	; 0x2970 <UART_Admin_Interfacing+0xd54>
    2974:	00 c0       	rjmp	.+0      	; 0x2976 <UART_Admin_Interfacing+0xd5a>
    2976:	00 00       	nop
    2978:	3b c0       	rjmp	.+118    	; 0x29f0 <UART_Admin_Interfacing+0xdd4>
			else					// LCD & Keypad User
			{
				EEPROM_readByte(Counters_Block,Users_LCD_number_BIT,&user_counter);	// 3
				_delay_ms(10);
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
    297a:	83 94       	inc	r8
    297c:	01 2f       	mov	r16, r17
    297e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2980:	88 16       	cp	r8, r24
    2982:	38 f0       	brcs	.+14     	; 0x2992 <UART_Admin_Interfacing+0xd76>
    2984:	18 2d       	mov	r17, r8
    2986:	10 c0       	rjmp	.+32     	; 0x29a8 <UART_Admin_Interfacing+0xd8c>
    2988:	00 e0       	ldi	r16, 0x00	; 0
    298a:	10 e0       	ldi	r17, 0x00	; 0
    298c:	81 2e       	mov	r8, r17
    298e:	7e 8c       	ldd	r7, Y+30	; 0x1e
    2990:	6f 8c       	ldd	r6, Y+31	; 0x1f
    2992:	5e 01       	movw	r10, r28
    2994:	99 e0       	ldi	r25, 0x09	; 9
    2996:	a9 0e       	add	r10, r25
    2998:	b1 1c       	adc	r11, r1
    299a:	6e 01       	movw	r12, r28
    299c:	ed e0       	ldi	r30, 0x0D	; 13
    299e:	ce 0e       	add	r12, r30
    29a0:	d1 1c       	adc	r13, r1
    29a2:	14 e0       	ldi	r17, 0x04	; 4
    29a4:	10 0f       	add	r17, r16
    29a6:	09 cf       	rjmp	.-494    	; 0x27ba <UART_Admin_Interfacing+0xb9e>
						
						Compare_Var = 1;
						break;
					}
				}
				if(Compare_Var == 0)
    29a8:	91 10       	cpse	r9, r1
    29aa:	6a c9       	rjmp	.-3372   	; 0x1c80 <UART_Admin_Interfacing+0x64>
				{
					UART_Transmit('\r');
    29ac:	8d e0       	ldi	r24, 0x0D	; 13
    29ae:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Send_String("The entered Username & Password are not found");
    29b2:	80 e4       	ldi	r24, 0x40	; 64
    29b4:	97 e0       	ldi	r25, 0x07	; 7
    29b6:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
					UART_Transmit('\r');
    29ba:	8d e0       	ldi	r24, 0x0D	; 13
    29bc:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Send_String("Please Try again");
    29c0:	8e e6       	ldi	r24, 0x6E	; 110
    29c2:	97 e0       	ldi	r25, 0x07	; 7
    29c4:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
					UART_Transmit('\r');
    29c8:	8d e0       	ldi	r24, 0x0D	; 13
    29ca:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Transmit('\r');
    29ce:	8d e0       	ldi	r24, 0x0D	; 13
    29d0:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
    29d4:	55 c9       	rjmp	.-3414   	; 0x1c80 <UART_Admin_Interfacing+0x64>
	unsigned char user_type = 0;
	char admin_counter = 0;
	char user_counter = 0;
	char max_number_var = 0;
	
	while (option != Ascii_8)	// Corresponding to Logout
    29d6:	08 33       	cpi	r16, 0x38	; 56
    29d8:	09 f0       	breq	.+2      	; 0x29dc <UART_Admin_Interfacing+0xdc0>
    29da:	52 c9       	rjmp	.-3420   	; 0x1c80 <UART_Admin_Interfacing+0x64>
			}
			
		}
		
	}
	UART_Transmit('\r');
    29dc:	8d e0       	ldi	r24, 0x0D	; 13
    29de:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
	UART_Transmit('\r');
    29e2:	8d e0       	ldi	r24, 0x0D	; 13
    29e4:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
	UART_Transmit('\r');
    29e8:	8d e0       	ldi	r24, 0x0D	; 13
    29ea:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
}
    29ee:	03 c0       	rjmp	.+6      	; 0x29f6 <UART_Admin_Interfacing+0xdda>
}



void UART_Admin_Interfacing()
{
    29f0:	99 24       	eor	r9, r9
    29f2:	93 94       	inc	r9
    29f4:	45 c9       	rjmp	.-3446   	; 0x1c80 <UART_Admin_Interfacing+0x64>
		
	}
	UART_Transmit('\r');
	UART_Transmit('\r');
	UART_Transmit('\r');
}
    29f6:	a6 96       	adiw	r28, 0x26	; 38
    29f8:	0f b6       	in	r0, 0x3f	; 63
    29fa:	f8 94       	cli
    29fc:	de bf       	out	0x3e, r29	; 62
    29fe:	0f be       	out	0x3f, r0	; 63
    2a00:	cd bf       	out	0x3d, r28	; 61
    2a02:	df 91       	pop	r29
    2a04:	cf 91       	pop	r28
    2a06:	1f 91       	pop	r17
    2a08:	0f 91       	pop	r16
    2a0a:	ff 90       	pop	r15
    2a0c:	ef 90       	pop	r14
    2a0e:	df 90       	pop	r13
    2a10:	cf 90       	pop	r12
    2a12:	bf 90       	pop	r11
    2a14:	af 90       	pop	r10
    2a16:	9f 90       	pop	r9
    2a18:	8f 90       	pop	r8
    2a1a:	7f 90       	pop	r7
    2a1c:	6f 90       	pop	r6
    2a1e:	5f 90       	pop	r5
    2a20:	4f 90       	pop	r4
    2a22:	3f 90       	pop	r3
    2a24:	2f 90       	pop	r2
    2a26:	08 95       	ret

00002a28 <UART_User_Interfacing>:


void UART_User_Interfacing()
{
    2a28:	cf 93       	push	r28
	unsigned char uart_var = 0;
	unsigned char option = 0;
	unsigned char brightness_level = 0;
	while(option != Ascii_4)
	{
		UART_Send_String ("1. Controlling Lighting (Room 1 to Room 5)");
    2a2a:	88 e0       	ldi	r24, 0x08	; 8
    2a2c:	94 e0       	ldi	r25, 0x04	; 4
    2a2e:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
		UART_Transmit('\r');
    2a32:	8d e0       	ldi	r24, 0x0D	; 13
    2a34:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		UART_Send_String ("2. Dimming lamp");
    2a38:	83 e3       	ldi	r24, 0x33	; 51
    2a3a:	94 e0       	ldi	r25, 0x04	; 4
    2a3c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
		UART_Transmit('\r');
    2a40:	8d e0       	ldi	r24, 0x0D	; 13
    2a42:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		UART_Send_String ("3. Close the Door");
    2a46:	8f e7       	ldi	r24, 0x7F	; 127
    2a48:	97 e0       	ldi	r25, 0x07	; 7
    2a4a:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
		UART_Transmit('\r');
    2a4e:	8d e0       	ldi	r24, 0x0D	; 13
    2a50:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		UART_Send_String ("4. Log out");
    2a54:	81 e9       	ldi	r24, 0x91	; 145
    2a56:	97 e0       	ldi	r25, 0x07	; 7
    2a58:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
		UART_Transmit('\r');
    2a5c:	8d e0       	ldi	r24, 0x0D	; 13
    2a5e:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		UART_Transmit('\r');
    2a62:	8d e0       	ldi	r24, 0x0D	; 13
    2a64:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		
		
		UART_Send_String ("Your Choice : ");
    2a68:	8d ec       	ldi	r24, 0xCD	; 205
    2a6a:	91 e0       	ldi	r25, 0x01	; 1
    2a6c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
		
		uart_var = 0;
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
		{
			uart_var = UART_Receive();
    2a70:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
    2a74:	c8 2f       	mov	r28, r24
			UART_Transmit(uart_var);
    2a76:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Transmit('\r');
    2a7a:	8d e0       	ldi	r24, 0x0D	; 13
    2a7c:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Transmit('\r');
    2a80:	8d e0       	ldi	r24, 0x0D	; 13
    2a82:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		
		
		UART_Send_String ("Your Choice : ");
		
		uart_var = 0;
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    2a86:	80 ed       	ldi	r24, 0xD0	; 208
    2a88:	8c 0f       	add	r24, r28
    2a8a:	8a 30       	cpi	r24, 0x0A	; 10
    2a8c:	88 f7       	brcc	.-30     	; 0x2a70 <UART_User_Interfacing+0x48>
    2a8e:	1d c0       	rjmp	.+58     	; 0x2aca <UART_User_Interfacing+0xa2>
			UART_Transmit('\r');
		}
	
		while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_4)))
		{
			UART_Send_String ("Please Choose only from 1 to 4");
    2a90:	8c e9       	ldi	r24, 0x9C	; 156
    2a92:	97 e0       	ldi	r25, 0x07	; 7
    2a94:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Transmit('\r');
    2a98:	8d e0       	ldi	r24, 0x0D	; 13
    2a9a:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Transmit('\r');
    2a9e:	8d e0       	ldi	r24, 0x0D	; 13
    2aa0:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			uart_var = 0;
			UART_Send_String("Your choice : ");
    2aa4:	88 e3       	ldi	r24, 0x38	; 56
    2aa6:	93 e0       	ldi	r25, 0x03	; 3
    2aa8:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
			{
				uart_var = UART_Receive();
    2aac:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
    2ab0:	c8 2f       	mov	r28, r24
				UART_Transmit(uart_var);
    2ab2:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				UART_Transmit('\r');
    2ab6:	8d e0       	ldi	r24, 0x0D	; 13
    2ab8:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				UART_Transmit('\r');
    2abc:	8d e0       	ldi	r24, 0x0D	; 13
    2abe:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Send_String ("Please Choose only from 1 to 4");
			UART_Transmit('\r');
			UART_Transmit('\r');
			uart_var = 0;
			UART_Send_String("Your choice : ");
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    2ac2:	80 ed       	ldi	r24, 0xD0	; 208
    2ac4:	8c 0f       	add	r24, r28
    2ac6:	8a 30       	cpi	r24, 0x0A	; 10
    2ac8:	88 f7       	brcc	.-30     	; 0x2aac <UART_User_Interfacing+0x84>
			UART_Transmit(uart_var);
			UART_Transmit('\r');
			UART_Transmit('\r');
		}
	
		while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_4)))
    2aca:	8f ec       	ldi	r24, 0xCF	; 207
    2acc:	8c 0f       	add	r24, r28
    2ace:	84 30       	cpi	r24, 0x04	; 4
    2ad0:	f8 f6       	brcc	.-66     	; 0x2a90 <UART_User_Interfacing+0x68>
			}
		}
		option = uart_var;
	
	
		if(option == '1')
    2ad2:	c1 33       	cpi	r28, 0x31	; 49
    2ad4:	19 f4       	brne	.+6      	; 0x2adc <UART_User_Interfacing+0xb4>
		{
			UART_Rooms_Leds_Control();
    2ad6:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <UART_Rooms_Leds_Control>
    2ada:	a7 cf       	rjmp	.-178    	; 0x2a2a <UART_User_Interfacing+0x2>
		}
		else if(option == '2')
    2adc:	c2 33       	cpi	r28, 0x32	; 50
    2ade:	09 f0       	breq	.+2      	; 0x2ae2 <UART_User_Interfacing+0xba>
    2ae0:	66 c0       	rjmp	.+204    	; 0x2bae <UART_User_Interfacing+0x186>
		{
			UART_Send_String ("Please Choose one of the following brightness percentages :  ");
    2ae2:	86 ee       	ldi	r24, 0xE6	; 230
    2ae4:	94 e0       	ldi	r25, 0x04	; 4
    2ae6:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Transmit('\r');
    2aea:	8d e0       	ldi	r24, 0x0D	; 13
    2aec:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Transmit('\r');
    2af0:	8d e0       	ldi	r24, 0x0D	; 13
    2af2:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		
			UART_Send_String ("0. 0% (Turn Off Led)");
    2af6:	84 e2       	ldi	r24, 0x24	; 36
    2af8:	95 e0       	ldi	r25, 0x05	; 5
    2afa:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Transmit('\r');
    2afe:	8d e0       	ldi	r24, 0x0D	; 13
    2b00:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Send_String ("1. 25% ");
    2b04:	89 e3       	ldi	r24, 0x39	; 57
    2b06:	95 e0       	ldi	r25, 0x05	; 5
    2b08:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Transmit('\r');
    2b0c:	8d e0       	ldi	r24, 0x0D	; 13
    2b0e:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Send_String ("2. 50% ");
    2b12:	81 e4       	ldi	r24, 0x41	; 65
    2b14:	95 e0       	ldi	r25, 0x05	; 5
    2b16:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Transmit('\r');
    2b1a:	8d e0       	ldi	r24, 0x0D	; 13
    2b1c:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Send_String ("3. 75% ");
    2b20:	89 e4       	ldi	r24, 0x49	; 73
    2b22:	95 e0       	ldi	r25, 0x05	; 5
    2b24:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Transmit('\r');
    2b28:	8d e0       	ldi	r24, 0x0D	; 13
    2b2a:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Send_String ("4. 100%  (Maximum Power)");
    2b2e:	81 e5       	ldi	r24, 0x51	; 81
    2b30:	95 e0       	ldi	r25, 0x05	; 5
    2b32:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Transmit('\r');
    2b36:	8d e0       	ldi	r24, 0x0D	; 13
    2b38:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
		
			UART_Send_String("Your choice : ");
    2b3c:	88 e3       	ldi	r24, 0x38	; 56
    2b3e:	93 e0       	ldi	r25, 0x03	; 3
    2b40:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			uart_var = 0;
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
			{
				uart_var = UART_Receive();
    2b44:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
    2b48:	c8 2f       	mov	r28, r24
				UART_Transmit(uart_var);
    2b4a:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				UART_Transmit('\r');
    2b4e:	8d e0       	ldi	r24, 0x0D	; 13
    2b50:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				UART_Transmit('\r');
    2b54:	8d e0       	ldi	r24, 0x0D	; 13
    2b56:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
			UART_Send_String ("4. 100%  (Maximum Power)");
			UART_Transmit('\r');
		
			UART_Send_String("Your choice : ");
			uart_var = 0;
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    2b5a:	80 ed       	ldi	r24, 0xD0	; 208
    2b5c:	8c 0f       	add	r24, r28
    2b5e:	8a 30       	cpi	r24, 0x0A	; 10
    2b60:	88 f7       	brcc	.-30     	; 0x2b44 <UART_User_Interfacing+0x11c>
    2b62:	1d c0       	rjmp	.+58     	; 0x2b9e <UART_User_Interfacing+0x176>
				UART_Transmit('\r');
			}
		
			while (!((uart_var >= Ascii_0) && (uart_var <= Ascii_4)))
			{
				UART_Send_String ("Please Choose only from 0 to 4");
    2b64:	8a e6       	ldi	r24, 0x6A	; 106
    2b66:	95 e0       	ldi	r25, 0x05	; 5
    2b68:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
				UART_Transmit('\r');
    2b6c:	8d e0       	ldi	r24, 0x0D	; 13
    2b6e:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				UART_Transmit('\r');
    2b72:	8d e0       	ldi	r24, 0x0D	; 13
    2b74:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				uart_var = 0;
				UART_Send_String("Your choice : ");
    2b78:	88 e3       	ldi	r24, 0x38	; 56
    2b7a:	93 e0       	ldi	r25, 0x03	; 3
    2b7c:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
				{
					uart_var = UART_Receive();
    2b80:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <UART_Receive>
    2b84:	c8 2f       	mov	r28, r24
					UART_Transmit(uart_var);
    2b86:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Transmit('\r');
    2b8a:	8d e0       	ldi	r24, 0x0D	; 13
    2b8c:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
					UART_Transmit('\r');
    2b90:	8d e0       	ldi	r24, 0x0D	; 13
    2b92:	0e 94 4e 0c 	call	0x189c	; 0x189c <UART_Transmit>
				UART_Send_String ("Please Choose only from 0 to 4");
				UART_Transmit('\r');
				UART_Transmit('\r');
				uart_var = 0;
				UART_Send_String("Your choice : ");
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    2b96:	80 ed       	ldi	r24, 0xD0	; 208
    2b98:	8c 0f       	add	r24, r28
    2b9a:	8a 30       	cpi	r24, 0x0A	; 10
    2b9c:	88 f7       	brcc	.-30     	; 0x2b80 <UART_User_Interfacing+0x158>
				UART_Transmit(uart_var);
				UART_Transmit('\r');
				UART_Transmit('\r');
			}
		
			while (!((uart_var >= Ascii_0) && (uart_var <= Ascii_4)))
    2b9e:	80 ed       	ldi	r24, 0xD0	; 208
    2ba0:	8c 0f       	add	r24, r28
    2ba2:	85 30       	cpi	r24, 0x05	; 5
    2ba4:	f8 f6       	brcc	.-66     	; 0x2b64 <UART_User_Interfacing+0x13c>
				}
			}
		
			brightness_level = uart_var;
			uart_var = 0;
			DIMMER_CONTROL(brightness_level);	
    2ba6:	8c 2f       	mov	r24, r28
    2ba8:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <DIMMER_CONTROL>
    2bac:	3e cf       	rjmp	.-388    	; 0x2a2a <UART_User_Interfacing+0x2>
		}
	
	
		else if(option == '3')
    2bae:	c3 33       	cpi	r28, 0x33	; 51
    2bb0:	09 f5       	brne	.+66     	; 0x2bf4 <UART_User_Interfacing+0x1cc>
		{
			closeDoor();
    2bb2:	0e 94 0f 0b 	call	0x161e	; 0x161e <closeDoor>
			UART_Send_String("The door is closed");
    2bb6:	8a ea       	ldi	r24, 0xAA	; 170
    2bb8:	95 e0       	ldi	r25, 0x05	; 5
    2bba:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
			UART_Send_String("\r");
    2bbe:	89 e8       	ldi	r24, 0x89	; 137
    2bc0:	95 e0       	ldi	r25, 0x05	; 5
    2bc2:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <UART_Send_String>
		
			LCD_Write_String("  The door is");
    2bc6:	85 ea       	ldi	r24, 0xA5	; 165
    2bc8:	92 e0       	ldi	r25, 0x02	; 2
    2bca:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    2bce:	80 ec       	ldi	r24, 0xC0	; 192
    2bd0:	0e 94 15 06 	call	0xc2a	; 0xc2a <LCD_Send_CMD>
			LCD_Write_String("    Closed");
    2bd4:	83 eb       	ldi	r24, 0xB3	; 179
    2bd6:	92 e0       	ldi	r25, 0x02	; 2
    2bd8:	0e 94 a3 06 	call	0xd46	; 0xd46 <LCD_Write_String>
    2bdc:	2f ef       	ldi	r18, 0xFF	; 255
    2bde:	83 ed       	ldi	r24, 0xD3	; 211
    2be0:	90 e3       	ldi	r25, 0x30	; 48
    2be2:	21 50       	subi	r18, 0x01	; 1
    2be4:	80 40       	sbci	r24, 0x00	; 0
    2be6:	90 40       	sbci	r25, 0x00	; 0
    2be8:	e1 f7       	brne	.-8      	; 0x2be2 <UART_User_Interfacing+0x1ba>
    2bea:	00 c0       	rjmp	.+0      	; 0x2bec <UART_User_Interfacing+0x1c4>
    2bec:	00 00       	nop
			_delay_ms(1000);
			LCD_Clear_Screen();
    2bee:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Clear_Screen>
    2bf2:	1b cf       	rjmp	.-458    	; 0x2a2a <UART_User_Interfacing+0x2>
void UART_User_Interfacing()
{
	unsigned char uart_var = 0;
	unsigned char option = 0;
	unsigned char brightness_level = 0;
	while(option != Ascii_4)
    2bf4:	c4 33       	cpi	r28, 0x34	; 52
    2bf6:	09 f0       	breq	.+2      	; 0x2bfa <UART_User_Interfacing+0x1d2>
    2bf8:	18 cf       	rjmp	.-464    	; 0x2a2a <UART_User_Interfacing+0x2>
	
		else
		{
		}
	}
}
    2bfa:	cf 91       	pop	r28
    2bfc:	08 95       	ret

00002bfe <_exit>:
    2bfe:	f8 94       	cli

00002c00 <__stop_program>:
    2c00:	ff cf       	rjmp	.-2      	; 0x2c00 <__stop_program>
