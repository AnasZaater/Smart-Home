
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002be6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000075c  00800060  00002be6  00002c5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000033b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000033e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000390  00000000  00000000  00003424  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007931  00000000  00000000  000037b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001583  00000000  00000000  0000b0e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000039d3  00000000  00000000  0000c668  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007e0  00000000  00000000  0001003c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a7e  00000000  00000000  0001081c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000049ae  00000000  00000000  0001129a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000328  00000000  00000000  00015c48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	17 e0       	ldi	r17, 0x07	; 7
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3b       	cpi	r26, 0xBC	; 188
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	27 e0       	ldi	r18, 0x07	; 7
      78:	ac eb       	ldi	r26, 0xBC	; 188
      7a:	b7 e0       	ldi	r27, 0x07	; 7
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3b       	cpi	r26, 0xBC	; 188
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <main>
      8a:	0c 94 f1 15 	jmp	0x2be2	; 0x2be2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <AC_Initialization>:
      92:	8b 9a       	sbi	0x11, 3	; 17
      94:	8c 9a       	sbi	0x11, 4	; 17
      96:	94 98       	cbi	0x12, 4	; 18
      98:	08 95       	ret

0000009a <AC_Alarm>:
      9a:	97 9a       	sbi	0x12, 7	; 18
      9c:	98 b3       	in	r25, 0x18	; 24
      9e:	84 e0       	ldi	r24, 0x04	; 4
      a0:	89 27       	eor	r24, r25
      a2:	88 bb       	out	0x18, r24	; 24
      a4:	08 95       	ret

000000a6 <AC_ON>:
      a6:	0e 94 74 00 	call	0xe8	; 0xe8 <ADC_READ>
      aa:	8b 32       	cpi	r24, 0x2B	; 43
      ac:	91 05       	cpc	r25, r1
      ae:	24 f4       	brge	.+8      	; 0xb8 <AC_ON+0x12>
      b0:	93 98       	cbi	0x12, 3	; 18
      b2:	97 98       	cbi	0x12, 7	; 18
      b4:	c2 98       	cbi	0x18, 2	; 24
      b6:	08 95       	ret
      b8:	9c 01       	movw	r18, r24
      ba:	29 53       	subi	r18, 0x39	; 57
      bc:	31 09       	sbc	r19, r1
      be:	29 31       	cpi	r18, 0x19	; 25
      c0:	31 05       	cpc	r19, r1
      c2:	20 f4       	brcc	.+8      	; 0xcc <AC_ON+0x26>
      c4:	93 9a       	sbi	0x12, 3	; 18
      c6:	97 98       	cbi	0x12, 7	; 18
      c8:	c2 98       	cbi	0x18, 2	; 24
      ca:	08 95       	ret
      cc:	83 35       	cpi	r24, 0x53	; 83
      ce:	91 05       	cpc	r25, r1
      d0:	1c f0       	brlt	.+6      	; 0xd8 <AC_ON+0x32>
      d2:	93 98       	cbi	0x12, 3	; 18
      d4:	0e 94 4d 00 	call	0x9a	; 0x9a <AC_Alarm>
      d8:	08 95       	ret

000000da <ADC_Start>:
      da:	37 9a       	sbi	0x06, 7	; 6
      dc:	3e 9a       	sbi	0x07, 6	; 7
      de:	97 b1       	in	r25, 0x07	; 7
      e0:	89 2b       	or	r24, r25
      e2:	87 b9       	out	0x07, r24	; 7
      e4:	32 9a       	sbi	0x06, 2	; 6
      e6:	08 95       	ret

000000e8 <ADC_READ>:
      e8:	36 9a       	sbi	0x06, 6	; 6
      ea:	34 9b       	sbis	0x06, 4	; 6
      ec:	fe cf       	rjmp	.-4      	; 0xea <ADC_READ+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ee:	85 e3       	ldi	r24, 0x35	; 53
      f0:	8a 95       	dec	r24
      f2:	f1 f7       	brne	.-4      	; 0xf0 <ADC_READ+0x8>
      f4:	00 00       	nop
      f6:	24 b1       	in	r18, 0x04	; 4
      f8:	85 b1       	in	r24, 0x05	; 5
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	98 2f       	mov	r25, r24
      fe:	88 27       	eor	r24, r24
     100:	82 0f       	add	r24, r18
     102:	91 1d       	adc	r25, r1
     104:	08 95       	ret

00000106 <__vector_1>:
#include "LCD_Apps.h"



ISR(INT0_vect) // LCD and Keypad interfacing
{
     106:	1f 92       	push	r1
     108:	0f 92       	push	r0
     10a:	0f b6       	in	r0, 0x3f	; 63
     10c:	0f 92       	push	r0
     10e:	11 24       	eor	r1, r1
     110:	5f 92       	push	r5
     112:	6f 92       	push	r6
     114:	7f 92       	push	r7
     116:	8f 92       	push	r8
     118:	9f 92       	push	r9
     11a:	af 92       	push	r10
     11c:	bf 92       	push	r11
     11e:	cf 92       	push	r12
     120:	df 92       	push	r13
     122:	ef 92       	push	r14
     124:	ff 92       	push	r15
     126:	0f 93       	push	r16
     128:	1f 93       	push	r17
     12a:	2f 93       	push	r18
     12c:	3f 93       	push	r19
     12e:	4f 93       	push	r20
     130:	5f 93       	push	r21
     132:	6f 93       	push	r22
     134:	7f 93       	push	r23
     136:	8f 93       	push	r24
     138:	9f 93       	push	r25
     13a:	af 93       	push	r26
     13c:	bf 93       	push	r27
     13e:	ef 93       	push	r30
     140:	ff 93       	push	r31
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	cd b7       	in	r28, 0x3d	; 61
     148:	de b7       	in	r29, 0x3e	; 62
     14a:	61 97       	sbiw	r28, 0x11	; 17
     14c:	de bf       	out	0x3e, r29	; 62
     14e:	cd bf       	out	0x3d, r28	; 61
	unsigned char Keypad_Value = 0; //Stores pressed button
	char user_counter = 0; //Counter stores number of users
     150:	19 82       	std	Y+1, r1	; 0x01
	char username_temp_arr[4];	// array taken from EEPROM to compare
	char password_temp_arr[4];	// array taken from EEPROM to compare
	unsigned char looping_counter = 0;
	unsigned char Compare_Var = 0; //variable indicates the success or failure of comparing profile entered with the one stored
	
	LCD_Welcome_Message(); //Displays a welcome message
     152:	0e 94 79 07 	call	0xef2	; 0xef2 <LCD_Welcome_Message>
	
	EEPROM_readByte(Counters_Block,Users_LCD_number_BIT,&user_counter); //Reads the number of user present NOW in the system
     156:	ae 01       	movw	r20, r28
     158:	4f 5f       	subi	r20, 0xFF	; 255
     15a:	5f 4f       	sbci	r21, 0xFF	; 255
     15c:	63 e0       	ldi	r22, 0x03	; 3
     15e:	8e ea       	ldi	r24, 0xAE	; 174
     160:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     164:	8f e3       	ldi	r24, 0x3F	; 63
     166:	9c e9       	ldi	r25, 0x9C	; 156
     168:	01 97       	sbiw	r24, 0x01	; 1
     16a:	f1 f7       	brne	.-4      	; 0x168 <__vector_1+0x62>
     16c:	00 c0       	rjmp	.+0      	; 0x16e <__vector_1+0x68>
     16e:	00 00       	nop
     170:	68 94       	set
     172:	99 24       	eor	r9, r9
     174:	91 f8       	bld	r9, 1
     176:	5e 01       	movw	r10, r28
     178:	96 e0       	ldi	r25, 0x06	; 6
     17a:	a9 0e       	add	r10, r25
     17c:	b1 1c       	adc	r11, r1
				EEPROM_readByte(LCD_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
				_delay_ms(10);
			}
			
			
			if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1')) //compares the username and password
     17e:	7a 2c       	mov	r7, r10
     180:	8b 2c       	mov	r8, r11
     182:	01 c0       	rjmp	.+2      	; 0x186 <__vector_1+0x80>
	
	EEPROM_readByte(Counters_Block,Users_LCD_number_BIT,&user_counter); //Reads the number of user present NOW in the system
	_delay_ms(10);
	
	trials = 3;
	while(trials>=1 && trials<=3) //Looping as long as the trials are greater than or equal 1 and smaller than or equal 3
     184:	98 2e       	mov	r9, r24
     186:	66 24       	eor	r6, r6
     188:	63 94       	inc	r6
     18a:	69 0c       	add	r6, r9
	{
			//-----------------	Writing the username -----------------
			LCD_Write_String("Username : ");
     18c:	8d ea       	ldi	r24, 0xAD	; 173
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
			LCD_Send_CMD(Display_ON_Cusror_ON_Blink_OFF);
     194:	8e e0       	ldi	r24, 0x0E	; 14
     196:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
     19a:	7e 01       	movw	r14, r28
     19c:	e2 e0       	ldi	r30, 0x02	; 2
     19e:	ee 0e       	add	r14, r30
     1a0:	f1 1c       	adc	r15, r1
			looping_counter = 0;
			while(looping_counter < 4) // To allow for writing of 4 digits
			{
				while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9)) //Storing the written values by user
				{
					Keypad_Value = Keypad_Get_Value();
     1a2:	0e 94 c4 05 	call	0xb88	; 0xb88 <Keypad_Get_Value>
     1a6:	18 2f       	mov	r17, r24
			LCD_Write_String("Username : ");
			LCD_Send_CMD(Display_ON_Cusror_ON_Blink_OFF);
			looping_counter = 0;
			while(looping_counter < 4) // To allow for writing of 4 digits
			{
				while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9)) //Storing the written values by user
     1a8:	80 ed       	ldi	r24, 0xD0	; 208
     1aa:	81 0f       	add	r24, r17
     1ac:	8a 30       	cpi	r24, 0x0A	; 10
     1ae:	c8 f7       	brcc	.-14     	; 0x1a2 <__vector_1+0x9c>
				{
					Keypad_Value = Keypad_Get_Value();
				}
				
				username_arr[looping_counter] = Keypad_Value;
     1b0:	f7 01       	movw	r30, r14
     1b2:	11 93       	st	Z+, r17
     1b4:	7f 01       	movw	r14, r30
				if(looping_counter == 3)
     1b6:	ea 15       	cp	r30, r10
     1b8:	fb 05       	cpc	r31, r11
     1ba:	39 f5       	brne	.+78     	; 0x20a <__vector_1+0x104>
				{
					LCD_Send_CMD(Display_ON_Cusror_OFF_Blink_OFF);
     1bc:	8c e0       	ldi	r24, 0x0C	; 12
     1be:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
				}
				LCD_Write_Char(Keypad_Value);
     1c2:	81 2f       	mov	r24, r17
     1c4:	0e 94 76 06 	call	0xcec	; 0xcec <LCD_Write_Char>
     1c8:	ff ef       	ldi	r31, 0xFF	; 255
     1ca:	25 ea       	ldi	r18, 0xA5	; 165
     1cc:	8e e0       	ldi	r24, 0x0E	; 14
     1ce:	f1 50       	subi	r31, 0x01	; 1
     1d0:	20 40       	sbci	r18, 0x00	; 0
     1d2:	80 40       	sbci	r24, 0x00	; 0
     1d4:	e1 f7       	brne	.-8      	; 0x1ce <__vector_1+0xc8>
     1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <__vector_1+0xd2>
     1d8:	00 00       	nop
     1da:	9f ef       	ldi	r25, 0xFF	; 255
     1dc:	e9 e6       	ldi	r30, 0x69	; 105
     1de:	f8 e1       	ldi	r31, 0x18	; 24
     1e0:	91 50       	subi	r25, 0x01	; 1
     1e2:	e0 40       	sbci	r30, 0x00	; 0
     1e4:	f0 40       	sbci	r31, 0x00	; 0
     1e6:	e1 f7       	brne	.-8      	; 0x1e0 <__vector_1+0xda>
     1e8:	00 c0       	rjmp	.+0      	; 0x1ea <__vector_1+0xe4>
     1ea:	00 00       	nop
				_delay_ms(300);
				looping_counter++;
				Keypad_Value = 0;
			}
			_delay_ms(500);
			LCD_Clear_Screen();
     1ec:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
			looping_counter = 0;
			
			//-----------------	Writing the password -----------------
			
			LCD_Write_String ("Password: ");
     1f0:	80 e7       	ldi	r24, 0x70	; 112
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
			LCD_Send_CMD(Display_ON_Cusror_ON_Blink_OFF);
     1f8:	8e e0       	ldi	r24, 0x0E	; 14
     1fa:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
     1fe:	7e 01       	movw	r14, r28
     200:	26 e0       	ldi	r18, 0x06	; 6
     202:	e2 0e       	add	r14, r18
     204:	f1 1c       	adc	r15, r1
				looping_counter++;
				Keypad_Value = 0;
			}
			_delay_ms(500);
			LCD_Clear_Screen();
			looping_counter = 0;
     206:	00 e0       	ldi	r16, 0x00	; 0
     208:	0d c0       	rjmp	.+26     	; 0x224 <__vector_1+0x11e>
				username_arr[looping_counter] = Keypad_Value;
				if(looping_counter == 3)
				{
					LCD_Send_CMD(Display_ON_Cusror_OFF_Blink_OFF);
				}
				LCD_Write_Char(Keypad_Value);
     20a:	81 2f       	mov	r24, r17
     20c:	0e 94 76 06 	call	0xcec	; 0xcec <LCD_Write_Char>
     210:	8f ef       	ldi	r24, 0xFF	; 255
     212:	95 ea       	ldi	r25, 0xA5	; 165
     214:	ee e0       	ldi	r30, 0x0E	; 14
     216:	81 50       	subi	r24, 0x01	; 1
     218:	90 40       	sbci	r25, 0x00	; 0
     21a:	e0 40       	sbci	r30, 0x00	; 0
     21c:	e1 f7       	brne	.-8      	; 0x216 <__vector_1+0x110>
     21e:	00 c0       	rjmp	.+0      	; 0x220 <__vector_1+0x11a>
     220:	00 00       	nop
     222:	bf cf       	rjmp	.-130    	; 0x1a2 <__vector_1+0x9c>
			
			while(looping_counter < 4)
			{
				while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
				{
					Keypad_Value = Keypad_Get_Value();
     224:	0e 94 c4 05 	call	0xb88	; 0xb88 <Keypad_Get_Value>
     228:	18 2f       	mov	r17, r24
			LCD_Write_String ("Password: ");
			LCD_Send_CMD(Display_ON_Cusror_ON_Blink_OFF);
			
			while(looping_counter < 4)
			{
				while(!(Keypad_Value >= Ascii_0	&& Keypad_Value <= Ascii_9))
     22a:	80 ed       	ldi	r24, 0xD0	; 208
     22c:	81 0f       	add	r24, r17
     22e:	8a 30       	cpi	r24, 0x0A	; 10
     230:	c8 f7       	brcc	.-14     	; 0x224 <__vector_1+0x11e>
				{
					Keypad_Value = Keypad_Get_Value();
				}
				
				password_arr[looping_counter] = Keypad_Value;
     232:	f7 01       	movw	r30, r14
     234:	11 93       	st	Z+, r17
     236:	7f 01       	movw	r14, r30
				if(looping_counter == 3)
     238:	03 30       	cpi	r16, 0x03	; 3
     23a:	01 f5       	brne	.+64     	; 0x27c <__vector_1+0x176>
				{
					LCD_Send_CMD(Display_ON_Cusror_OFF_Blink_OFF);
     23c:	8c e0       	ldi	r24, 0x0C	; 12
     23e:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
				}
				LCD_Write_Char(Keypad_Value);
     242:	81 2f       	mov	r24, r17
     244:	0e 94 76 06 	call	0xcec	; 0xcec <LCD_Write_Char>
     248:	ff ef       	ldi	r31, 0xFF	; 255
     24a:	27 e8       	ldi	r18, 0x87	; 135
     24c:	83 e1       	ldi	r24, 0x13	; 19
     24e:	f1 50       	subi	r31, 0x01	; 1
     250:	20 40       	sbci	r18, 0x00	; 0
     252:	80 40       	sbci	r24, 0x00	; 0
     254:	e1 f7       	brne	.-8      	; 0x24e <__vector_1+0x148>
     256:	00 c0       	rjmp	.+0      	; 0x258 <__vector_1+0x152>
     258:	00 00       	nop
				_delay_ms(400);
				LCD_Set_Cursor(0,strlen("Password: ") + looping_counter);
     25a:	6d e0       	ldi	r22, 0x0D	; 13
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_Set_Cursor>
				LCD_Write_Char('*');
     262:	8a e2       	ldi	r24, 0x2A	; 42
     264:	0e 94 76 06 	call	0xcec	; 0xcec <LCD_Write_Char>
     268:	9f ef       	ldi	r25, 0xFF	; 255
     26a:	e1 ee       	ldi	r30, 0xE1	; 225
     26c:	f4 e0       	ldi	r31, 0x04	; 4
     26e:	91 50       	subi	r25, 0x01	; 1
     270:	e0 40       	sbci	r30, 0x00	; 0
     272:	f0 40       	sbci	r31, 0x00	; 0
     274:	e1 f7       	brne	.-8      	; 0x26e <__vector_1+0x168>
     276:	00 c0       	rjmp	.+0      	; 0x278 <__vector_1+0x172>
     278:	00 00       	nop
     27a:	21 c0       	rjmp	.+66     	; 0x2be <__vector_1+0x1b8>
				password_arr[looping_counter] = Keypad_Value;
				if(looping_counter == 3)
				{
					LCD_Send_CMD(Display_ON_Cusror_OFF_Blink_OFF);
				}
				LCD_Write_Char(Keypad_Value);
     27c:	81 2f       	mov	r24, r17
     27e:	0e 94 76 06 	call	0xcec	; 0xcec <LCD_Write_Char>
     282:	2f ef       	ldi	r18, 0xFF	; 255
     284:	87 e8       	ldi	r24, 0x87	; 135
     286:	93 e1       	ldi	r25, 0x13	; 19
     288:	21 50       	subi	r18, 0x01	; 1
     28a:	80 40       	sbci	r24, 0x00	; 0
     28c:	90 40       	sbci	r25, 0x00	; 0
     28e:	e1 f7       	brne	.-8      	; 0x288 <__vector_1+0x182>
     290:	00 c0       	rjmp	.+0      	; 0x292 <__vector_1+0x18c>
     292:	00 00       	nop
				_delay_ms(400);
				LCD_Set_Cursor(0,strlen("Password: ") + looping_counter);
     294:	6a e0       	ldi	r22, 0x0A	; 10
     296:	60 0f       	add	r22, r16
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_Set_Cursor>
				LCD_Write_Char('*');
     29e:	8a e2       	ldi	r24, 0x2A	; 42
     2a0:	0e 94 76 06 	call	0xcec	; 0xcec <LCD_Write_Char>
     2a4:	ef ef       	ldi	r30, 0xFF	; 255
     2a6:	f1 ee       	ldi	r31, 0xE1	; 225
     2a8:	24 e0       	ldi	r18, 0x04	; 4
     2aa:	e1 50       	subi	r30, 0x01	; 1
     2ac:	f0 40       	sbci	r31, 0x00	; 0
     2ae:	20 40       	sbci	r18, 0x00	; 0
     2b0:	e1 f7       	brne	.-8      	; 0x2aa <__vector_1+0x1a4>
     2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <__vector_1+0x1ae>
     2b4:	00 00       	nop
				_delay_ms(100);
				looping_counter++;
     2b6:	0f 5f       	subi	r16, 0xFF	; 255
			//-----------------	Writing the password -----------------
			
			LCD_Write_String ("Password: ");
			LCD_Send_CMD(Display_ON_Cusror_ON_Blink_OFF);
			
			while(looping_counter < 4)
     2b8:	04 30       	cpi	r16, 0x04	; 4
     2ba:	09 f0       	breq	.+2      	; 0x2be <__vector_1+0x1b8>
     2bc:	b3 cf       	rjmp	.-154    	; 0x224 <__vector_1+0x11e>
     2be:	8f ef       	ldi	r24, 0xFF	; 255
     2c0:	99 e6       	ldi	r25, 0x69	; 105
     2c2:	e8 e1       	ldi	r30, 0x18	; 24
     2c4:	81 50       	subi	r24, 0x01	; 1
     2c6:	90 40       	sbci	r25, 0x00	; 0
     2c8:	e0 40       	sbci	r30, 0x00	; 0
     2ca:	e1 f7       	brne	.-8      	; 0x2c4 <__vector_1+0x1be>
     2cc:	00 c0       	rjmp	.+0      	; 0x2ce <__vector_1+0x1c8>
     2ce:	00 00       	nop
				_delay_ms(100);
				looping_counter++;
				Keypad_Value = 0;
			}
			_delay_ms(500);
			LCD_Clear_Screen();
     2d0:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
			looping_counter = 0;
		for (looping_counter = 0; looping_counter < user_counter; looping_counter++) //Reads the users using keypad and LCD to find the entered user
     2d4:	89 81       	ldd	r24, Y+1	; 0x01
     2d6:	81 11       	cpse	r24, r1
     2d8:	4b c0       	rjmp	.+150    	; 0x370 <__vector_1+0x26a>
     2da:	57 c0       	rjmp	.+174    	; 0x38a <__vector_1+0x284>
		{			
			for(int i = 0; i<LOGIN_SIZE; i++) //reads the users and stores in a temporarily array 
			{
				EEPROM_readByte(LCD_User_Username_Block,(4*looping_counter)+i,&username_temp_arr[i]);
     2dc:	a6 01       	movw	r20, r12
     2de:	61 2f       	mov	r22, r17
     2e0:	8a ea       	ldi	r24, 0xAA	; 170
     2e2:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
     2e6:	8f e3       	ldi	r24, 0x3F	; 63
     2e8:	9c e9       	ldi	r25, 0x9C	; 156
     2ea:	01 97       	sbiw	r24, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <__vector_1+0x1e4>
     2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <__vector_1+0x1ea>
     2f0:	00 00       	nop
				_delay_ms(10);
				EEPROM_readByte(LCD_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
     2f2:	a7 01       	movw	r20, r14
     2f4:	61 2f       	mov	r22, r17
     2f6:	8c ea       	ldi	r24, 0xAC	; 172
     2f8:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
     2fc:	ef e3       	ldi	r30, 0x3F	; 63
     2fe:	fc e9       	ldi	r31, 0x9C	; 156
     300:	31 97       	sbiw	r30, 0x01	; 1
     302:	f1 f7       	brne	.-4      	; 0x300 <__vector_1+0x1fa>
     304:	00 c0       	rjmp	.+0      	; 0x306 <__vector_1+0x200>
     306:	00 00       	nop
     308:	1f 5f       	subi	r17, 0xFF	; 255
     30a:	ff ef       	ldi	r31, 0xFF	; 255
     30c:	cf 1a       	sub	r12, r31
     30e:	df 0a       	sbc	r13, r31
     310:	2f ef       	ldi	r18, 0xFF	; 255
     312:	e2 1a       	sub	r14, r18
     314:	f2 0a       	sbc	r15, r18
			_delay_ms(500);
			LCD_Clear_Screen();
			looping_counter = 0;
		for (looping_counter = 0; looping_counter < user_counter; looping_counter++) //Reads the users using keypad and LCD to find the entered user
		{			
			for(int i = 0; i<LOGIN_SIZE; i++) //reads the users and stores in a temporarily array 
     316:	10 13       	cpse	r17, r16
     318:	e1 cf       	rjmp	.-62     	; 0x2dc <__vector_1+0x1d6>
				EEPROM_readByte(LCD_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
				_delay_ms(10);
			}
			
			
			if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1')) //compares the username and password
     31a:	44 e0       	ldi	r20, 0x04	; 4
     31c:	be 01       	movw	r22, r28
     31e:	66 5f       	subi	r22, 0xF6	; 246
     320:	7f 4f       	sbci	r23, 0xFF	; 255
     322:	ce 01       	movw	r24, r28
     324:	02 96       	adiw	r24, 0x02	; 2
     326:	0e 94 a8 04 	call	0x950	; 0x950 <Compare_Passwords>
     32a:	81 33       	cpi	r24, 0x31	; 49
     32c:	d9 f4       	brne	.+54     	; 0x364 <__vector_1+0x25e>
     32e:	44 e0       	ldi	r20, 0x04	; 4
     330:	be 01       	movw	r22, r28
     332:	62 5f       	subi	r22, 0xF2	; 242
     334:	7f 4f       	sbci	r23, 0xFF	; 255
     336:	87 2d       	mov	r24, r7
     338:	98 2d       	mov	r25, r8
     33a:	0e 94 a8 04 	call	0x950	; 0x950 <Compare_Passwords>
     33e:	81 33       	cpi	r24, 0x31	; 49
     340:	89 f4       	brne	.+34     	; 0x364 <__vector_1+0x25e>
			{
				LCD_Write_String("Access Granted");
     342:	8b e7       	ldi	r24, 0x7B	; 123
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     34a:	8f ef       	ldi	r24, 0xFF	; 255
     34c:	99 e6       	ldi	r25, 0x69	; 105
     34e:	e8 e1       	ldi	r30, 0x18	; 24
     350:	81 50       	subi	r24, 0x01	; 1
     352:	90 40       	sbci	r25, 0x00	; 0
     354:	e0 40       	sbci	r30, 0x00	; 0
     356:	e1 f7       	brne	.-8      	; 0x350 <__vector_1+0x24a>
     358:	00 c0       	rjmp	.+0      	; 0x35a <__vector_1+0x254>
     35a:	00 00       	nop
				_delay_ms(500);
				LCD_Clear_Screen();
     35c:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
     360:	96 2c       	mov	r9, r6
     362:	32 c0       	rjmp	.+100    	; 0x3c8 <__vector_1+0x2c2>
				Keypad_Value = 0;
			}
			_delay_ms(500);
			LCD_Clear_Screen();
			looping_counter = 0;
		for (looping_counter = 0; looping_counter < user_counter; looping_counter++) //Reads the users using keypad and LCD to find the entered user
     364:	53 94       	inc	r5
     366:	10 2f       	mov	r17, r16
     368:	89 81       	ldd	r24, Y+1	; 0x01
     36a:	58 16       	cp	r5, r24
     36c:	18 f0       	brcs	.+6      	; 0x374 <__vector_1+0x26e>
     36e:	0d c0       	rjmp	.+26     	; 0x38a <__vector_1+0x284>
     370:	10 e0       	ldi	r17, 0x00	; 0
     372:	51 2c       	mov	r5, r1
     374:	6e 01       	movw	r12, r28
     376:	fa e0       	ldi	r31, 0x0A	; 10
     378:	cf 0e       	add	r12, r31
     37a:	d1 1c       	adc	r13, r1
     37c:	7e 01       	movw	r14, r28
     37e:	2e e0       	ldi	r18, 0x0E	; 14
     380:	e2 0e       	add	r14, r18
     382:	f1 1c       	adc	r15, r1
     384:	04 e0       	ldi	r16, 0x04	; 4
     386:	01 0f       	add	r16, r17
     388:	a9 cf       	rjmp	.-174    	; 0x2dc <__vector_1+0x1d6>

		if(Compare_Var == 0) //Entered user is not found and the allowable trials decreases by 1
		{
			trials--;
			
			LCD_Write_String("Access Denied");
     38a:	8a e8       	ldi	r24, 0x8A	; 138
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
     392:	80 ec       	ldi	r24, 0xC0	; 192
     394:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
			
			LCD_Write_String("Trials Left : ");
     398:	88 e9       	ldi	r24, 0x98	; 152
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
			LCD_Write_Char(trials+0x30);
     3a0:	80 e3       	ldi	r24, 0x30	; 48
     3a2:	89 0d       	add	r24, r9
     3a4:	0e 94 76 06 	call	0xcec	; 0xcec <LCD_Write_Char>
     3a8:	8f ef       	ldi	r24, 0xFF	; 255
     3aa:	99 e6       	ldi	r25, 0x69	; 105
     3ac:	e8 e1       	ldi	r30, 0x18	; 24
     3ae:	81 50       	subi	r24, 0x01	; 1
     3b0:	90 40       	sbci	r25, 0x00	; 0
     3b2:	e0 40       	sbci	r30, 0x00	; 0
     3b4:	e1 f7       	brne	.-8      	; 0x3ae <__vector_1+0x2a8>
     3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <__vector_1+0x2b2>
     3b8:	00 00       	nop
			
			_delay_ms(500);
			LCD_Clear_Screen();
     3ba:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
	
	EEPROM_readByte(Counters_Block,Users_LCD_number_BIT,&user_counter); //Reads the number of user present NOW in the system
	_delay_ms(10);
	
	trials = 3;
	while(trials>=1 && trials<=3) //Looping as long as the trials are greater than or equal 1 and smaller than or equal 3
     3be:	8f ef       	ldi	r24, 0xFF	; 255
     3c0:	89 0d       	add	r24, r9
     3c2:	83 30       	cpi	r24, 0x03	; 3
     3c4:	08 f4       	brcc	.+2      	; 0x3c8 <__vector_1+0x2c2>
     3c6:	de ce       	rjmp	.-580    	; 0x184 <__vector_1+0x7e>
			break;
		}

	}
			
	if(trials == 0)
     3c8:	91 10       	cpse	r9, r1
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <__vector_1+0x2ca>
	{
		Alarm_On ();
     3cc:	0e 94 9e 0a 	call	0x153c	; 0x153c <Alarm_On>
	}		
	
	LCD_User_Interfacing();
     3d0:	0e 94 2a 09 	call	0x1254	; 0x1254 <LCD_User_Interfacing>
     3d4:	ff ef       	ldi	r31, 0xFF	; 255
     3d6:	20 e7       	ldi	r18, 0x70	; 112
     3d8:	82 e0       	ldi	r24, 0x02	; 2
     3da:	f1 50       	subi	r31, 0x01	; 1
     3dc:	20 40       	sbci	r18, 0x00	; 0
     3de:	80 40       	sbci	r24, 0x00	; 0
     3e0:	e1 f7       	brne	.-8      	; 0x3da <__vector_1+0x2d4>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <__vector_1+0x2de>
     3e4:	00 00       	nop
	_delay_ms(50);
}
     3e6:	61 96       	adiw	r28, 0x11	; 17
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	f8 94       	cli
     3ec:	de bf       	out	0x3e, r29	; 62
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	cd bf       	out	0x3d, r28	; 61
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	ff 91       	pop	r31
     3f8:	ef 91       	pop	r30
     3fa:	bf 91       	pop	r27
     3fc:	af 91       	pop	r26
     3fe:	9f 91       	pop	r25
     400:	8f 91       	pop	r24
     402:	7f 91       	pop	r23
     404:	6f 91       	pop	r22
     406:	5f 91       	pop	r21
     408:	4f 91       	pop	r20
     40a:	3f 91       	pop	r19
     40c:	2f 91       	pop	r18
     40e:	1f 91       	pop	r17
     410:	0f 91       	pop	r16
     412:	ff 90       	pop	r15
     414:	ef 90       	pop	r14
     416:	df 90       	pop	r13
     418:	cf 90       	pop	r12
     41a:	bf 90       	pop	r11
     41c:	af 90       	pop	r10
     41e:	9f 90       	pop	r9
     420:	8f 90       	pop	r8
     422:	7f 90       	pop	r7
     424:	6f 90       	pop	r6
     426:	5f 90       	pop	r5
     428:	0f 90       	pop	r0
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	0f 90       	pop	r0
     42e:	1f 90       	pop	r1
     430:	18 95       	reti

00000432 <App_Initialization>:



void App_Initialization() //This function contains intilizations for different peripherals
{
	LCD_Init();
     432:	0e 94 3a 06 	call	0xc74	; 0xc74 <LCD_Init>
	Keypad_Init();
     436:	0e 94 b3 05 	call	0xb66	; 0xb66 <Keypad_Init>
	UART_Init(freq_16MHz_baud_9600);
     43a:	87 e6       	ldi	r24, 0x67	; 103
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 2e 0c 	call	0x185c	; 0x185c <UART_Init>
	Servo_Initialization();
     442:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <Servo_Initialization>
	LED_START();
     446:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <LED_START>
	DIMMER_Init();
     44a:	0e 94 bd 0a 	call	0x157a	; 0x157a <DIMMER_Init>
	BUZZER_START();
     44e:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <BUZZER_START>
	ADC_Start(ADC_Channel);
     452:	83 e0       	ldi	r24, 0x03	; 3
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	0e 94 6d 00 	call	0xda	; 0xda <ADC_Start>
	Sensor_ON();
     45a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <Sensor_ON>
	AC_Initialization();
     45e:	0e 94 49 00 	call	0x92	; 0x92 <AC_Initialization>
	Interrupt_Start();
     462:	0e 94 a7 05 	call	0xb4e	; 0xb4e <Interrupt_Start>
	EEPROM_Initialization();
     466:	0e 94 67 04 	call	0x8ce	; 0x8ce <EEPROM_Initialization>
     46a:	08 95       	ret

0000046c <App>:
	
	
// -------------------------->	App Function < ----------------------------------//

void App()
{
     46c:	2f 92       	push	r2
     46e:	3f 92       	push	r3
     470:	4f 92       	push	r4
     472:	5f 92       	push	r5
     474:	6f 92       	push	r6
     476:	7f 92       	push	r7
     478:	8f 92       	push	r8
     47a:	9f 92       	push	r9
     47c:	af 92       	push	r10
     47e:	bf 92       	push	r11
     480:	cf 92       	push	r12
     482:	df 92       	push	r13
     484:	ef 92       	push	r14
     486:	ff 92       	push	r15
     488:	0f 93       	push	r16
     48a:	1f 93       	push	r17
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
     494:	63 97       	sbiw	r28, 0x13	; 19
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	f8 94       	cli
     49a:	de bf       	out	0x3e, r29	; 62
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	cd bf       	out	0x3d, r28	; 61
	unsigned char uart_var = 0;
	unsigned char Mode = 0;
	char admin_counter = 0;
     4a0:	19 82       	std	Y+1, r1	; 0x01
	char user_counter = 0;
     4a2:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char looping_counter = 0;
	unsigned char Compare_Var = 0;
	
	
	
	Mode = UART_Mode_Choice(); //Checks either admin or user
     4a4:	0e 94 76 0c 	call	0x18ec	; 0x18ec <UART_Mode_Choice>
	
	if(Mode == '1')		// Admin Selection
     4a8:	81 33       	cpi	r24, 0x31	; 49
     4aa:	09 f0       	breq	.+2      	; 0x4ae <App+0x42>
     4ac:	14 c1       	rjmp	.+552    	; 0x6d6 <App+0x26a>
	{
		EEPROM_readByte(Counters_Block,Admins_number_BIT,&admin_counter); //Reads the number of present admins NOW
     4ae:	ae 01       	movw	r20, r28
     4b0:	4f 5f       	subi	r20, 0xFF	; 255
     4b2:	5f 4f       	sbci	r21, 0xFF	; 255
     4b4:	61 e0       	ldi	r22, 0x01	; 1
     4b6:	8e ea       	ldi	r24, 0xAE	; 174
     4b8:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
     4bc:	8f e3       	ldi	r24, 0x3F	; 63
     4be:	9c e9       	ldi	r25, 0x9C	; 156
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	f1 f7       	brne	.-4      	; 0x4c0 <App+0x54>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <App+0x5a>
     4c6:	00 00       	nop
     4c8:	68 94       	set
     4ca:	77 24       	eor	r7, r7
     4cc:	71 f8       	bld	r7, 1
     4ce:	4e 01       	movw	r8, r28
     4d0:	97 e0       	ldi	r25, 0x07	; 7
     4d2:	89 0e       	add	r8, r25
     4d4:	91 1c       	adc	r9, r1
     4d6:	5e 01       	movw	r10, r28
     4d8:	eb e0       	ldi	r30, 0x0B	; 11
     4da:	ae 0e       	add	r10, r30
     4dc:	b1 1c       	adc	r11, r1
     4de:	01 c0       	rjmp	.+2      	; 0x4e2 <App+0x76>
		_delay_ms(10);
		trials = 3;
		while(trials>=1 && trials<=3)
     4e0:	78 2e       	mov	r7, r24
     4e2:	66 24       	eor	r6, r6
     4e4:	63 94       	inc	r6
     4e6:	67 0c       	add	r6, r7
		{
				//----------------	Writing the username -----------------//
				UART_Send_String("Enter Username : ");
     4e8:	87 ea       	ldi	r24, 0xA7	; 167
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
     4f0:	7e 01       	movw	r14, r28
     4f2:	f3 e0       	ldi	r31, 0x03	; 3
     4f4:	ef 0e       	add	r14, r31
     4f6:	f1 1c       	adc	r15, r1
				while(looping_counter < LOGIN_SIZE)
				{
					uart_var = 0;
					while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
					{
						uart_var = UART_Receive();
     4f8:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
     4fc:	18 2f       	mov	r17, r24
						UART_Transmit(uart_var);
     4fe:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				UART_Send_String("Enter Username : ");
				looping_counter = 0;
				while(looping_counter < LOGIN_SIZE)
				{
					uart_var = 0;
					while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
     502:	80 ed       	ldi	r24, 0xD0	; 208
     504:	81 0f       	add	r24, r17
     506:	8a 30       	cpi	r24, 0x0A	; 10
     508:	b8 f7       	brcc	.-18     	; 0x4f8 <App+0x8c>
					{
						uart_var = UART_Receive();
						UART_Transmit(uart_var);
					}
					username_arr[looping_counter] = uart_var;
     50a:	f7 01       	movw	r30, r14
     50c:	11 93       	st	Z+, r17
     50e:	7f 01       	movw	r14, r30
		while(trials>=1 && trials<=3)
		{
				//----------------	Writing the username -----------------//
				UART_Send_String("Enter Username : ");
				looping_counter = 0;
				while(looping_counter < LOGIN_SIZE)
     510:	8e 16       	cp	r8, r30
     512:	9f 06       	cpc	r9, r31
     514:	89 f7       	brne	.-30     	; 0x4f8 <App+0x8c>
					}
					username_arr[looping_counter] = uart_var;
					looping_counter++;
				}
				looping_counter = 0;
				UART_Transmit('\r');
     516:	8d e0       	ldi	r24, 0x0D	; 13
     518:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				
				//-----------------	Writing the password -----------------//
				UART_Send_String("Enter Password : ");
     51c:	89 eb       	ldi	r24, 0xB9	; 185
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
     524:	7e 01       	movw	r14, r28
     526:	f7 e0       	ldi	r31, 0x07	; 7
     528:	ef 0e       	add	r14, r31
     52a:	f1 1c       	adc	r15, r1
				while(looping_counter < LOGIN_SIZE)
				{
					uart_var = 0;
					while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
					{
						uart_var = UART_Receive();
     52c:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
     530:	18 2f       	mov	r17, r24
						UART_Transmit(uart_var);
     532:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				UART_Send_String("Enter Password : ");

				while(looping_counter < LOGIN_SIZE)
				{
					uart_var = 0;
					while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
     536:	80 ed       	ldi	r24, 0xD0	; 208
     538:	81 0f       	add	r24, r17
     53a:	8a 30       	cpi	r24, 0x0A	; 10
     53c:	b8 f7       	brcc	.-18     	; 0x52c <App+0xc0>
					{
						uart_var = UART_Receive();
						UART_Transmit(uart_var);
					}
					
					password_arr[looping_counter] = uart_var;
     53e:	f7 01       	movw	r30, r14
     540:	11 93       	st	Z+, r17
     542:	7f 01       	movw	r14, r30
				UART_Transmit('\r');
				
				//-----------------	Writing the password -----------------//
				UART_Send_String("Enter Password : ");

				while(looping_counter < LOGIN_SIZE)
     544:	ea 15       	cp	r30, r10
     546:	fb 05       	cpc	r31, r11
     548:	89 f7       	brne	.-30     	; 0x52c <App+0xc0>
					
					password_arr[looping_counter] = uart_var;
					looping_counter++;
				}
				looping_counter = 0;
				UART_Transmit('\r');	
     54a:	8d e0       	ldi	r24, 0x0D	; 13
     54c:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
     550:	ce 01       	movw	r24, r28
     552:	0f 96       	adiw	r24, 0x0f	; 15
     554:	7c 01       	movw	r14, r24
     556:	85 01       	movw	r16, r10
				
				for(char i = 0 ; i < LOGIN_SIZE ; i++)
     558:	d1 2c       	mov	r13, r1
				{
					EEPROM_readByte(Main_Admin_Block , Main_Admin_Username_Starting_bit+i , &username_temp_arr[i]);
     55a:	a8 01       	movw	r20, r16
     55c:	6d 2d       	mov	r22, r13
     55e:	80 ea       	ldi	r24, 0xA0	; 160
     560:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
     564:	ef e3       	ldi	r30, 0x3F	; 63
     566:	fc e9       	ldi	r31, 0x9C	; 156
     568:	31 97       	sbiw	r30, 0x01	; 1
     56a:	f1 f7       	brne	.-4      	; 0x568 <App+0xfc>
     56c:	00 c0       	rjmp	.+0      	; 0x56e <App+0x102>
     56e:	00 00       	nop
					_delay_ms(10);
					EEPROM_readByte(Main_Admin_Block , Main_Admin_Password_Starting_bit+i , &password_temp_arr[i]);
     570:	68 e0       	ldi	r22, 0x08	; 8
     572:	6d 0d       	add	r22, r13
     574:	a7 01       	movw	r20, r14
     576:	80 ea       	ldi	r24, 0xA0	; 160
     578:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
     57c:	8f e3       	ldi	r24, 0x3F	; 63
     57e:	9c e9       	ldi	r25, 0x9C	; 156
     580:	01 97       	sbiw	r24, 0x01	; 1
     582:	f1 f7       	brne	.-4      	; 0x580 <App+0x114>
     584:	00 c0       	rjmp	.+0      	; 0x586 <App+0x11a>
     586:	00 00       	nop
					looping_counter++;
				}
				looping_counter = 0;
				UART_Transmit('\r');	
				
				for(char i = 0 ; i < LOGIN_SIZE ; i++)
     588:	d3 94       	inc	r13
     58a:	0f 5f       	subi	r16, 0xFF	; 255
     58c:	1f 4f       	sbci	r17, 0xFF	; 255
     58e:	9f ef       	ldi	r25, 0xFF	; 255
     590:	e9 1a       	sub	r14, r25
     592:	f9 0a       	sbc	r15, r25
     594:	e4 e0       	ldi	r30, 0x04	; 4
     596:	de 12       	cpse	r13, r30
     598:	e0 cf       	rjmp	.-64     	; 0x55a <App+0xee>
					EEPROM_readByte(Main_Admin_Block , Main_Admin_Username_Starting_bit+i , &username_temp_arr[i]);
					_delay_ms(10);
					EEPROM_readByte(Main_Admin_Block , Main_Admin_Password_Starting_bit+i , &password_temp_arr[i]);
					_delay_ms(10);
				}			
			if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))	// The loggedin admin is the main admin
     59a:	44 e0       	ldi	r20, 0x04	; 4
     59c:	b5 01       	movw	r22, r10
     59e:	ce 01       	movw	r24, r28
     5a0:	03 96       	adiw	r24, 0x03	; 3
     5a2:	0e 94 a8 04 	call	0x950	; 0x950 <Compare_Passwords>
     5a6:	81 33       	cpi	r24, 0x31	; 49
     5a8:	21 f0       	breq	.+8      	; 0x5b2 <App+0x146>
				Compare_Var = 1;
			}
			else //This condition means that the entered value is not main admin 
				// Next step is to check if the entered values matches any stored admin or not
			{
				for (looping_counter = 0; looping_counter < admin_counter; looping_counter++)
     5aa:	89 81       	ldd	r24, Y+1	; 0x01
     5ac:	81 11       	cpse	r24, r1
     5ae:	66 c0       	rjmp	.+204    	; 0x67c <App+0x210>
     5b0:	6e c0       	rjmp	.+220    	; 0x68e <App+0x222>
					EEPROM_readByte(Main_Admin_Block , Main_Admin_Username_Starting_bit+i , &username_temp_arr[i]);
					_delay_ms(10);
					EEPROM_readByte(Main_Admin_Block , Main_Admin_Password_Starting_bit+i , &password_temp_arr[i]);
					_delay_ms(10);
				}			
			if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))	// The loggedin admin is the main admin
     5b2:	44 e0       	ldi	r20, 0x04	; 4
     5b4:	be 01       	movw	r22, r28
     5b6:	61 5f       	subi	r22, 0xF1	; 241
     5b8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ba:	c4 01       	movw	r24, r8
     5bc:	0e 94 a8 04 	call	0x950	; 0x950 <Compare_Passwords>
     5c0:	81 33       	cpi	r24, 0x31	; 49
     5c2:	99 f7       	brne	.-26     	; 0x5aa <App+0x13e>
			{
				UART_Transmit('\r');
     5c4:	8d e0       	ldi	r24, 0x0D	; 13
     5c6:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				UART_Transmit('\r');
     5ca:	8d e0       	ldi	r24, 0x0D	; 13
     5cc:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				UART_Send_String("WELCOME BOSS");	// this message is displayed only for the main admin
     5d0:	8b ec       	ldi	r24, 0xCB	; 203
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
				UART_Transmit('\r');
     5d8:	8d e0       	ldi	r24, 0x0D	; 13
     5da:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				UART_Transmit('\r');
     5de:	8d e0       	ldi	r24, 0x0D	; 13
     5e0:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				Compare_Var = 1;
     5e4:	59 c1       	rjmp	.+690    	; 0x898 <__stack+0x39>
			{
				for (looping_counter = 0; looping_counter < admin_counter; looping_counter++)
				{
					for(int i = 0; i<LOGIN_SIZE; i++)
					{
						EEPROM_readByte(Admin_Username_Block,(4*looping_counter)+i,&username_temp_arr[i]);
     5e6:	a7 01       	movw	r20, r14
     5e8:	61 2f       	mov	r22, r17
     5ea:	82 ea       	ldi	r24, 0xA2	; 162
     5ec:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
     5f0:	8f e3       	ldi	r24, 0x3F	; 63
     5f2:	9c e9       	ldi	r25, 0x9C	; 156
     5f4:	01 97       	sbiw	r24, 0x01	; 1
     5f6:	f1 f7       	brne	.-4      	; 0x5f4 <App+0x188>
     5f8:	00 c0       	rjmp	.+0      	; 0x5fa <App+0x18e>
     5fa:	00 00       	nop
						_delay_ms(10);
						EEPROM_readByte(Admin_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
     5fc:	a6 01       	movw	r20, r12
     5fe:	61 2f       	mov	r22, r17
     600:	84 ea       	ldi	r24, 0xA4	; 164
     602:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
     606:	ef e3       	ldi	r30, 0x3F	; 63
     608:	fc e9       	ldi	r31, 0x9C	; 156
     60a:	31 97       	sbiw	r30, 0x01	; 1
     60c:	f1 f7       	brne	.-4      	; 0x60a <App+0x19e>
     60e:	00 c0       	rjmp	.+0      	; 0x610 <App+0x1a4>
     610:	00 00       	nop
     612:	1f 5f       	subi	r17, 0xFF	; 255
     614:	ff ef       	ldi	r31, 0xFF	; 255
     616:	ef 1a       	sub	r14, r31
     618:	ff 0a       	sbc	r15, r31
     61a:	8f ef       	ldi	r24, 0xFF	; 255
     61c:	c8 1a       	sub	r12, r24
     61e:	d8 0a       	sbc	r13, r24
			else //This condition means that the entered value is not main admin 
				// Next step is to check if the entered values matches any stored admin or not
			{
				for (looping_counter = 0; looping_counter < admin_counter; looping_counter++)
				{
					for(int i = 0; i<LOGIN_SIZE; i++)
     620:	10 13       	cpse	r17, r16
     622:	e1 cf       	rjmp	.-62     	; 0x5e6 <App+0x17a>
						EEPROM_readByte(Admin_Username_Block,(4*looping_counter)+i,&username_temp_arr[i]);
						_delay_ms(10);
						EEPROM_readByte(Admin_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
						_delay_ms(10);
					}
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
     624:	44 e0       	ldi	r20, 0x04	; 4
     626:	b5 01       	movw	r22, r10
     628:	ce 01       	movw	r24, r28
     62a:	03 96       	adiw	r24, 0x03	; 3
     62c:	0e 94 a8 04 	call	0x950	; 0x950 <Compare_Passwords>
     630:	81 33       	cpi	r24, 0x31	; 49
     632:	f1 f4       	brne	.+60     	; 0x670 <App+0x204>
     634:	44 e0       	ldi	r20, 0x04	; 4
     636:	be 01       	movw	r22, r28
     638:	61 5f       	subi	r22, 0xF1	; 241
     63a:	7f 4f       	sbci	r23, 0xFF	; 255
     63c:	c4 01       	movw	r24, r8
     63e:	0e 94 a8 04 	call	0x950	; 0x950 <Compare_Passwords>
     642:	81 33       	cpi	r24, 0x31	; 49
     644:	a9 f4       	brne	.+42     	; 0x670 <App+0x204>
					{
						UART_Send_String("Access Granted");
     646:	8b e7       	ldi	r24, 0x7B	; 123
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
						UART_Transmit('\r');
     64e:	8d e0       	ldi	r24, 0x0D	; 13
     650:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
						UART_Transmit('\r');
     654:	8d e0       	ldi	r24, 0x0D	; 13
     656:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
						UART_Send_String("WELCOME Admin");	
     65a:	88 ed       	ldi	r24, 0xD8	; 216
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
						UART_Transmit('\r');
     662:	8d e0       	ldi	r24, 0x0D	; 13
     664:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
						UART_Transmit('\r');
     668:	8d e0       	ldi	r24, 0x0D	; 13
     66a:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
						Compare_Var = 1;
						break;
     66e:	14 c1       	rjmp	.+552    	; 0x898 <__stack+0x39>
				Compare_Var = 1;
			}
			else //This condition means that the entered value is not main admin 
				// Next step is to check if the entered values matches any stored admin or not
			{
				for (looping_counter = 0; looping_counter < admin_counter; looping_counter++)
     670:	53 94       	inc	r5
     672:	10 2f       	mov	r17, r16
     674:	89 81       	ldd	r24, Y+1	; 0x01
     676:	58 16       	cp	r5, r24
     678:	18 f0       	brcs	.+6      	; 0x680 <App+0x214>
     67a:	09 c0       	rjmp	.+18     	; 0x68e <App+0x222>
     67c:	10 e0       	ldi	r17, 0x00	; 0
     67e:	51 2c       	mov	r5, r1
     680:	04 e0       	ldi	r16, 0x04	; 4
     682:	01 0f       	add	r16, r17
					looping_counter++;
				}
				looping_counter = 0;
				UART_Transmit('\r');	
				
				for(char i = 0 ; i < LOGIN_SIZE ; i++)
     684:	fe 01       	movw	r30, r28
     686:	3f 96       	adiw	r30, 0x0f	; 15
     688:	6f 01       	movw	r12, r30
     68a:	75 01       	movw	r14, r10
     68c:	ac cf       	rjmp	.-168    	; 0x5e6 <App+0x17a>
			}	
			
			if(Compare_Var == 0)
			{
				trials--;
				UART_Send_String("Access Denied");
     68e:	8a e8       	ldi	r24, 0x8A	; 138
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
				UART_Transmit('\r');
     696:	8d e0       	ldi	r24, 0x0D	; 13
     698:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				UART_Send_String("Trials Left before initializing Alarm : ");
     69c:	86 ee       	ldi	r24, 0xE6	; 230
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
				UART_Transmit(trials+0x30);
     6a4:	80 e3       	ldi	r24, 0x30	; 48
     6a6:	87 0d       	add	r24, r7
     6a8:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				UART_Transmit('\r');
     6ac:	8d e0       	ldi	r24, 0x0D	; 13
     6ae:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				UART_Transmit('\r');
     6b2:	8d e0       	ldi	r24, 0x0D	; 13
     6b4:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				UART_Transmit('\r');
     6b8:	8d e0       	ldi	r24, 0x0D	; 13
     6ba:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
	if(Mode == '1')		// Admin Selection
	{
		EEPROM_readByte(Counters_Block,Admins_number_BIT,&admin_counter); //Reads the number of present admins NOW
		_delay_ms(10);
		trials = 3;
		while(trials>=1 && trials<=3)
     6be:	8f ef       	ldi	r24, 0xFF	; 255
     6c0:	87 0d       	add	r24, r7
     6c2:	83 30       	cpi	r24, 0x03	; 3
     6c4:	08 f4       	brcc	.+2      	; 0x6c8 <App+0x25c>
     6c6:	0c cf       	rjmp	.-488    	; 0x4e0 <App+0x74>
				break;
			}

		}

		if(trials == 0)
     6c8:	71 10       	cpse	r7, r1
     6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <App+0x264>
		{
			Alarm_On ();
     6cc:	0e 94 9e 0a 	call	0x153c	; 0x153c <Alarm_On>
		}

		UART_Admin_Interfacing();
     6d0:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <UART_Admin_Interfacing>
     6d4:	e3 c0       	rjmp	.+454    	; 0x89c <__stack+0x3d>
	
	}
	else //User
	{
		
			EEPROM_readByte(Counters_Block,Users_UART_number_BIT,&user_counter);
     6d6:	ae 01       	movw	r20, r28
     6d8:	4e 5f       	subi	r20, 0xFE	; 254
     6da:	5f 4f       	sbci	r21, 0xFF	; 255
     6dc:	62 e0       	ldi	r22, 0x02	; 2
     6de:	8e ea       	ldi	r24, 0xAE	; 174
     6e0:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
     6e4:	8f e3       	ldi	r24, 0x3F	; 63
     6e6:	9c e9       	ldi	r25, 0x9C	; 156
     6e8:	01 97       	sbiw	r24, 0x01	; 1
     6ea:	f1 f7       	brne	.-4      	; 0x6e8 <App+0x27c>
     6ec:	00 c0       	rjmp	.+0      	; 0x6ee <App+0x282>
     6ee:	00 00       	nop
     6f0:	68 94       	set
     6f2:	77 24       	eor	r7, r7
     6f4:	71 f8       	bld	r7, 1
     6f6:	5e 01       	movw	r10, r28
     6f8:	97 e0       	ldi	r25, 0x07	; 7
     6fa:	a9 0e       	add	r10, r25
     6fc:	b1 1c       	adc	r11, r1
     6fe:	4e 01       	movw	r8, r28
     700:	eb e0       	ldi	r30, 0x0B	; 11
     702:	8e 0e       	add	r8, r30
     704:	91 1c       	adc	r9, r1
						_delay_ms(10);
						EEPROM_readByte(UART_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
						_delay_ms(10);
					}
					
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
     706:	c8 2c       	mov	r12, r8
     708:	d9 2c       	mov	r13, r9
     70a:	6a 2c       	mov	r6, r10
     70c:	5b 2c       	mov	r5, r11
     70e:	01 c0       	rjmp	.+2      	; 0x712 <App+0x2a6>
		
			EEPROM_readByte(Counters_Block,Users_UART_number_BIT,&user_counter);
			_delay_ms(10);
			trials = 3;
			
			while(trials>=1 && trials<=3)
     710:	78 2e       	mov	r7, r24
     712:	f1 e0       	ldi	r31, 0x01	; 1
     714:	f7 0d       	add	r31, r7
     716:	fb 8b       	std	Y+19, r31	; 0x13
			{
					//----------------	Writing the username -----------------//
					UART_Send_String("Enter Username : ");
     718:	87 ea       	ldi	r24, 0xA7	; 167
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
     720:	7e 01       	movw	r14, r28
     722:	83 e0       	ldi	r24, 0x03	; 3
     724:	e8 0e       	add	r14, r24
     726:	f1 1c       	adc	r15, r1
					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
						{
							uart_var = UART_Receive();
     728:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
     72c:	18 2f       	mov	r17, r24
							UART_Transmit(uart_var);
     72e:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					looping_counter = 0;
					
					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
     732:	80 ed       	ldi	r24, 0xD0	; 208
     734:	81 0f       	add	r24, r17
     736:	8a 30       	cpi	r24, 0x0A	; 10
     738:	b8 f7       	brcc	.-18     	; 0x728 <App+0x2bc>
						{
							uart_var = UART_Receive();
							UART_Transmit(uart_var);
						}
						
						username_arr[looping_counter] = uart_var;
     73a:	f7 01       	movw	r30, r14
     73c:	11 93       	st	Z+, r17
     73e:	7f 01       	movw	r14, r30
					//----------------	Writing the username -----------------//
					UART_Send_String("Enter Username : ");
					
					looping_counter = 0;
					
					while(looping_counter < LOGIN_SIZE)
     740:	ae 16       	cp	r10, r30
     742:	bf 06       	cpc	r11, r31
     744:	89 f7       	brne	.-30     	; 0x728 <App+0x2bc>
						
						username_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
					UART_Transmit('\r');
     746:	8d e0       	ldi	r24, 0x0D	; 13
     748:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					
					//-----------------	Writing the password -----------------//
					UART_Send_String("Enter Password : ");
     74c:	89 eb       	ldi	r24, 0xB9	; 185
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
     754:	7e 01       	movw	r14, r28
     756:	f7 e0       	ldi	r31, 0x07	; 7
     758:	ef 0e       	add	r14, r31
     75a:	f1 1c       	adc	r15, r1
					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
						{
							uart_var = UART_Receive();
     75c:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
     760:	18 2f       	mov	r17, r24
							UART_Transmit(uart_var);
     762:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Send_String("Enter Password : ");

					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
     766:	80 ed       	ldi	r24, 0xD0	; 208
     768:	81 0f       	add	r24, r17
     76a:	8a 30       	cpi	r24, 0x0A	; 10
     76c:	b8 f7       	brcc	.-18     	; 0x75c <App+0x2f0>
						{
							uart_var = UART_Receive();
							UART_Transmit(uart_var);
						}
						
						password_arr[looping_counter] = uart_var;
     76e:	f7 01       	movw	r30, r14
     770:	11 93       	st	Z+, r17
     772:	7f 01       	movw	r14, r30
					UART_Transmit('\r');
					
					//-----------------	Writing the password -----------------//
					UART_Send_String("Enter Password : ");

					while(looping_counter < LOGIN_SIZE)
     774:	e8 15       	cp	r30, r8
     776:	f9 05       	cpc	r31, r9
     778:	89 f7       	brne	.-30     	; 0x75c <App+0x2f0>
						
						password_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
					UART_Transmit('\r');
     77a:	8d e0       	ldi	r24, 0x0D	; 13
     77c:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>

				UART_Transmit('\r');
     780:	8d e0       	ldi	r24, 0x0D	; 13
     782:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				UART_Transmit('\r');
     786:	8d e0       	ldi	r24, 0x0D	; 13
     788:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
     78c:	8a 81       	ldd	r24, Y+2	; 0x02
     78e:	81 11       	cpse	r24, r1
     790:	51 c0       	rjmp	.+162    	; 0x834 <App+0x3c8>
     792:	5e c0       	rjmp	.+188    	; 0x850 <App+0x3e4>
				{
					for(int i = 0; i<LOGIN_SIZE; i++)
					{
						EEPROM_readByte(UART_User_Username_Block,(4*looping_counter)+i,&username_temp_arr[i]);
     794:	a7 01       	movw	r20, r14
     796:	64 2d       	mov	r22, r4
     798:	86 ea       	ldi	r24, 0xA6	; 166
     79a:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
     79e:	8f e3       	ldi	r24, 0x3F	; 63
     7a0:	9c e9       	ldi	r25, 0x9C	; 156
     7a2:	01 97       	sbiw	r24, 0x01	; 1
     7a4:	f1 f7       	brne	.-4      	; 0x7a2 <App+0x336>
     7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <App+0x33c>
     7a8:	00 00       	nop
						_delay_ms(10);
						EEPROM_readByte(UART_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
     7aa:	a8 01       	movw	r20, r16
     7ac:	64 2d       	mov	r22, r4
     7ae:	88 ea       	ldi	r24, 0xA8	; 168
     7b0:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
     7b4:	ef e3       	ldi	r30, 0x3F	; 63
     7b6:	fc e9       	ldi	r31, 0x9C	; 156
     7b8:	31 97       	sbiw	r30, 0x01	; 1
     7ba:	f1 f7       	brne	.-4      	; 0x7b8 <App+0x34c>
     7bc:	00 c0       	rjmp	.+0      	; 0x7be <App+0x352>
     7be:	00 00       	nop
     7c0:	43 94       	inc	r4
     7c2:	ff ef       	ldi	r31, 0xFF	; 255
     7c4:	ef 1a       	sub	r14, r31
     7c6:	ff 0a       	sbc	r15, r31
     7c8:	0f 5f       	subi	r16, 0xFF	; 255
     7ca:	1f 4f       	sbci	r17, 0xFF	; 255
				UART_Transmit('\r');
				UART_Transmit('\r');
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
				{
					for(int i = 0; i<LOGIN_SIZE; i++)
     7cc:	34 10       	cpse	r3, r4
     7ce:	e2 cf       	rjmp	.-60     	; 0x794 <App+0x328>
						_delay_ms(10);
						EEPROM_readByte(UART_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
						_delay_ms(10);
					}
					
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
     7d0:	44 e0       	ldi	r20, 0x04	; 4
     7d2:	6c 2d       	mov	r22, r12
     7d4:	7d 2d       	mov	r23, r13
     7d6:	ce 01       	movw	r24, r28
     7d8:	03 96       	adiw	r24, 0x03	; 3
     7da:	0e 94 a8 04 	call	0x950	; 0x950 <Compare_Passwords>
     7de:	81 33       	cpi	r24, 0x31	; 49
     7e0:	19 f5       	brne	.+70     	; 0x828 <App+0x3bc>
     7e2:	44 e0       	ldi	r20, 0x04	; 4
     7e4:	be 01       	movw	r22, r28
     7e6:	61 5f       	subi	r22, 0xF1	; 241
     7e8:	7f 4f       	sbci	r23, 0xFF	; 255
     7ea:	86 2d       	mov	r24, r6
     7ec:	95 2d       	mov	r25, r5
     7ee:	0e 94 a8 04 	call	0x950	; 0x950 <Compare_Passwords>
     7f2:	81 33       	cpi	r24, 0x31	; 49
     7f4:	c9 f4       	brne	.+50     	; 0x828 <App+0x3bc>
					{
						UART_Send_String("Access Granted");
     7f6:	8b e7       	ldi	r24, 0x7B	; 123
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
						UART_Transmit('\r');
     7fe:	8d e0       	ldi	r24, 0x0D	; 13
     800:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
						UART_Transmit('\r');
     804:	8d e0       	ldi	r24, 0x0D	; 13
     806:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
						UART_Send_String("Welcome User");
     80a:	8f e0       	ldi	r24, 0x0F	; 15
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
						UART_Transmit('\r');
     812:	8d e0       	ldi	r24, 0x0D	; 13
     814:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
						UART_Transmit('\r');
     818:	8d e0       	ldi	r24, 0x0D	; 13
     81a:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
						UART_Transmit('\r');
     81e:	8d e0       	ldi	r24, 0x0D	; 13
     820:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
     824:	7b 88       	ldd	r7, Y+19	; 0x13
     826:	31 c0       	rjmp	.+98     	; 0x88a <__stack+0x2b>
					UART_Transmit('\r');

				UART_Transmit('\r');
				UART_Transmit('\r');
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
     828:	23 94       	inc	r2
     82a:	43 2c       	mov	r4, r3
     82c:	8a 81       	ldd	r24, Y+2	; 0x02
     82e:	28 16       	cp	r2, r24
     830:	18 f0       	brcs	.+6      	; 0x838 <App+0x3cc>
     832:	0e c0       	rjmp	.+28     	; 0x850 <App+0x3e4>
     834:	41 2c       	mov	r4, r1
     836:	21 2c       	mov	r2, r1
     838:	7e 01       	movw	r14, r28
     83a:	8b e0       	ldi	r24, 0x0B	; 11
     83c:	e8 0e       	add	r14, r24
     83e:	f1 1c       	adc	r15, r1
     840:	8e 01       	movw	r16, r28
     842:	01 5f       	subi	r16, 0xF1	; 241
     844:	1f 4f       	sbci	r17, 0xFF	; 255
     846:	68 94       	set
     848:	33 24       	eor	r3, r3
     84a:	32 f8       	bld	r3, 2
     84c:	34 0c       	add	r3, r4
     84e:	a2 cf       	rjmp	.-188    	; 0x794 <App+0x328>
				looping_counter = 0;
				
				if(Compare_Var == 0)
				{
					trials--;
					UART_Send_String("Access Denied");
     850:	8a e8       	ldi	r24, 0x8A	; 138
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
					UART_Transmit('\r');
     858:	8d e0       	ldi	r24, 0x0D	; 13
     85a:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Send_String("Trials Left before initializing Alarm : ");
     85e:	86 ee       	ldi	r24, 0xE6	; 230
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
					UART_Transmit(trials+0x30);
     866:	80 e3       	ldi	r24, 0x30	; 48
     868:	87 0d       	add	r24, r7
     86a:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Transmit('\r');
     86e:	8d e0       	ldi	r24, 0x0D	; 13
     870:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Transmit('\r');
     874:	8d e0       	ldi	r24, 0x0D	; 13
     876:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Transmit('\r');
     87a:	8d e0       	ldi	r24, 0x0D	; 13
     87c:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		
			EEPROM_readByte(Counters_Block,Users_UART_number_BIT,&user_counter);
			_delay_ms(10);
			trials = 3;
			
			while(trials>=1 && trials<=3)
     880:	8f ef       	ldi	r24, 0xFF	; 255
     882:	87 0d       	add	r24, r7
     884:	83 30       	cpi	r24, 0x03	; 3
     886:	08 f4       	brcc	.+2      	; 0x88a <__stack+0x2b>
     888:	43 cf       	rjmp	.-378    	; 0x710 <App+0x2a4>
					break;
				}

			}

			if(trials == 0)
     88a:	71 10       	cpse	r7, r1
     88c:	02 c0       	rjmp	.+4      	; 0x892 <__stack+0x33>
			{
				Alarm_On ();
     88e:	0e 94 9e 0a 	call	0x153c	; 0x153c <Alarm_On>
			}
			
			UART_User_Interfacing();		
     892:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <UART_User_Interfacing>
	}
     896:	02 c0       	rjmp	.+4      	; 0x89c <__stack+0x3d>
				Compare_Var = 1;
			}
			else //This condition means that the entered value is not main admin 
				// Next step is to check if the entered values matches any stored admin or not
			{
				for (looping_counter = 0; looping_counter < admin_counter; looping_counter++)
     898:	76 2c       	mov	r7, r6
     89a:	16 cf       	rjmp	.-468    	; 0x6c8 <App+0x25c>
				Alarm_On ();
			}
			
			UART_User_Interfacing();		
	}
     89c:	63 96       	adiw	r28, 0x13	; 19
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	f8 94       	cli
     8a2:	de bf       	out	0x3e, r29	; 62
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	cd bf       	out	0x3d, r28	; 61
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	1f 91       	pop	r17
     8ae:	0f 91       	pop	r16
     8b0:	ff 90       	pop	r15
     8b2:	ef 90       	pop	r14
     8b4:	df 90       	pop	r13
     8b6:	cf 90       	pop	r12
     8b8:	bf 90       	pop	r11
     8ba:	af 90       	pop	r10
     8bc:	9f 90       	pop	r9
     8be:	8f 90       	pop	r8
     8c0:	7f 90       	pop	r7
     8c2:	6f 90       	pop	r6
     8c4:	5f 90       	pop	r5
     8c6:	4f 90       	pop	r4
     8c8:	3f 90       	pop	r3
     8ca:	2f 90       	pop	r2
     8cc:	08 95       	ret

000008ce <EEPROM_Initialization>:
     8ce:	0e 94 46 05 	call	0xa8c	; 0xa8c <I2C_Initialization>
     8d2:	08 95       	ret

000008d4 <EEPROM_writeByte>:
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	d6 2f       	mov	r29, r22
     8da:	c4 2f       	mov	r28, r20
     8dc:	0e 94 4a 05 	call	0xa94	; 0xa94 <I2C_Start>
     8e0:	8d 2f       	mov	r24, r29
     8e2:	0e 94 84 05 	call	0xb08	; 0xb08 <I2C_Write>
     8e6:	8f e3       	ldi	r24, 0x3F	; 63
     8e8:	9c e9       	ldi	r25, 0x9C	; 156
     8ea:	01 97       	sbiw	r24, 0x01	; 1
     8ec:	f1 f7       	brne	.-4      	; 0x8ea <EEPROM_writeByte+0x16>
     8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <EEPROM_writeByte+0x1c>
     8f0:	00 00       	nop
     8f2:	8c 2f       	mov	r24, r28
     8f4:	0e 94 84 05 	call	0xb08	; 0xb08 <I2C_Write>
     8f8:	8f e3       	ldi	r24, 0x3F	; 63
     8fa:	9c e9       	ldi	r25, 0x9C	; 156
     8fc:	01 97       	sbiw	r24, 0x01	; 1
     8fe:	f1 f7       	brne	.-4      	; 0x8fc <EEPROM_writeByte+0x28>
     900:	00 c0       	rjmp	.+0      	; 0x902 <EEPROM_writeByte+0x2e>
     902:	00 00       	nop
     904:	0e 94 a1 05 	call	0xb42	; 0xb42 <I2C_Stop>
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	08 95       	ret

0000090e <EEPROM_readByte>:
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	c8 2f       	mov	r28, r24
     918:	d6 2f       	mov	r29, r22
     91a:	8a 01       	movw	r16, r20
     91c:	0e 94 4a 05 	call	0xa94	; 0xa94 <I2C_Start>
     920:	8d 2f       	mov	r24, r29
     922:	0e 94 84 05 	call	0xb08	; 0xb08 <I2C_Write>
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	8c 0f       	add	r24, r28
     92a:	0e 94 67 05 	call	0xace	; 0xace <I2C_Repeated_Start>
     92e:	0e 94 96 05 	call	0xb2c	; 0xb2c <I2C_Read_Nack>
     932:	f8 01       	movw	r30, r16
     934:	80 83       	st	Z, r24
     936:	8f e3       	ldi	r24, 0x3F	; 63
     938:	9c e9       	ldi	r25, 0x9C	; 156
     93a:	01 97       	sbiw	r24, 0x01	; 1
     93c:	f1 f7       	brne	.-4      	; 0x93a <EEPROM_readByte+0x2c>
     93e:	00 c0       	rjmp	.+0      	; 0x940 <EEPROM_readByte+0x32>
     940:	00 00       	nop
     942:	0e 94 a1 05 	call	0xb42	; 0xb42 <I2C_Stop>
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	08 95       	ret

00000950 <Compare_Passwords>:


char Compare_Passwords(unsigned char* pass1 , unsigned char* pass2 , unsigned char Pass_Size)
{
	unsigned int i = 0;
	for(i = 0 ; i<Pass_Size; i++)
     950:	50 e0       	ldi	r21, 0x00	; 0
     952:	41 15       	cp	r20, r1
     954:	51 05       	cpc	r21, r1
     956:	b1 f0       	breq	.+44     	; 0x984 <Compare_Passwords+0x34>
	{
		if(pass1[i] != pass2[i])
     958:	fc 01       	movw	r30, r24
     95a:	30 81       	ld	r19, Z
     95c:	fb 01       	movw	r30, r22
     95e:	20 81       	ld	r18, Z
     960:	32 13       	cpse	r19, r18
     962:	12 c0       	rjmp	.+36     	; 0x988 <Compare_Passwords+0x38>
     964:	fc 01       	movw	r30, r24
     966:	31 96       	adiw	r30, 0x01	; 1
     968:	db 01       	movw	r26, r22
     96a:	11 96       	adiw	r26, 0x01	; 1
     96c:	48 0f       	add	r20, r24
     96e:	59 1f       	adc	r21, r25
     970:	04 c0       	rjmp	.+8      	; 0x97a <Compare_Passwords+0x2a>
     972:	21 91       	ld	r18, Z+
     974:	9d 91       	ld	r25, X+
     976:	29 13       	cpse	r18, r25
     978:	09 c0       	rjmp	.+18     	; 0x98c <Compare_Passwords+0x3c>


char Compare_Passwords(unsigned char* pass1 , unsigned char* pass2 , unsigned char Pass_Size)
{
	unsigned int i = 0;
	for(i = 0 ; i<Pass_Size; i++)
     97a:	e4 17       	cp	r30, r20
     97c:	f5 07       	cpc	r31, r21
     97e:	c9 f7       	brne	.-14     	; 0x972 <Compare_Passwords+0x22>
		{
			return '0';
		}
	}
	
	return '1';
     980:	81 e3       	ldi	r24, 0x31	; 49
     982:	08 95       	ret
     984:	81 e3       	ldi	r24, 0x31	; 49
     986:	08 95       	ret
	unsigned int i = 0;
	for(i = 0 ; i<Pass_Size; i++)
	{
		if(pass1[i] != pass2[i])
		{
			return '0';
     988:	80 e3       	ldi	r24, 0x30	; 48
     98a:	08 95       	ret
     98c:	80 e3       	ldi	r24, 0x30	; 48
		}
	}
	
	return '1';
}
     98e:	08 95       	ret

00000990 <EEPROM_Save_Main_Admin>:

void EEPROM_Save_Main_Admin()
{
     990:	cf 93       	push	r28
	for(char i = 0; i < LOGIN_SIZE ; i++)
     992:	c0 e0       	ldi	r28, 0x00	; 0
	{
		EEPROM_writeByte(Main_Admin_Block,0+i,Main_Admin_pass_no);
     994:	41 e3       	ldi	r20, 0x31	; 49
     996:	6c 2f       	mov	r22, r28
     998:	80 ea       	ldi	r24, 0xA0	; 160
     99a:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <EEPROM_writeByte>
     99e:	8f e3       	ldi	r24, 0x3F	; 63
     9a0:	9c e9       	ldi	r25, 0x9C	; 156
     9a2:	01 97       	sbiw	r24, 0x01	; 1
     9a4:	f1 f7       	brne	.-4      	; 0x9a2 <EEPROM_Save_Main_Admin+0x12>
     9a6:	00 c0       	rjmp	.+0      	; 0x9a8 <EEPROM_Save_Main_Admin+0x18>
     9a8:	00 00       	nop
		_delay_ms(10);
		EEPROM_writeByte(Main_Admin_Block,8+i,Main_Admin_pass_no);
     9aa:	68 e0       	ldi	r22, 0x08	; 8
     9ac:	6c 0f       	add	r22, r28
     9ae:	41 e3       	ldi	r20, 0x31	; 49
     9b0:	80 ea       	ldi	r24, 0xA0	; 160
     9b2:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <EEPROM_writeByte>
     9b6:	8f e3       	ldi	r24, 0x3F	; 63
     9b8:	9c e9       	ldi	r25, 0x9C	; 156
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	f1 f7       	brne	.-4      	; 0x9ba <EEPROM_Save_Main_Admin+0x2a>
     9be:	00 c0       	rjmp	.+0      	; 0x9c0 <EEPROM_Save_Main_Admin+0x30>
     9c0:	00 00       	nop
	return '1';
}

void EEPROM_Save_Main_Admin()
{
	for(char i = 0; i < LOGIN_SIZE ; i++)
     9c2:	cf 5f       	subi	r28, 0xFF	; 255
     9c4:	c4 30       	cpi	r28, 0x04	; 4
     9c6:	31 f7       	brne	.-52     	; 0x994 <EEPROM_Save_Main_Admin+0x4>
		EEPROM_writeByte(Main_Admin_Block,0+i,Main_Admin_pass_no);
		_delay_ms(10);
		EEPROM_writeByte(Main_Admin_Block,8+i,Main_Admin_pass_no);
		_delay_ms(10);
	}
}
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <EEPROM_Write_0_Counters>:


void EEPROM_Write_0_Counters()
{
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	00 d0       	rcall	.+0      	; 0x9d2 <EEPROM_Write_0_Counters+0x6>
     9d2:	1f 92       	push	r1
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
	char admin_stored_value = 0;
     9d8:	19 82       	std	Y+1, r1	; 0x01
	char User_uart_stored_value = 0;
     9da:	1a 82       	std	Y+2, r1	; 0x02
	char User_lcd_stored_value = 0;
     9dc:	1b 82       	std	Y+3, r1	; 0x03
	
	EEPROM_readByte(BLOCK_7,Admins_number_BIT,&admin_stored_value);
     9de:	ae 01       	movw	r20, r28
     9e0:	4f 5f       	subi	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	61 e0       	ldi	r22, 0x01	; 1
     9e6:	8e ea       	ldi	r24, 0xAE	; 174
     9e8:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
     9ec:	8f e3       	ldi	r24, 0x3F	; 63
     9ee:	9c e9       	ldi	r25, 0x9C	; 156
     9f0:	01 97       	sbiw	r24, 0x01	; 1
     9f2:	f1 f7       	brne	.-4      	; 0x9f0 <EEPROM_Write_0_Counters+0x24>
     9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <EEPROM_Write_0_Counters+0x2a>
     9f6:	00 00       	nop
	_delay_ms(10);
	EEPROM_readByte(BLOCK_7,Users_UART_number_BIT,&User_uart_stored_value);
     9f8:	ae 01       	movw	r20, r28
     9fa:	4e 5f       	subi	r20, 0xFE	; 254
     9fc:	5f 4f       	sbci	r21, 0xFF	; 255
     9fe:	62 e0       	ldi	r22, 0x02	; 2
     a00:	8e ea       	ldi	r24, 0xAE	; 174
     a02:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
     a06:	8f e3       	ldi	r24, 0x3F	; 63
     a08:	9c e9       	ldi	r25, 0x9C	; 156
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	f1 f7       	brne	.-4      	; 0xa0a <EEPROM_Write_0_Counters+0x3e>
     a0e:	00 c0       	rjmp	.+0      	; 0xa10 <EEPROM_Write_0_Counters+0x44>
     a10:	00 00       	nop
	_delay_ms(10);
	EEPROM_readByte(BLOCK_7,Users_LCD_number_BIT,&User_lcd_stored_value);
     a12:	ae 01       	movw	r20, r28
     a14:	4d 5f       	subi	r20, 0xFD	; 253
     a16:	5f 4f       	sbci	r21, 0xFF	; 255
     a18:	63 e0       	ldi	r22, 0x03	; 3
     a1a:	8e ea       	ldi	r24, 0xAE	; 174
     a1c:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
     a20:	8f e3       	ldi	r24, 0x3F	; 63
     a22:	9c e9       	ldi	r25, 0x9C	; 156
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	f1 f7       	brne	.-4      	; 0xa24 <EEPROM_Write_0_Counters+0x58>
     a28:	00 c0       	rjmp	.+0      	; 0xa2a <EEPROM_Write_0_Counters+0x5e>
     a2a:	00 00       	nop
	_delay_ms(10);
	
	if(admin_stored_value == 0xFF)
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	8f 3f       	cpi	r24, 0xFF	; 255
     a30:	59 f4       	brne	.+22     	; 0xa48 <EEPROM_Write_0_Counters+0x7c>
	{
		EEPROM_writeByte(BLOCK_7,Admins_number_BIT,0);	// Write 0 on Block_7 bit 0
     a32:	40 e0       	ldi	r20, 0x00	; 0
     a34:	61 e0       	ldi	r22, 0x01	; 1
     a36:	8e ea       	ldi	r24, 0xAE	; 174
     a38:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <EEPROM_writeByte>
     a3c:	8f e3       	ldi	r24, 0x3F	; 63
     a3e:	9c e9       	ldi	r25, 0x9C	; 156
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	f1 f7       	brne	.-4      	; 0xa40 <EEPROM_Write_0_Counters+0x74>
     a44:	00 c0       	rjmp	.+0      	; 0xa46 <EEPROM_Write_0_Counters+0x7a>
     a46:	00 00       	nop
		_delay_ms(10);
	}
	
	if(User_uart_stored_value == 0xFF)
     a48:	8a 81       	ldd	r24, Y+2	; 0x02
     a4a:	8f 3f       	cpi	r24, 0xFF	; 255
     a4c:	59 f4       	brne	.+22     	; 0xa64 <EEPROM_Write_0_Counters+0x98>
	{
		EEPROM_writeByte(BLOCK_7,Users_UART_number_BIT,0);	// Write 0 on Block_7 bit 1
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	62 e0       	ldi	r22, 0x02	; 2
     a52:	8e ea       	ldi	r24, 0xAE	; 174
     a54:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <EEPROM_writeByte>
     a58:	8f e3       	ldi	r24, 0x3F	; 63
     a5a:	9c e9       	ldi	r25, 0x9C	; 156
     a5c:	01 97       	sbiw	r24, 0x01	; 1
     a5e:	f1 f7       	brne	.-4      	; 0xa5c <EEPROM_Write_0_Counters+0x90>
     a60:	00 c0       	rjmp	.+0      	; 0xa62 <EEPROM_Write_0_Counters+0x96>
     a62:	00 00       	nop
		_delay_ms(10);
	}
	
	if(User_lcd_stored_value == 0xFF)
     a64:	8b 81       	ldd	r24, Y+3	; 0x03
     a66:	8f 3f       	cpi	r24, 0xFF	; 255
     a68:	59 f4       	brne	.+22     	; 0xa80 <EEPROM_Write_0_Counters+0xb4>
	{
		EEPROM_writeByte(BLOCK_7,Users_LCD_number_BIT,0);	// Write 0 on Block_7 bit 1
     a6a:	40 e0       	ldi	r20, 0x00	; 0
     a6c:	63 e0       	ldi	r22, 0x03	; 3
     a6e:	8e ea       	ldi	r24, 0xAE	; 174
     a70:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <EEPROM_writeByte>
     a74:	8f e3       	ldi	r24, 0x3F	; 63
     a76:	9c e9       	ldi	r25, 0x9C	; 156
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	f1 f7       	brne	.-4      	; 0xa78 <EEPROM_Write_0_Counters+0xac>
     a7c:	00 c0       	rjmp	.+0      	; 0xa7e <EEPROM_Write_0_Counters+0xb2>
     a7e:	00 00       	nop
		_delay_ms(10);
	}
	
}
     a80:	0f 90       	pop	r0
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	08 95       	ret

00000a8c <I2C_Initialization>:
     a8c:	11 b8       	out	0x01, r1	; 1
     a8e:	8f ef       	ldi	r24, 0xFF	; 255
     a90:	80 b9       	out	0x00, r24	; 0
     a92:	08 95       	ret

00000a94 <I2C_Start>:
     a94:	94 ea       	ldi	r25, 0xA4	; 164
     a96:	96 bf       	out	0x36, r25	; 54
     a98:	06 b6       	in	r0, 0x36	; 54
     a9a:	07 fe       	sbrs	r0, 7
     a9c:	fd cf       	rjmp	.-6      	; 0xa98 <I2C_Start+0x4>
     a9e:	91 b1       	in	r25, 0x01	; 1
     aa0:	98 7f       	andi	r25, 0xF8	; 248
     aa2:	98 30       	cpi	r25, 0x08	; 8
     aa4:	71 f4       	brne	.+28     	; 0xac2 <I2C_Start+0x2e>
     aa6:	83 b9       	out	0x03, r24	; 3
     aa8:	84 e8       	ldi	r24, 0x84	; 132
     aaa:	86 bf       	out	0x36, r24	; 54
     aac:	06 b6       	in	r0, 0x36	; 54
     aae:	07 fe       	sbrs	r0, 7
     ab0:	fd cf       	rjmp	.-6      	; 0xaac <I2C_Start+0x18>
     ab2:	81 b1       	in	r24, 0x01	; 1
     ab4:	88 7f       	andi	r24, 0xF8	; 248
     ab6:	88 31       	cpi	r24, 0x18	; 24
     ab8:	31 f0       	breq	.+12     	; 0xac6 <I2C_Start+0x32>
     aba:	80 32       	cpi	r24, 0x20	; 32
     abc:	31 f0       	breq	.+12     	; 0xaca <I2C_Start+0x36>
     abe:	83 e0       	ldi	r24, 0x03	; 3
     ac0:	08 95       	ret
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	08 95       	ret
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	08 95       	ret
     aca:	82 e0       	ldi	r24, 0x02	; 2
     acc:	08 95       	ret

00000ace <I2C_Repeated_Start>:
     ace:	94 ea       	ldi	r25, 0xA4	; 164
     ad0:	96 bf       	out	0x36, r25	; 54
     ad2:	06 b6       	in	r0, 0x36	; 54
     ad4:	07 fe       	sbrs	r0, 7
     ad6:	fd cf       	rjmp	.-6      	; 0xad2 <I2C_Repeated_Start+0x4>
     ad8:	91 b1       	in	r25, 0x01	; 1
     ada:	98 7f       	andi	r25, 0xF8	; 248
     adc:	90 31       	cpi	r25, 0x10	; 16
     ade:	71 f4       	brne	.+28     	; 0xafc <I2C_Repeated_Start+0x2e>
     ae0:	83 b9       	out	0x03, r24	; 3
     ae2:	84 e8       	ldi	r24, 0x84	; 132
     ae4:	86 bf       	out	0x36, r24	; 54
     ae6:	06 b6       	in	r0, 0x36	; 54
     ae8:	07 fe       	sbrs	r0, 7
     aea:	fd cf       	rjmp	.-6      	; 0xae6 <I2C_Repeated_Start+0x18>
     aec:	81 b1       	in	r24, 0x01	; 1
     aee:	88 7f       	andi	r24, 0xF8	; 248
     af0:	80 34       	cpi	r24, 0x40	; 64
     af2:	31 f0       	breq	.+12     	; 0xb00 <I2C_Repeated_Start+0x32>
     af4:	88 34       	cpi	r24, 0x48	; 72
     af6:	31 f0       	breq	.+12     	; 0xb04 <I2C_Repeated_Start+0x36>
     af8:	83 e0       	ldi	r24, 0x03	; 3
     afa:	08 95       	ret
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	08 95       	ret
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	08 95       	ret
     b04:	82 e0       	ldi	r24, 0x02	; 2
     b06:	08 95       	ret

00000b08 <I2C_Write>:
     b08:	83 b9       	out	0x03, r24	; 3
     b0a:	84 e8       	ldi	r24, 0x84	; 132
     b0c:	86 bf       	out	0x36, r24	; 54
     b0e:	06 b6       	in	r0, 0x36	; 54
     b10:	07 fe       	sbrs	r0, 7
     b12:	fd cf       	rjmp	.-6      	; 0xb0e <I2C_Write+0x6>
     b14:	81 b1       	in	r24, 0x01	; 1
     b16:	88 7f       	andi	r24, 0xF8	; 248
     b18:	88 32       	cpi	r24, 0x28	; 40
     b1a:	21 f0       	breq	.+8      	; 0xb24 <I2C_Write+0x1c>
     b1c:	80 33       	cpi	r24, 0x30	; 48
     b1e:	21 f0       	breq	.+8      	; 0xb28 <I2C_Write+0x20>
     b20:	82 e0       	ldi	r24, 0x02	; 2
     b22:	08 95       	ret
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	08 95       	ret
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	08 95       	ret

00000b2c <I2C_Read_Nack>:
     b2c:	86 b7       	in	r24, 0x36	; 54
     b2e:	84 60       	ori	r24, 0x04	; 4
     b30:	86 bf       	out	0x36, r24	; 54
     b32:	86 b7       	in	r24, 0x36	; 54
     b34:	80 68       	ori	r24, 0x80	; 128
     b36:	86 bf       	out	0x36, r24	; 54
     b38:	06 b6       	in	r0, 0x36	; 54
     b3a:	07 fe       	sbrs	r0, 7
     b3c:	fd cf       	rjmp	.-6      	; 0xb38 <I2C_Read_Nack+0xc>
     b3e:	83 b1       	in	r24, 0x03	; 3
     b40:	08 95       	ret

00000b42 <I2C_Stop>:
     b42:	84 e9       	ldi	r24, 0x94	; 148
     b44:	86 bf       	out	0x36, r24	; 54
     b46:	06 b6       	in	r0, 0x36	; 54
     b48:	04 fc       	sbrc	r0, 4
     b4a:	fd cf       	rjmp	.-6      	; 0xb46 <I2C_Stop+0x4>
     b4c:	08 95       	ret

00000b4e <Interrupt_Start>:
     b4e:	8a 98       	cbi	0x11, 2	; 17
     b50:	8b b7       	in	r24, 0x3b	; 59
     b52:	80 64       	ori	r24, 0x40	; 64
     b54:	8b bf       	out	0x3b, r24	; 59
     b56:	85 b7       	in	r24, 0x35	; 53
     b58:	8d 7f       	andi	r24, 0xFD	; 253
     b5a:	85 bf       	out	0x35, r24	; 53
     b5c:	85 b7       	in	r24, 0x35	; 53
     b5e:	8e 7f       	andi	r24, 0xFE	; 254
     b60:	85 bf       	out	0x35, r24	; 53
     b62:	78 94       	sei
     b64:	08 95       	ret

00000b66 <Keypad_Init>:
     b66:	a4 98       	cbi	0x14, 4	; 20
     b68:	a5 98       	cbi	0x14, 5	; 20
     b6a:	a6 98       	cbi	0x14, 6	; 20
     b6c:	a7 98       	cbi	0x14, 7	; 20
     b6e:	ac 9a       	sbi	0x15, 4	; 21
     b70:	ad 9a       	sbi	0x15, 5	; 21
     b72:	ae 9a       	sbi	0x15, 6	; 21
     b74:	af 9a       	sbi	0x15, 7	; 21
     b76:	bc 9a       	sbi	0x17, 4	; 23
     b78:	bd 9a       	sbi	0x17, 5	; 23
     b7a:	be 9a       	sbi	0x17, 6	; 23
     b7c:	bf 9a       	sbi	0x17, 7	; 23
     b7e:	c4 9a       	sbi	0x18, 4	; 24
     b80:	c5 9a       	sbi	0x18, 5	; 24
     b82:	c6 9a       	sbi	0x18, 6	; 24
     b84:	c7 9a       	sbi	0x18, 7	; 24
     b86:	08 95       	ret

00000b88 <Keypad_Get_Value>:
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	c4 e0       	ldi	r28, 0x04	; 4
     b92:	d0 e0       	ldi	r29, 0x00	; 0
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	a1 e0       	ldi	r26, 0x01	; 1
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	98 b3       	in	r25, 0x18	; 24
     b9c:	8d 01       	movw	r16, r26
     b9e:	0c 2e       	mov	r0, r28
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <Keypad_Get_Value+0x1e>
     ba2:	00 0f       	add	r16, r16
     ba4:	11 1f       	adc	r17, r17
     ba6:	0a 94       	dec	r0
     ba8:	e2 f7       	brpl	.-8      	; 0xba2 <Keypad_Get_Value+0x1a>
     baa:	20 2f       	mov	r18, r16
     bac:	20 95       	com	r18
     bae:	92 23       	and	r25, r18
     bb0:	98 bb       	out	0x18, r25	; 24
     bb2:	fe 01       	movw	r30, r28
     bb4:	e4 5a       	subi	r30, 0xA4	; 164
     bb6:	ff 4f       	sbci	r31, 0xFF	; 255
     bb8:	64 e0       	ldi	r22, 0x04	; 4
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	23 b3       	in	r18, 0x13	; 19
     bbe:	96 2f       	mov	r25, r22
     bc0:	ad 01       	movw	r20, r26
     bc2:	06 2e       	mov	r0, r22
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <Keypad_Get_Value+0x42>
     bc6:	44 0f       	add	r20, r20
     bc8:	55 1f       	adc	r21, r21
     bca:	0a 94       	dec	r0
     bcc:	e2 f7       	brpl	.-8      	; 0xbc6 <Keypad_Get_Value+0x3e>
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	24 23       	and	r18, r20
     bd2:	35 23       	and	r19, r21
     bd4:	06 2e       	mov	r0, r22
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <Keypad_Get_Value+0x54>
     bd8:	35 95       	asr	r19
     bda:	27 95       	ror	r18
     bdc:	0a 94       	dec	r0
     bde:	e2 f7       	brpl	.-8      	; 0xbd8 <Keypad_Get_Value+0x50>
     be0:	23 2b       	or	r18, r19
     be2:	69 f4       	brne	.+26     	; 0xbfe <Keypad_Get_Value+0x76>
     be4:	80 81       	ld	r24, Z
     be6:	23 b3       	in	r18, 0x13	; 19
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	24 23       	and	r18, r20
     bec:	35 23       	and	r19, r21
     bee:	09 2e       	mov	r0, r25
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <Keypad_Get_Value+0x6e>
     bf2:	35 95       	asr	r19
     bf4:	27 95       	ror	r18
     bf6:	0a 94       	dec	r0
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <Keypad_Get_Value+0x6a>
     bfa:	23 2b       	or	r18, r19
     bfc:	a1 f3       	breq	.-24     	; 0xbe6 <Keypad_Get_Value+0x5e>
     bfe:	6f 5f       	subi	r22, 0xFF	; 255
     c00:	7f 4f       	sbci	r23, 0xFF	; 255
     c02:	34 96       	adiw	r30, 0x04	; 4
     c04:	68 30       	cpi	r22, 0x08	; 8
     c06:	71 05       	cpc	r23, r1
     c08:	c9 f6       	brne	.-78     	; 0xbbc <Keypad_Get_Value+0x34>
     c0a:	98 b3       	in	r25, 0x18	; 24
     c0c:	09 2b       	or	r16, r25
     c0e:	08 bb       	out	0x18, r16	; 24
     c10:	21 96       	adiw	r28, 0x01	; 1
     c12:	c8 30       	cpi	r28, 0x08	; 8
     c14:	d1 05       	cpc	r29, r1
     c16:	09 f6       	brne	.-126    	; 0xb9a <Keypad_Get_Value+0x12>
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	08 95       	ret

00000c22 <LCD_Send_CMD>:
     c22:	9b b3       	in	r25, 0x1b	; 27
     c24:	9f 70       	andi	r25, 0x0F	; 15
     c26:	28 2f       	mov	r18, r24
     c28:	20 7f       	andi	r18, 0xF0	; 240
     c2a:	92 2b       	or	r25, r18
     c2c:	9b bb       	out	0x1b, r25	; 27
     c2e:	d8 98       	cbi	0x1b, 0	; 27
     c30:	d9 98       	cbi	0x1b, 1	; 27
     c32:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c34:	35 e0       	ldi	r19, 0x05	; 5
     c36:	3a 95       	dec	r19
     c38:	f1 f7       	brne	.-4      	; 0xc36 <LCD_Send_CMD+0x14>
     c3a:	00 00       	nop
     c3c:	da 98       	cbi	0x1b, 2	; 27
     c3e:	ef e1       	ldi	r30, 0x1F	; 31
     c40:	f3 e0       	ldi	r31, 0x03	; 3
     c42:	31 97       	sbiw	r30, 0x01	; 1
     c44:	f1 f7       	brne	.-4      	; 0xc42 <LCD_Send_CMD+0x20>
     c46:	00 c0       	rjmp	.+0      	; 0xc48 <LCD_Send_CMD+0x26>
     c48:	00 00       	nop
     c4a:	2b b3       	in	r18, 0x1b	; 27
     c4c:	2f 70       	andi	r18, 0x0F	; 15
     c4e:	f0 e1       	ldi	r31, 0x10	; 16
     c50:	8f 9f       	mul	r24, r31
     c52:	c0 01       	movw	r24, r0
     c54:	11 24       	eor	r1, r1
     c56:	82 2b       	or	r24, r18
     c58:	8b bb       	out	0x1b, r24	; 27
     c5a:	da 9a       	sbi	0x1b, 2	; 27
     c5c:	35 e0       	ldi	r19, 0x05	; 5
     c5e:	3a 95       	dec	r19
     c60:	f1 f7       	brne	.-4      	; 0xc5e <LCD_Send_CMD+0x3c>
     c62:	00 00       	nop
     c64:	da 98       	cbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c66:	8f e3       	ldi	r24, 0x3F	; 63
     c68:	9f e1       	ldi	r25, 0x1F	; 31
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	f1 f7       	brne	.-4      	; 0xc6a <LCD_Send_CMD+0x48>
     c6e:	00 c0       	rjmp	.+0      	; 0xc70 <LCD_Send_CMD+0x4e>
     c70:	00 00       	nop
     c72:	08 95       	ret

00000c74 <LCD_Init>:
     c74:	d0 9a       	sbi	0x1a, 0	; 26
     c76:	d1 9a       	sbi	0x1a, 1	; 26
     c78:	d2 9a       	sbi	0x1a, 2	; 26
     c7a:	d8 98       	cbi	0x1b, 0	; 27
     c7c:	d9 98       	cbi	0x1b, 1	; 27
     c7e:	da 98       	cbi	0x1b, 2	; 27
     c80:	d4 9a       	sbi	0x1a, 4	; 26
     c82:	d5 9a       	sbi	0x1a, 5	; 26
     c84:	d6 9a       	sbi	0x1a, 6	; 26
     c86:	d7 9a       	sbi	0x1a, 7	; 26
     c88:	dc 98       	cbi	0x1b, 4	; 27
     c8a:	dd 98       	cbi	0x1b, 5	; 27
     c8c:	de 98       	cbi	0x1b, 6	; 27
     c8e:	df 98       	cbi	0x1b, 7	; 27
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
     c96:	8f e9       	ldi	r24, 0x9F	; 159
     c98:	9f e0       	ldi	r25, 0x0F	; 15
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <LCD_Init+0x26>
     c9e:	00 c0       	rjmp	.+0      	; 0xca0 <LCD_Init+0x2c>
     ca0:	00 00       	nop
     ca2:	88 e2       	ldi	r24, 0x28	; 40
     ca4:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
     ca8:	8f e9       	ldi	r24, 0x9F	; 159
     caa:	9f e0       	ldi	r25, 0x0F	; 15
     cac:	01 97       	sbiw	r24, 0x01	; 1
     cae:	f1 f7       	brne	.-4      	; 0xcac <LCD_Init+0x38>
     cb0:	00 c0       	rjmp	.+0      	; 0xcb2 <LCD_Init+0x3e>
     cb2:	00 00       	nop
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
     cba:	8f e9       	ldi	r24, 0x9F	; 159
     cbc:	9f e0       	ldi	r25, 0x0F	; 15
     cbe:	01 97       	sbiw	r24, 0x01	; 1
     cc0:	f1 f7       	brne	.-4      	; 0xcbe <LCD_Init+0x4a>
     cc2:	00 c0       	rjmp	.+0      	; 0xcc4 <LCD_Init+0x50>
     cc4:	00 00       	nop
     cc6:	8c e0       	ldi	r24, 0x0C	; 12
     cc8:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
     ccc:	8f e9       	ldi	r24, 0x9F	; 159
     cce:	9f e0       	ldi	r25, 0x0F	; 15
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <LCD_Init+0x5c>
     cd4:	00 c0       	rjmp	.+0      	; 0xcd6 <LCD_Init+0x62>
     cd6:	00 00       	nop
     cd8:	86 e0       	ldi	r24, 0x06	; 6
     cda:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
     cde:	8f e9       	ldi	r24, 0x9F	; 159
     ce0:	9f e0       	ldi	r25, 0x0F	; 15
     ce2:	01 97       	sbiw	r24, 0x01	; 1
     ce4:	f1 f7       	brne	.-4      	; 0xce2 <LCD_Init+0x6e>
     ce6:	00 c0       	rjmp	.+0      	; 0xce8 <LCD_Init+0x74>
     ce8:	00 00       	nop
     cea:	08 95       	ret

00000cec <LCD_Write_Char>:
     cec:	9b b3       	in	r25, 0x1b	; 27
     cee:	9f 70       	andi	r25, 0x0F	; 15
     cf0:	28 2f       	mov	r18, r24
     cf2:	20 7f       	andi	r18, 0xF0	; 240
     cf4:	92 2b       	or	r25, r18
     cf6:	9b bb       	out	0x1b, r25	; 27
     cf8:	d8 9a       	sbi	0x1b, 0	; 27
     cfa:	d9 98       	cbi	0x1b, 1	; 27
     cfc:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cfe:	35 e0       	ldi	r19, 0x05	; 5
     d00:	3a 95       	dec	r19
     d02:	f1 f7       	brne	.-4      	; 0xd00 <LCD_Write_Char+0x14>
     d04:	00 00       	nop
     d06:	da 98       	cbi	0x1b, 2	; 27
     d08:	ef e1       	ldi	r30, 0x1F	; 31
     d0a:	f3 e0       	ldi	r31, 0x03	; 3
     d0c:	31 97       	sbiw	r30, 0x01	; 1
     d0e:	f1 f7       	brne	.-4      	; 0xd0c <LCD_Write_Char+0x20>
     d10:	00 c0       	rjmp	.+0      	; 0xd12 <LCD_Write_Char+0x26>
     d12:	00 00       	nop
     d14:	2b b3       	in	r18, 0x1b	; 27
     d16:	2f 70       	andi	r18, 0x0F	; 15
     d18:	f0 e1       	ldi	r31, 0x10	; 16
     d1a:	8f 9f       	mul	r24, r31
     d1c:	c0 01       	movw	r24, r0
     d1e:	11 24       	eor	r1, r1
     d20:	82 2b       	or	r24, r18
     d22:	8b bb       	out	0x1b, r24	; 27
     d24:	da 9a       	sbi	0x1b, 2	; 27
     d26:	35 e0       	ldi	r19, 0x05	; 5
     d28:	3a 95       	dec	r19
     d2a:	f1 f7       	brne	.-4      	; 0xd28 <LCD_Write_Char+0x3c>
     d2c:	00 00       	nop
     d2e:	da 98       	cbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d30:	8f e3       	ldi	r24, 0x3F	; 63
     d32:	9f e1       	ldi	r25, 0x1F	; 31
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	f1 f7       	brne	.-4      	; 0xd34 <LCD_Write_Char+0x48>
     d38:	00 c0       	rjmp	.+0      	; 0xd3a <LCD_Write_Char+0x4e>
     d3a:	00 00       	nop
     d3c:	08 95       	ret

00000d3e <LCD_Write_String>:
     d3e:	0f 93       	push	r16
     d40:	1f 93       	push	r17
     d42:	cf 93       	push	r28
     d44:	fc 01       	movw	r30, r24
     d46:	80 81       	ld	r24, Z
     d48:	88 23       	and	r24, r24
     d4a:	a1 f0       	breq	.+40     	; 0xd74 <LCD_Write_String+0x36>
     d4c:	8f 01       	movw	r16, r30
     d4e:	c0 e0       	ldi	r28, 0x00	; 0
     d50:	0e 94 76 06 	call	0xcec	; 0xcec <LCD_Write_Char>
     d54:	2f ef       	ldi	r18, 0xFF	; 255
     d56:	80 e7       	ldi	r24, 0x70	; 112
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	21 50       	subi	r18, 0x01	; 1
     d5c:	80 40       	sbci	r24, 0x00	; 0
     d5e:	90 40       	sbci	r25, 0x00	; 0
     d60:	e1 f7       	brne	.-8      	; 0xd5a <LCD_Write_String+0x1c>
     d62:	00 c0       	rjmp	.+0      	; 0xd64 <LCD_Write_String+0x26>
     d64:	00 00       	nop
     d66:	cf 5f       	subi	r28, 0xFF	; 255
     d68:	f8 01       	movw	r30, r16
     d6a:	ec 0f       	add	r30, r28
     d6c:	f1 1d       	adc	r31, r1
     d6e:	80 81       	ld	r24, Z
     d70:	81 11       	cpse	r24, r1
     d72:	ee cf       	rjmp	.-36     	; 0xd50 <LCD_Write_String+0x12>
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	08 95       	ret

00000d7c <LCD_Set_Cursor>:
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	50 f4       	brcc	.+20     	; 0xd94 <LCD_Set_Cursor+0x18>
     d80:	60 31       	cpi	r22, 0x10	; 16
     d82:	40 f4       	brcc	.+16     	; 0xd94 <LCD_Set_Cursor+0x18>
     d84:	90 e4       	ldi	r25, 0x40	; 64
     d86:	89 9f       	mul	r24, r25
     d88:	60 0d       	add	r22, r0
     d8a:	11 24       	eor	r1, r1
     d8c:	86 2f       	mov	r24, r22
     d8e:	80 68       	ori	r24, 0x80	; 128
     d90:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
     d94:	08 95       	ret

00000d96 <LCD_Clear_Screen>:
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
     d9c:	08 95       	ret

00000d9e <LCD_Display_LED>:
     d9e:	83 33       	cpi	r24, 0x33	; 51
     da0:	09 f4       	brne	.+2      	; 0xda4 <LCD_Display_LED+0x6>
     da2:	47 c0       	rjmp	.+142    	; 0xe32 <LCD_Display_LED+0x94>
     da4:	28 f4       	brcc	.+10     	; 0xdb0 <LCD_Display_LED+0x12>
     da6:	81 33       	cpi	r24, 0x31	; 49
     da8:	51 f0       	breq	.+20     	; 0xdbe <LCD_Display_LED+0x20>
     daa:	82 33       	cpi	r24, 0x32	; 50
     dac:	29 f1       	breq	.+74     	; 0xdf8 <LCD_Display_LED+0x5a>
     dae:	95 c0       	rjmp	.+298    	; 0xeda <LCD_Display_LED+0x13c>
     db0:	84 33       	cpi	r24, 0x34	; 52
     db2:	09 f4       	brne	.+2      	; 0xdb6 <LCD_Display_LED+0x18>
     db4:	5b c0       	rjmp	.+182    	; 0xe6c <LCD_Display_LED+0xce>
     db6:	85 33       	cpi	r24, 0x35	; 53
     db8:	09 f4       	brne	.+2      	; 0xdbc <LCD_Display_LED+0x1e>
     dba:	74 c0       	rjmp	.+232    	; 0xea4 <LCD_Display_LED+0x106>
     dbc:	8e c0       	rjmp	.+284    	; 0xeda <LCD_Display_LED+0x13c>
     dbe:	60 33       	cpi	r22, 0x30	; 48
     dc0:	79 f0       	breq	.+30     	; 0xde0 <LCD_Display_LED+0x42>
     dc2:	61 33       	cpi	r22, 0x31	; 49
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <LCD_Display_LED+0x2a>
     dc6:	89 c0       	rjmp	.+274    	; 0xeda <LCD_Display_LED+0x13c>
     dc8:	8c e1       	ldi	r24, 0x1C	; 28
     dca:	91 e0       	ldi	r25, 0x01	; 1
     dcc:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     dd0:	80 ec       	ldi	r24, 0xC0	; 192
     dd2:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
     dd6:	87 e2       	ldi	r24, 0x27	; 39
     dd8:	91 e0       	ldi	r25, 0x01	; 1
     dda:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     dde:	7d c0       	rjmp	.+250    	; 0xeda <LCD_Display_LED+0x13c>
     de0:	8c e1       	ldi	r24, 0x1C	; 28
     de2:	91 e0       	ldi	r25, 0x01	; 1
     de4:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     de8:	80 ec       	ldi	r24, 0xC0	; 192
     dea:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
     dee:	84 e3       	ldi	r24, 0x34	; 52
     df0:	91 e0       	ldi	r25, 0x01	; 1
     df2:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     df6:	71 c0       	rjmp	.+226    	; 0xeda <LCD_Display_LED+0x13c>
     df8:	60 33       	cpi	r22, 0x30	; 48
     dfa:	79 f0       	breq	.+30     	; 0xe1a <LCD_Display_LED+0x7c>
     dfc:	61 33       	cpi	r22, 0x31	; 49
     dfe:	09 f0       	breq	.+2      	; 0xe02 <LCD_Display_LED+0x64>
     e00:	6c c0       	rjmp	.+216    	; 0xeda <LCD_Display_LED+0x13c>
     e02:	82 e4       	ldi	r24, 0x42	; 66
     e04:	91 e0       	ldi	r25, 0x01	; 1
     e06:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     e0a:	80 ec       	ldi	r24, 0xC0	; 192
     e0c:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
     e10:	87 e2       	ldi	r24, 0x27	; 39
     e12:	91 e0       	ldi	r25, 0x01	; 1
     e14:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     e18:	60 c0       	rjmp	.+192    	; 0xeda <LCD_Display_LED+0x13c>
     e1a:	82 e4       	ldi	r24, 0x42	; 66
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     e22:	80 ec       	ldi	r24, 0xC0	; 192
     e24:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
     e28:	84 e3       	ldi	r24, 0x34	; 52
     e2a:	91 e0       	ldi	r25, 0x01	; 1
     e2c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     e30:	54 c0       	rjmp	.+168    	; 0xeda <LCD_Display_LED+0x13c>
     e32:	60 33       	cpi	r22, 0x30	; 48
     e34:	79 f0       	breq	.+30     	; 0xe54 <LCD_Display_LED+0xb6>
     e36:	61 33       	cpi	r22, 0x31	; 49
     e38:	09 f0       	breq	.+2      	; 0xe3c <LCD_Display_LED+0x9e>
     e3a:	4f c0       	rjmp	.+158    	; 0xeda <LCD_Display_LED+0x13c>
     e3c:	8d e4       	ldi	r24, 0x4D	; 77
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     e44:	80 ec       	ldi	r24, 0xC0	; 192
     e46:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
     e4a:	87 e2       	ldi	r24, 0x27	; 39
     e4c:	91 e0       	ldi	r25, 0x01	; 1
     e4e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     e52:	43 c0       	rjmp	.+134    	; 0xeda <LCD_Display_LED+0x13c>
     e54:	8d e4       	ldi	r24, 0x4D	; 77
     e56:	91 e0       	ldi	r25, 0x01	; 1
     e58:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     e5c:	80 ec       	ldi	r24, 0xC0	; 192
     e5e:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
     e62:	84 e3       	ldi	r24, 0x34	; 52
     e64:	91 e0       	ldi	r25, 0x01	; 1
     e66:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     e6a:	37 c0       	rjmp	.+110    	; 0xeda <LCD_Display_LED+0x13c>
     e6c:	60 33       	cpi	r22, 0x30	; 48
     e6e:	71 f0       	breq	.+28     	; 0xe8c <LCD_Display_LED+0xee>
     e70:	61 33       	cpi	r22, 0x31	; 49
     e72:	99 f5       	brne	.+102    	; 0xeda <LCD_Display_LED+0x13c>
     e74:	88 e5       	ldi	r24, 0x58	; 88
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     e7c:	80 ec       	ldi	r24, 0xC0	; 192
     e7e:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
     e82:	87 e2       	ldi	r24, 0x27	; 39
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     e8a:	27 c0       	rjmp	.+78     	; 0xeda <LCD_Display_LED+0x13c>
     e8c:	88 e5       	ldi	r24, 0x58	; 88
     e8e:	91 e0       	ldi	r25, 0x01	; 1
     e90:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     e94:	80 ec       	ldi	r24, 0xC0	; 192
     e96:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
     e9a:	84 e3       	ldi	r24, 0x34	; 52
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     ea2:	1b c0       	rjmp	.+54     	; 0xeda <LCD_Display_LED+0x13c>
     ea4:	60 33       	cpi	r22, 0x30	; 48
     ea6:	71 f0       	breq	.+28     	; 0xec4 <LCD_Display_LED+0x126>
     ea8:	61 33       	cpi	r22, 0x31	; 49
     eaa:	b9 f4       	brne	.+46     	; 0xeda <LCD_Display_LED+0x13c>
     eac:	83 e6       	ldi	r24, 0x63	; 99
     eae:	91 e0       	ldi	r25, 0x01	; 1
     eb0:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     eb4:	80 ec       	ldi	r24, 0xC0	; 192
     eb6:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
     eba:	87 e2       	ldi	r24, 0x27	; 39
     ebc:	91 e0       	ldi	r25, 0x01	; 1
     ebe:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     ec2:	0b c0       	rjmp	.+22     	; 0xeda <LCD_Display_LED+0x13c>
     ec4:	83 e6       	ldi	r24, 0x63	; 99
     ec6:	91 e0       	ldi	r25, 0x01	; 1
     ec8:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     ecc:	80 ec       	ldi	r24, 0xC0	; 192
     ece:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
     ed2:	84 e3       	ldi	r24, 0x34	; 52
     ed4:	91 e0       	ldi	r25, 0x01	; 1
     ed6:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     eda:	2f ef       	ldi	r18, 0xFF	; 255
     edc:	83 ed       	ldi	r24, 0xD3	; 211
     ede:	90 e3       	ldi	r25, 0x30	; 48
     ee0:	21 50       	subi	r18, 0x01	; 1
     ee2:	80 40       	sbci	r24, 0x00	; 0
     ee4:	90 40       	sbci	r25, 0x00	; 0
     ee6:	e1 f7       	brne	.-8      	; 0xee0 <LCD_Display_LED+0x142>
     ee8:	00 c0       	rjmp	.+0      	; 0xeea <LCD_Display_LED+0x14c>
     eea:	00 00       	nop
     eec:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
     ef0:	08 95       	ret

00000ef2 <LCD_Welcome_Message>:
     ef2:	8e e6       	ldi	r24, 0x6E	; 110
     ef4:	91 e0       	ldi	r25, 0x01	; 1
     ef6:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     efa:	80 ec       	ldi	r24, 0xC0	; 192
     efc:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
     f00:	8f ec       	ldi	r24, 0xCF	; 207
     f02:	92 e0       	ldi	r25, 0x02	; 2
     f04:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     f08:	2f ef       	ldi	r18, 0xFF	; 255
     f0a:	83 ed       	ldi	r24, 0xD3	; 211
     f0c:	90 e3       	ldi	r25, 0x30	; 48
     f0e:	21 50       	subi	r18, 0x01	; 1
     f10:	80 40       	sbci	r24, 0x00	; 0
     f12:	90 40       	sbci	r25, 0x00	; 0
     f14:	e1 f7       	brne	.-8      	; 0xf0e <LCD_Welcome_Message+0x1c>
     f16:	00 c0       	rjmp	.+0      	; 0xf18 <LCD_Welcome_Message+0x26>
     f18:	00 00       	nop
     f1a:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
     f1e:	08 95       	ret

00000f20 <LCD_Rooms_Leds_Control>:
     f20:	1f 93       	push	r17
     f22:	cf 93       	push	r28
     f24:	df 93       	push	r29
     f26:	8f e7       	ldi	r24, 0x7F	; 127
     f28:	91 e0       	ldi	r25, 0x01	; 1
     f2a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     f2e:	2f ef       	ldi	r18, 0xFF	; 255
     f30:	83 ed       	ldi	r24, 0xD3	; 211
     f32:	90 e3       	ldi	r25, 0x30	; 48
     f34:	21 50       	subi	r18, 0x01	; 1
     f36:	80 40       	sbci	r24, 0x00	; 0
     f38:	90 40       	sbci	r25, 0x00	; 0
     f3a:	e1 f7       	brne	.-8      	; 0xf34 <LCD_Rooms_Leds_Control+0x14>
     f3c:	00 c0       	rjmp	.+0      	; 0xf3e <LCD_Rooms_Leds_Control+0x1e>
     f3e:	00 00       	nop
     f40:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
     f44:	8e e8       	ldi	r24, 0x8E	; 142
     f46:	91 e0       	ldi	r25, 0x01	; 1
     f48:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     f4c:	80 ec       	ldi	r24, 0xC0	; 192
     f4e:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
     f52:	88 e9       	ldi	r24, 0x98	; 152
     f54:	91 e0       	ldi	r25, 0x01	; 1
     f56:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     f5a:	2f ef       	ldi	r18, 0xFF	; 255
     f5c:	89 e6       	ldi	r24, 0x69	; 105
     f5e:	98 e1       	ldi	r25, 0x18	; 24
     f60:	21 50       	subi	r18, 0x01	; 1
     f62:	80 40       	sbci	r24, 0x00	; 0
     f64:	90 40       	sbci	r25, 0x00	; 0
     f66:	e1 f7       	brne	.-8      	; 0xf60 <LCD_Rooms_Leds_Control+0x40>
     f68:	00 c0       	rjmp	.+0      	; 0xf6a <LCD_Rooms_Leds_Control+0x4a>
     f6a:	00 00       	nop
     f6c:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
     f70:	82 ea       	ldi	r24, 0xA2	; 162
     f72:	91 e0       	ldi	r25, 0x01	; 1
     f74:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     f78:	80 ec       	ldi	r24, 0xC0	; 192
     f7a:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
     f7e:	8c ea       	ldi	r24, 0xAC	; 172
     f80:	91 e0       	ldi	r25, 0x01	; 1
     f82:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     f86:	2f ef       	ldi	r18, 0xFF	; 255
     f88:	89 e6       	ldi	r24, 0x69	; 105
     f8a:	98 e1       	ldi	r25, 0x18	; 24
     f8c:	21 50       	subi	r18, 0x01	; 1
     f8e:	80 40       	sbci	r24, 0x00	; 0
     f90:	90 40       	sbci	r25, 0x00	; 0
     f92:	e1 f7       	brne	.-8      	; 0xf8c <LCD_Rooms_Leds_Control+0x6c>
     f94:	00 c0       	rjmp	.+0      	; 0xf96 <LCD_Rooms_Leds_Control+0x76>
     f96:	00 00       	nop
     f98:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
     f9c:	86 eb       	ldi	r24, 0xB6	; 182
     f9e:	91 e0       	ldi	r25, 0x01	; 1
     fa0:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     fa4:	80 ec       	ldi	r24, 0xC0	; 192
     fa6:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
     faa:	80 ec       	ldi	r24, 0xC0	; 192
     fac:	91 e0       	ldi	r25, 0x01	; 1
     fae:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     fb2:	2f ef       	ldi	r18, 0xFF	; 255
     fb4:	89 e6       	ldi	r24, 0x69	; 105
     fb6:	98 e1       	ldi	r25, 0x18	; 24
     fb8:	21 50       	subi	r18, 0x01	; 1
     fba:	80 40       	sbci	r24, 0x00	; 0
     fbc:	90 40       	sbci	r25, 0x00	; 0
     fbe:	e1 f7       	brne	.-8      	; 0xfb8 <LCD_Rooms_Leds_Control+0x98>
     fc0:	00 c0       	rjmp	.+0      	; 0xfc2 <LCD_Rooms_Leds_Control+0xa2>
     fc2:	00 00       	nop
     fc4:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
     fc8:	8d ec       	ldi	r24, 0xCD	; 205
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
     fd0:	8f e0       	ldi	r24, 0x0F	; 15
     fd2:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
     fd6:	0e 94 c4 05 	call	0xb88	; 0xb88 <Keypad_Get_Value>
     fda:	c8 2f       	mov	r28, r24
     fdc:	80 ed       	ldi	r24, 0xD0	; 208
     fde:	8c 0f       	add	r24, r28
     fe0:	8a 30       	cpi	r24, 0x0A	; 10
     fe2:	c8 f7       	brcc	.-14     	; 0xfd6 <LCD_Rooms_Leds_Control+0xb6>
     fe4:	8c 2f       	mov	r24, r28
     fe6:	0e 94 76 06 	call	0xcec	; 0xcec <LCD_Write_Char>
     fea:	2f ef       	ldi	r18, 0xFF	; 255
     fec:	89 e6       	ldi	r24, 0x69	; 105
     fee:	98 e1       	ldi	r25, 0x18	; 24
     ff0:	21 50       	subi	r18, 0x01	; 1
     ff2:	80 40       	sbci	r24, 0x00	; 0
     ff4:	90 40       	sbci	r25, 0x00	; 0
     ff6:	e1 f7       	brne	.-8      	; 0xff0 <LCD_Rooms_Leds_Control+0xd0>
     ff8:	00 c0       	rjmp	.+0      	; 0xffa <LCD_Rooms_Leds_Control+0xda>
     ffa:	00 00       	nop
     ffc:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    1000:	8f ec       	ldi	r24, 0xCF	; 207
    1002:	8c 0f       	add	r24, r28
    1004:	86 30       	cpi	r24, 0x06	; 6
    1006:	08 f4       	brcc	.+2      	; 0x100a <LCD_Rooms_Leds_Control+0xea>
    1008:	da c0       	rjmp	.+436    	; 0x11be <LCD_Rooms_Leds_Control+0x29e>
    100a:	8c ed       	ldi	r24, 0xDC	; 220
    100c:	91 e0       	ldi	r25, 0x01	; 1
    100e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    1012:	80 ec       	ldi	r24, 0xC0	; 192
    1014:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
    1018:	8f e9       	ldi	r24, 0x9F	; 159
    101a:	93 e0       	ldi	r25, 0x03	; 3
    101c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    1020:	2f ef       	ldi	r18, 0xFF	; 255
    1022:	83 ed       	ldi	r24, 0xD3	; 211
    1024:	90 e3       	ldi	r25, 0x30	; 48
    1026:	21 50       	subi	r18, 0x01	; 1
    1028:	80 40       	sbci	r24, 0x00	; 0
    102a:	90 40       	sbci	r25, 0x00	; 0
    102c:	e1 f7       	brne	.-8      	; 0x1026 <LCD_Rooms_Leds_Control+0x106>
    102e:	00 c0       	rjmp	.+0      	; 0x1030 <LCD_Rooms_Leds_Control+0x110>
    1030:	00 00       	nop
    1032:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    1036:	0e 94 c4 05 	call	0xb88	; 0xb88 <Keypad_Get_Value>
    103a:	c8 2f       	mov	r28, r24
    103c:	80 ed       	ldi	r24, 0xD0	; 208
    103e:	8c 0f       	add	r24, r28
    1040:	8a 30       	cpi	r24, 0x0A	; 10
    1042:	c8 f7       	brcc	.-14     	; 0x1036 <LCD_Rooms_Leds_Control+0x116>
    1044:	8c 2f       	mov	r24, r28
    1046:	0e 94 76 06 	call	0xcec	; 0xcec <LCD_Write_Char>
    104a:	2f ef       	ldi	r18, 0xFF	; 255
    104c:	89 e6       	ldi	r24, 0x69	; 105
    104e:	98 e1       	ldi	r25, 0x18	; 24
    1050:	21 50       	subi	r18, 0x01	; 1
    1052:	80 40       	sbci	r24, 0x00	; 0
    1054:	90 40       	sbci	r25, 0x00	; 0
    1056:	e1 f7       	brne	.-8      	; 0x1050 <LCD_Rooms_Leds_Control+0x130>
    1058:	00 c0       	rjmp	.+0      	; 0x105a <LCD_Rooms_Leds_Control+0x13a>
    105a:	00 00       	nop
    105c:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    1060:	8f ec       	ldi	r24, 0xCF	; 207
    1062:	8c 0f       	add	r24, r28
    1064:	86 30       	cpi	r24, 0x06	; 6
    1066:	88 f6       	brcc	.-94     	; 0x100a <LCD_Rooms_Leds_Control+0xea>
    1068:	aa c0       	rjmp	.+340    	; 0x11be <LCD_Rooms_Leds_Control+0x29e>
    106a:	0e 94 c4 05 	call	0xb88	; 0xb88 <Keypad_Get_Value>
    106e:	d8 2f       	mov	r29, r24
    1070:	10 ed       	ldi	r17, 0xD0	; 208
    1072:	18 0f       	add	r17, r24
    1074:	1a 30       	cpi	r17, 0x0A	; 10
    1076:	c8 f7       	brcc	.-14     	; 0x106a <LCD_Rooms_Leds_Control+0x14a>
    1078:	0e 94 76 06 	call	0xcec	; 0xcec <LCD_Write_Char>
    107c:	2f ef       	ldi	r18, 0xFF	; 255
    107e:	83 ed       	ldi	r24, 0xD3	; 211
    1080:	90 e3       	ldi	r25, 0x30	; 48
    1082:	21 50       	subi	r18, 0x01	; 1
    1084:	80 40       	sbci	r24, 0x00	; 0
    1086:	90 40       	sbci	r25, 0x00	; 0
    1088:	e1 f7       	brne	.-8      	; 0x1082 <LCD_Rooms_Leds_Control+0x162>
    108a:	00 c0       	rjmp	.+0      	; 0x108c <LCD_Rooms_Leds_Control+0x16c>
    108c:	00 00       	nop
    108e:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    1092:	12 30       	cpi	r17, 0x02	; 2
    1094:	80 f1       	brcs	.+96     	; 0x10f6 <LCD_Rooms_Leds_Control+0x1d6>
    1096:	8c ed       	ldi	r24, 0xDC	; 220
    1098:	91 e0       	ldi	r25, 0x01	; 1
    109a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    109e:	80 ec       	ldi	r24, 0xC0	; 192
    10a0:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
    10a4:	63 e0       	ldi	r22, 0x03	; 3
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_Set_Cursor>
    10ac:	82 ed       	ldi	r24, 0xD2	; 210
    10ae:	93 e0       	ldi	r25, 0x03	; 3
    10b0:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    10b4:	2f ef       	ldi	r18, 0xFF	; 255
    10b6:	83 ed       	ldi	r24, 0xD3	; 211
    10b8:	90 e3       	ldi	r25, 0x30	; 48
    10ba:	21 50       	subi	r18, 0x01	; 1
    10bc:	80 40       	sbci	r24, 0x00	; 0
    10be:	90 40       	sbci	r25, 0x00	; 0
    10c0:	e1 f7       	brne	.-8      	; 0x10ba <LCD_Rooms_Leds_Control+0x19a>
    10c2:	00 c0       	rjmp	.+0      	; 0x10c4 <LCD_Rooms_Leds_Control+0x1a4>
    10c4:	00 00       	nop
    10c6:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    10ca:	0e 94 c4 05 	call	0xb88	; 0xb88 <Keypad_Get_Value>
    10ce:	d8 2f       	mov	r29, r24
    10d0:	10 ed       	ldi	r17, 0xD0	; 208
    10d2:	18 0f       	add	r17, r24
    10d4:	1a 30       	cpi	r17, 0x0A	; 10
    10d6:	c8 f7       	brcc	.-14     	; 0x10ca <LCD_Rooms_Leds_Control+0x1aa>
    10d8:	0e 94 76 06 	call	0xcec	; 0xcec <LCD_Write_Char>
    10dc:	2f ef       	ldi	r18, 0xFF	; 255
    10de:	89 e6       	ldi	r24, 0x69	; 105
    10e0:	98 e1       	ldi	r25, 0x18	; 24
    10e2:	21 50       	subi	r18, 0x01	; 1
    10e4:	80 40       	sbci	r24, 0x00	; 0
    10e6:	90 40       	sbci	r25, 0x00	; 0
    10e8:	e1 f7       	brne	.-8      	; 0x10e2 <LCD_Rooms_Leds_Control+0x1c2>
    10ea:	00 c0       	rjmp	.+0      	; 0x10ec <LCD_Rooms_Leds_Control+0x1cc>
    10ec:	00 00       	nop
    10ee:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    10f2:	12 30       	cpi	r17, 0x02	; 2
    10f4:	80 f6       	brcc	.-96     	; 0x1096 <LCD_Rooms_Leds_Control+0x176>
    10f6:	c6 33       	cpi	r28, 0x36	; 54
    10f8:	09 f0       	breq	.+2      	; 0x10fc <LCD_Rooms_Leds_Control+0x1dc>
    10fa:	58 c0       	rjmp	.+176    	; 0x11ac <LCD_Rooms_Leds_Control+0x28c>
    10fc:	d1 33       	cpi	r29, 0x31	; 49
    10fe:	59 f5       	brne	.+86     	; 0x1156 <LCD_Rooms_Leds_Control+0x236>
    1100:	61 e3       	ldi	r22, 0x31	; 49
    1102:	81 e3       	ldi	r24, 0x31	; 49
    1104:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <LED_STAT>
    1108:	62 e3       	ldi	r22, 0x32	; 50
    110a:	81 e3       	ldi	r24, 0x31	; 49
    110c:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <LED_STAT>
    1110:	63 e3       	ldi	r22, 0x33	; 51
    1112:	81 e3       	ldi	r24, 0x31	; 49
    1114:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <LED_STAT>
    1118:	64 e3       	ldi	r22, 0x34	; 52
    111a:	81 e3       	ldi	r24, 0x31	; 49
    111c:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <LED_STAT>
    1120:	65 e3       	ldi	r22, 0x35	; 53
    1122:	81 e3       	ldi	r24, 0x31	; 49
    1124:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <LED_STAT>
    1128:	8a ee       	ldi	r24, 0xEA	; 234
    112a:	91 e0       	ldi	r25, 0x01	; 1
    112c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    1130:	80 ec       	ldi	r24, 0xC0	; 192
    1132:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
    1136:	86 ee       	ldi	r24, 0xE6	; 230
    1138:	93 e0       	ldi	r25, 0x03	; 3
    113a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    113e:	2f ef       	ldi	r18, 0xFF	; 255
    1140:	83 ed       	ldi	r24, 0xD3	; 211
    1142:	90 e3       	ldi	r25, 0x30	; 48
    1144:	21 50       	subi	r18, 0x01	; 1
    1146:	80 40       	sbci	r24, 0x00	; 0
    1148:	90 40       	sbci	r25, 0x00	; 0
    114a:	e1 f7       	brne	.-8      	; 0x1144 <LCD_Rooms_Leds_Control+0x224>
    114c:	00 c0       	rjmp	.+0      	; 0x114e <LCD_Rooms_Leds_Control+0x22e>
    114e:	00 00       	nop
    1150:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    1154:	4e c0       	rjmp	.+156    	; 0x11f2 <LCD_Rooms_Leds_Control+0x2d2>
    1156:	61 e3       	ldi	r22, 0x31	; 49
    1158:	80 e3       	ldi	r24, 0x30	; 48
    115a:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <LED_STAT>
    115e:	62 e3       	ldi	r22, 0x32	; 50
    1160:	80 e3       	ldi	r24, 0x30	; 48
    1162:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <LED_STAT>
    1166:	63 e3       	ldi	r22, 0x33	; 51
    1168:	80 e3       	ldi	r24, 0x30	; 48
    116a:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <LED_STAT>
    116e:	64 e3       	ldi	r22, 0x34	; 52
    1170:	80 e3       	ldi	r24, 0x30	; 48
    1172:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <LED_STAT>
    1176:	65 e3       	ldi	r22, 0x35	; 53
    1178:	80 e3       	ldi	r24, 0x30	; 48
    117a:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <LED_STAT>
    117e:	8a ee       	ldi	r24, 0xEA	; 234
    1180:	91 e0       	ldi	r25, 0x01	; 1
    1182:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    1186:	80 ec       	ldi	r24, 0xC0	; 192
    1188:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
    118c:	88 ef       	ldi	r24, 0xF8	; 248
    118e:	91 e0       	ldi	r25, 0x01	; 1
    1190:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    1194:	2f ef       	ldi	r18, 0xFF	; 255
    1196:	83 ed       	ldi	r24, 0xD3	; 211
    1198:	90 e3       	ldi	r25, 0x30	; 48
    119a:	21 50       	subi	r18, 0x01	; 1
    119c:	80 40       	sbci	r24, 0x00	; 0
    119e:	90 40       	sbci	r25, 0x00	; 0
    11a0:	e1 f7       	brne	.-8      	; 0x119a <LCD_Rooms_Leds_Control+0x27a>
    11a2:	00 c0       	rjmp	.+0      	; 0x11a4 <LCD_Rooms_Leds_Control+0x284>
    11a4:	00 00       	nop
    11a6:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    11aa:	23 c0       	rjmp	.+70     	; 0x11f2 <LCD_Rooms_Leds_Control+0x2d2>
    11ac:	6c 2f       	mov	r22, r28
    11ae:	8d 2f       	mov	r24, r29
    11b0:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <LED_STAT>
    11b4:	6d 2f       	mov	r22, r29
    11b6:	8c 2f       	mov	r24, r28
    11b8:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Display_LED>
    11bc:	1a c0       	rjmp	.+52     	; 0x11f2 <LCD_Rooms_Leds_Control+0x2d2>
    11be:	8c e0       	ldi	r24, 0x0C	; 12
    11c0:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
    11c4:	83 e0       	ldi	r24, 0x03	; 3
    11c6:	92 e0       	ldi	r25, 0x02	; 2
    11c8:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    11cc:	80 ec       	ldi	r24, 0xC0	; 192
    11ce:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
    11d2:	8f e0       	ldi	r24, 0x0F	; 15
    11d4:	92 e0       	ldi	r25, 0x02	; 2
    11d6:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    11da:	2f ef       	ldi	r18, 0xFF	; 255
    11dc:	87 ea       	ldi	r24, 0xA7	; 167
    11de:	91 e6       	ldi	r25, 0x61	; 97
    11e0:	21 50       	subi	r18, 0x01	; 1
    11e2:	80 40       	sbci	r24, 0x00	; 0
    11e4:	90 40       	sbci	r25, 0x00	; 0
    11e6:	e1 f7       	brne	.-8      	; 0x11e0 <LCD_Rooms_Leds_Control+0x2c0>
    11e8:	00 c0       	rjmp	.+0      	; 0x11ea <LCD_Rooms_Leds_Control+0x2ca>
    11ea:	00 00       	nop
    11ec:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    11f0:	3c cf       	rjmp	.-392    	; 0x106a <LCD_Rooms_Leds_Control+0x14a>
    11f2:	df 91       	pop	r29
    11f4:	cf 91       	pop	r28
    11f6:	1f 91       	pop	r17
    11f8:	08 95       	ret

000011fa <LCD_User_Menu>:
    11fa:	8c e1       	ldi	r24, 0x1C	; 28
    11fc:	92 e0       	ldi	r25, 0x02	; 2
    11fe:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    1202:	80 ec       	ldi	r24, 0xC0	; 192
    1204:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
    1208:	8b e2       	ldi	r24, 0x2B	; 43
    120a:	92 e0       	ldi	r25, 0x02	; 2
    120c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    1210:	2f ef       	ldi	r18, 0xFF	; 255
    1212:	89 e6       	ldi	r24, 0x69	; 105
    1214:	98 e1       	ldi	r25, 0x18	; 24
    1216:	21 50       	subi	r18, 0x01	; 1
    1218:	80 40       	sbci	r24, 0x00	; 0
    121a:	90 40       	sbci	r25, 0x00	; 0
    121c:	e1 f7       	brne	.-8      	; 0x1216 <LCD_User_Menu+0x1c>
    121e:	00 c0       	rjmp	.+0      	; 0x1220 <LCD_User_Menu+0x26>
    1220:	00 00       	nop
    1222:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    1226:	8a e3       	ldi	r24, 0x3A	; 58
    1228:	92 e0       	ldi	r25, 0x02	; 2
    122a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    122e:	80 ec       	ldi	r24, 0xC0	; 192
    1230:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
    1234:	8b e4       	ldi	r24, 0x4B	; 75
    1236:	92 e0       	ldi	r25, 0x02	; 2
    1238:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    123c:	2f ef       	ldi	r18, 0xFF	; 255
    123e:	89 e6       	ldi	r24, 0x69	; 105
    1240:	98 e1       	ldi	r25, 0x18	; 24
    1242:	21 50       	subi	r18, 0x01	; 1
    1244:	80 40       	sbci	r24, 0x00	; 0
    1246:	90 40       	sbci	r25, 0x00	; 0
    1248:	e1 f7       	brne	.-8      	; 0x1242 <LCD_User_Menu+0x48>
    124a:	00 c0       	rjmp	.+0      	; 0x124c <LCD_User_Menu+0x52>
    124c:	00 00       	nop
    124e:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    1252:	08 95       	ret

00001254 <LCD_User_Interfacing>:
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	0e 94 fd 08 	call	0x11fa	; 0x11fa <LCD_User_Menu>
    125c:	8d ec       	ldi	r24, 0xCD	; 205
    125e:	91 e0       	ldi	r25, 0x01	; 1
    1260:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    1264:	8f e0       	ldi	r24, 0x0F	; 15
    1266:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
    126a:	0e 94 c4 05 	call	0xb88	; 0xb88 <Keypad_Get_Value>
    126e:	c8 2f       	mov	r28, r24
    1270:	80 ed       	ldi	r24, 0xD0	; 208
    1272:	8c 0f       	add	r24, r28
    1274:	8a 30       	cpi	r24, 0x0A	; 10
    1276:	c8 f7       	brcc	.-14     	; 0x126a <LCD_User_Interfacing+0x16>
    1278:	8c 2f       	mov	r24, r28
    127a:	0e 94 76 06 	call	0xcec	; 0xcec <LCD_Write_Char>
    127e:	2f ef       	ldi	r18, 0xFF	; 255
    1280:	89 e6       	ldi	r24, 0x69	; 105
    1282:	98 e1       	ldi	r25, 0x18	; 24
    1284:	21 50       	subi	r18, 0x01	; 1
    1286:	80 40       	sbci	r24, 0x00	; 0
    1288:	90 40       	sbci	r25, 0x00	; 0
    128a:	e1 f7       	brne	.-8      	; 0x1284 <LCD_User_Interfacing+0x30>
    128c:	00 c0       	rjmp	.+0      	; 0x128e <LCD_User_Interfacing+0x3a>
    128e:	00 00       	nop
    1290:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    1294:	8f ec       	ldi	r24, 0xCF	; 207
    1296:	8c 0f       	add	r24, r28
    1298:	84 30       	cpi	r24, 0x04	; 4
    129a:	d8 f1       	brcs	.+118    	; 0x1312 <LCD_User_Interfacing+0xbe>
    129c:	8e e0       	ldi	r24, 0x0E	; 14
    129e:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
    12a2:	8c ed       	ldi	r24, 0xDC	; 220
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    12aa:	80 ec       	ldi	r24, 0xC0	; 192
    12ac:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
    12b0:	8f ea       	ldi	r24, 0xAF	; 175
    12b2:	97 e0       	ldi	r25, 0x07	; 7
    12b4:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    12b8:	2f ef       	ldi	r18, 0xFF	; 255
    12ba:	83 ed       	ldi	r24, 0xD3	; 211
    12bc:	90 e3       	ldi	r25, 0x30	; 48
    12be:	21 50       	subi	r18, 0x01	; 1
    12c0:	80 40       	sbci	r24, 0x00	; 0
    12c2:	90 40       	sbci	r25, 0x00	; 0
    12c4:	e1 f7       	brne	.-8      	; 0x12be <LCD_User_Interfacing+0x6a>
    12c6:	00 c0       	rjmp	.+0      	; 0x12c8 <LCD_User_Interfacing+0x74>
    12c8:	00 00       	nop
    12ca:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    12ce:	0e 94 fd 08 	call	0x11fa	; 0x11fa <LCD_User_Menu>
    12d2:	8d ec       	ldi	r24, 0xCD	; 205
    12d4:	91 e0       	ldi	r25, 0x01	; 1
    12d6:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    12da:	8f e0       	ldi	r24, 0x0F	; 15
    12dc:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
    12e0:	0e 94 c4 05 	call	0xb88	; 0xb88 <Keypad_Get_Value>
    12e4:	c8 2f       	mov	r28, r24
    12e6:	80 ed       	ldi	r24, 0xD0	; 208
    12e8:	8c 0f       	add	r24, r28
    12ea:	8a 30       	cpi	r24, 0x0A	; 10
    12ec:	c8 f7       	brcc	.-14     	; 0x12e0 <LCD_User_Interfacing+0x8c>
    12ee:	8c 2f       	mov	r24, r28
    12f0:	0e 94 76 06 	call	0xcec	; 0xcec <LCD_Write_Char>
    12f4:	2f ef       	ldi	r18, 0xFF	; 255
    12f6:	89 e6       	ldi	r24, 0x69	; 105
    12f8:	98 e1       	ldi	r25, 0x18	; 24
    12fa:	21 50       	subi	r18, 0x01	; 1
    12fc:	80 40       	sbci	r24, 0x00	; 0
    12fe:	90 40       	sbci	r25, 0x00	; 0
    1300:	e1 f7       	brne	.-8      	; 0x12fa <LCD_User_Interfacing+0xa6>
    1302:	00 c0       	rjmp	.+0      	; 0x1304 <LCD_User_Interfacing+0xb0>
    1304:	00 00       	nop
    1306:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    130a:	8f ec       	ldi	r24, 0xCF	; 207
    130c:	8c 0f       	add	r24, r28
    130e:	84 30       	cpi	r24, 0x04	; 4
    1310:	28 f6       	brcc	.-118    	; 0x129c <LCD_User_Interfacing+0x48>
    1312:	8c e0       	ldi	r24, 0x0C	; 12
    1314:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
    1318:	c1 33       	cpi	r28, 0x31	; 49
    131a:	19 f4       	brne	.+6      	; 0x1322 <LCD_User_Interfacing+0xce>
    131c:	0e 94 90 07 	call	0xf20	; 0xf20 <LCD_Rooms_Leds_Control>
    1320:	9b cf       	rjmp	.-202    	; 0x1258 <LCD_User_Interfacing+0x4>
    1322:	c2 33       	cpi	r28, 0x32	; 50
    1324:	09 f0       	breq	.+2      	; 0x1328 <LCD_User_Interfacing+0xd4>
    1326:	b4 c0       	rjmp	.+360    	; 0x1490 <LCD_User_Interfacing+0x23c>
    1328:	84 e5       	ldi	r24, 0x54	; 84
    132a:	92 e0       	ldi	r25, 0x02	; 2
    132c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    1330:	80 ec       	ldi	r24, 0xC0	; 192
    1332:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
    1336:	83 e6       	ldi	r24, 0x63	; 99
    1338:	92 e0       	ldi	r25, 0x02	; 2
    133a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    133e:	2f ef       	ldi	r18, 0xFF	; 255
    1340:	89 e6       	ldi	r24, 0x69	; 105
    1342:	98 e1       	ldi	r25, 0x18	; 24
    1344:	21 50       	subi	r18, 0x01	; 1
    1346:	80 40       	sbci	r24, 0x00	; 0
    1348:	90 40       	sbci	r25, 0x00	; 0
    134a:	e1 f7       	brne	.-8      	; 0x1344 <LCD_User_Interfacing+0xf0>
    134c:	00 c0       	rjmp	.+0      	; 0x134e <LCD_User_Interfacing+0xfa>
    134e:	00 00       	nop
    1350:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    1354:	83 e7       	ldi	r24, 0x73	; 115
    1356:	92 e0       	ldi	r25, 0x02	; 2
    1358:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    135c:	80 ec       	ldi	r24, 0xC0	; 192
    135e:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
    1362:	80 e8       	ldi	r24, 0x80	; 128
    1364:	92 e0       	ldi	r25, 0x02	; 2
    1366:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    136a:	2f ef       	ldi	r18, 0xFF	; 255
    136c:	89 e6       	ldi	r24, 0x69	; 105
    136e:	98 e1       	ldi	r25, 0x18	; 24
    1370:	21 50       	subi	r18, 0x01	; 1
    1372:	80 40       	sbci	r24, 0x00	; 0
    1374:	90 40       	sbci	r25, 0x00	; 0
    1376:	e1 f7       	brne	.-8      	; 0x1370 <LCD_User_Interfacing+0x11c>
    1378:	00 c0       	rjmp	.+0      	; 0x137a <LCD_User_Interfacing+0x126>
    137a:	00 00       	nop
    137c:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    1380:	89 e8       	ldi	r24, 0x89	; 137
    1382:	92 e0       	ldi	r25, 0x02	; 2
    1384:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    1388:	80 ec       	ldi	r24, 0xC0	; 192
    138a:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
    138e:	82 e9       	ldi	r24, 0x92	; 146
    1390:	92 e0       	ldi	r25, 0x02	; 2
    1392:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    1396:	2f ef       	ldi	r18, 0xFF	; 255
    1398:	89 e6       	ldi	r24, 0x69	; 105
    139a:	98 e1       	ldi	r25, 0x18	; 24
    139c:	21 50       	subi	r18, 0x01	; 1
    139e:	80 40       	sbci	r24, 0x00	; 0
    13a0:	90 40       	sbci	r25, 0x00	; 0
    13a2:	e1 f7       	brne	.-8      	; 0x139c <LCD_User_Interfacing+0x148>
    13a4:	00 c0       	rjmp	.+0      	; 0x13a6 <LCD_User_Interfacing+0x152>
    13a6:	00 00       	nop
    13a8:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    13ac:	8b e9       	ldi	r24, 0x9B	; 155
    13ae:	92 e0       	ldi	r25, 0x02	; 2
    13b0:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    13b4:	80 ec       	ldi	r24, 0xC0	; 192
    13b6:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
    13ba:	8a e5       	ldi	r24, 0x5A	; 90
    13bc:	95 e0       	ldi	r25, 0x05	; 5
    13be:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    13c2:	2f ef       	ldi	r18, 0xFF	; 255
    13c4:	89 e6       	ldi	r24, 0x69	; 105
    13c6:	98 e1       	ldi	r25, 0x18	; 24
    13c8:	21 50       	subi	r18, 0x01	; 1
    13ca:	80 40       	sbci	r24, 0x00	; 0
    13cc:	90 40       	sbci	r25, 0x00	; 0
    13ce:	e1 f7       	brne	.-8      	; 0x13c8 <LCD_User_Interfacing+0x174>
    13d0:	00 c0       	rjmp	.+0      	; 0x13d2 <LCD_User_Interfacing+0x17e>
    13d2:	00 00       	nop
    13d4:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    13d8:	8d ec       	ldi	r24, 0xCD	; 205
    13da:	91 e0       	ldi	r25, 0x01	; 1
    13dc:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    13e0:	8f e0       	ldi	r24, 0x0F	; 15
    13e2:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
    13e6:	0e 94 c4 05 	call	0xb88	; 0xb88 <Keypad_Get_Value>
    13ea:	c8 2f       	mov	r28, r24
    13ec:	d0 ed       	ldi	r29, 0xD0	; 208
    13ee:	d8 0f       	add	r29, r24
    13f0:	da 30       	cpi	r29, 0x0A	; 10
    13f2:	c8 f7       	brcc	.-14     	; 0x13e6 <LCD_User_Interfacing+0x192>
    13f4:	0e 94 76 06 	call	0xcec	; 0xcec <LCD_Write_Char>
    13f8:	2f ef       	ldi	r18, 0xFF	; 255
    13fa:	89 e6       	ldi	r24, 0x69	; 105
    13fc:	98 e1       	ldi	r25, 0x18	; 24
    13fe:	21 50       	subi	r18, 0x01	; 1
    1400:	80 40       	sbci	r24, 0x00	; 0
    1402:	90 40       	sbci	r25, 0x00	; 0
    1404:	e1 f7       	brne	.-8      	; 0x13fe <LCD_User_Interfacing+0x1aa>
    1406:	00 c0       	rjmp	.+0      	; 0x1408 <LCD_User_Interfacing+0x1b4>
    1408:	00 00       	nop
    140a:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    140e:	d5 30       	cpi	r29, 0x05	; 5
    1410:	c0 f1       	brcs	.+112    	; 0x1482 <LCD_User_Interfacing+0x22e>
    1412:	8e e0       	ldi	r24, 0x0E	; 14
    1414:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
    1418:	8c ed       	ldi	r24, 0xDC	; 220
    141a:	91 e0       	ldi	r25, 0x01	; 1
    141c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    1420:	80 ec       	ldi	r24, 0xC0	; 192
    1422:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
    1426:	8d e7       	ldi	r24, 0x7D	; 125
    1428:	95 e0       	ldi	r25, 0x05	; 5
    142a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    142e:	2f ef       	ldi	r18, 0xFF	; 255
    1430:	83 ed       	ldi	r24, 0xD3	; 211
    1432:	90 e3       	ldi	r25, 0x30	; 48
    1434:	21 50       	subi	r18, 0x01	; 1
    1436:	80 40       	sbci	r24, 0x00	; 0
    1438:	90 40       	sbci	r25, 0x00	; 0
    143a:	e1 f7       	brne	.-8      	; 0x1434 <LCD_User_Interfacing+0x1e0>
    143c:	00 c0       	rjmp	.+0      	; 0x143e <LCD_User_Interfacing+0x1ea>
    143e:	00 00       	nop
    1440:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    1444:	0e 94 fd 08 	call	0x11fa	; 0x11fa <LCD_User_Menu>
    1448:	8d ec       	ldi	r24, 0xCD	; 205
    144a:	91 e0       	ldi	r25, 0x01	; 1
    144c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    1450:	8f e0       	ldi	r24, 0x0F	; 15
    1452:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
    1456:	0e 94 c4 05 	call	0xb88	; 0xb88 <Keypad_Get_Value>
    145a:	c8 2f       	mov	r28, r24
    145c:	d0 ed       	ldi	r29, 0xD0	; 208
    145e:	d8 0f       	add	r29, r24
    1460:	da 30       	cpi	r29, 0x0A	; 10
    1462:	c8 f7       	brcc	.-14     	; 0x1456 <LCD_User_Interfacing+0x202>
    1464:	0e 94 76 06 	call	0xcec	; 0xcec <LCD_Write_Char>
    1468:	2f ef       	ldi	r18, 0xFF	; 255
    146a:	89 e6       	ldi	r24, 0x69	; 105
    146c:	98 e1       	ldi	r25, 0x18	; 24
    146e:	21 50       	subi	r18, 0x01	; 1
    1470:	80 40       	sbci	r24, 0x00	; 0
    1472:	90 40       	sbci	r25, 0x00	; 0
    1474:	e1 f7       	brne	.-8      	; 0x146e <LCD_User_Interfacing+0x21a>
    1476:	00 c0       	rjmp	.+0      	; 0x1478 <LCD_User_Interfacing+0x224>
    1478:	00 00       	nop
    147a:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    147e:	d5 30       	cpi	r29, 0x05	; 5
    1480:	40 f6       	brcc	.-112    	; 0x1412 <LCD_User_Interfacing+0x1be>
    1482:	8c e0       	ldi	r24, 0x0C	; 12
    1484:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
    1488:	8c 2f       	mov	r24, r28
    148a:	0e 94 c5 0a 	call	0x158a	; 0x158a <DIMMER_CONTROL>
    148e:	e4 ce       	rjmp	.-568    	; 0x1258 <LCD_User_Interfacing+0x4>
    1490:	c3 33       	cpi	r28, 0x33	; 51
    1492:	c9 f4       	brne	.+50     	; 0x14c6 <LCD_User_Interfacing+0x272>
    1494:	0e 94 01 0b 	call	0x1602	; 0x1602 <closeDoor>
    1498:	85 ea       	ldi	r24, 0xA5	; 165
    149a:	92 e0       	ldi	r25, 0x02	; 2
    149c:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    14a0:	80 ec       	ldi	r24, 0xC0	; 192
    14a2:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
    14a6:	83 eb       	ldi	r24, 0xB3	; 179
    14a8:	92 e0       	ldi	r25, 0x02	; 2
    14aa:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    14ae:	2f ef       	ldi	r18, 0xFF	; 255
    14b0:	83 ed       	ldi	r24, 0xD3	; 211
    14b2:	90 e3       	ldi	r25, 0x30	; 48
    14b4:	21 50       	subi	r18, 0x01	; 1
    14b6:	80 40       	sbci	r24, 0x00	; 0
    14b8:	90 40       	sbci	r25, 0x00	; 0
    14ba:	e1 f7       	brne	.-8      	; 0x14b4 <LCD_User_Interfacing+0x260>
    14bc:	00 c0       	rjmp	.+0      	; 0x14be <LCD_User_Interfacing+0x26a>
    14be:	00 00       	nop
    14c0:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    14c4:	c9 ce       	rjmp	.-622    	; 0x1258 <LCD_User_Interfacing+0x4>
    14c6:	c4 33       	cpi	r28, 0x34	; 52
    14c8:	09 f0       	breq	.+2      	; 0x14cc <LCD_User_Interfacing+0x278>
    14ca:	c6 ce       	rjmp	.-628    	; 0x1258 <LCD_User_Interfacing+0x4>
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	08 95       	ret

000014d2 <BUZZER_START>:
    14d2:	8f 9a       	sbi	0x11, 7	; 17
    14d4:	08 95       	ret

000014d6 <LED_START>:
    14d6:	b8 9a       	sbi	0x17, 0	; 23
    14d8:	b9 9a       	sbi	0x17, 1	; 23
    14da:	a2 9a       	sbi	0x14, 2	; 20
    14dc:	a3 9a       	sbi	0x14, 3	; 20
    14de:	8e 9a       	sbi	0x11, 6	; 17
    14e0:	ba 9a       	sbi	0x17, 2	; 23
    14e2:	08 95       	ret

000014e4 <LED_STAT>:
    14e4:	81 33       	cpi	r24, 0x31	; 49
    14e6:	a1 f4       	brne	.+40     	; 0x1510 <LED_STAT+0x2c>
    14e8:	61 33       	cpi	r22, 0x31	; 49
    14ea:	11 f4       	brne	.+4      	; 0x14f0 <LED_STAT+0xc>
    14ec:	c0 9a       	sbi	0x18, 0	; 24
    14ee:	08 95       	ret
    14f0:	62 33       	cpi	r22, 0x32	; 50
    14f2:	11 f4       	brne	.+4      	; 0x14f8 <LED_STAT+0x14>
    14f4:	c1 9a       	sbi	0x18, 1	; 24
    14f6:	08 95       	ret
    14f8:	63 33       	cpi	r22, 0x33	; 51
    14fa:	11 f4       	brne	.+4      	; 0x1500 <LED_STAT+0x1c>
    14fc:	aa 9a       	sbi	0x15, 2	; 21
    14fe:	08 95       	ret
    1500:	64 33       	cpi	r22, 0x34	; 52
    1502:	11 f4       	brne	.+4      	; 0x1508 <LED_STAT+0x24>
    1504:	ab 9a       	sbi	0x15, 3	; 21
    1506:	08 95       	ret
    1508:	65 33       	cpi	r22, 0x35	; 53
    150a:	b9 f4       	brne	.+46     	; 0x153a <LED_STAT+0x56>
    150c:	96 9a       	sbi	0x12, 6	; 18
    150e:	08 95       	ret
    1510:	80 33       	cpi	r24, 0x30	; 48
    1512:	99 f4       	brne	.+38     	; 0x153a <LED_STAT+0x56>
    1514:	61 33       	cpi	r22, 0x31	; 49
    1516:	11 f4       	brne	.+4      	; 0x151c <LED_STAT+0x38>
    1518:	c0 98       	cbi	0x18, 0	; 24
    151a:	08 95       	ret
    151c:	62 33       	cpi	r22, 0x32	; 50
    151e:	11 f4       	brne	.+4      	; 0x1524 <LED_STAT+0x40>
    1520:	c1 98       	cbi	0x18, 1	; 24
    1522:	08 95       	ret
    1524:	63 33       	cpi	r22, 0x33	; 51
    1526:	11 f4       	brne	.+4      	; 0x152c <LED_STAT+0x48>
    1528:	aa 98       	cbi	0x15, 2	; 21
    152a:	08 95       	ret
    152c:	64 33       	cpi	r22, 0x34	; 52
    152e:	11 f4       	brne	.+4      	; 0x1534 <LED_STAT+0x50>
    1530:	ab 98       	cbi	0x15, 3	; 21
    1532:	08 95       	ret
    1534:	65 33       	cpi	r22, 0x35	; 53
    1536:	09 f4       	brne	.+2      	; 0x153a <LED_STAT+0x56>
    1538:	96 98       	cbi	0x12, 6	; 18
    153a:	08 95       	ret

0000153c <Alarm_On>:
    153c:	51 e0       	ldi	r21, 0x01	; 1
    153e:	42 e0       	ldi	r20, 0x02	; 2
    1540:	34 e0       	ldi	r19, 0x04	; 4
    1542:	28 e0       	ldi	r18, 0x08	; 8
    1544:	90 e4       	ldi	r25, 0x40	; 64
    1546:	97 9a       	sbi	0x12, 7	; 18
    1548:	88 b3       	in	r24, 0x18	; 24
    154a:	85 27       	eor	r24, r21
    154c:	88 bb       	out	0x18, r24	; 24
    154e:	88 b3       	in	r24, 0x18	; 24
    1550:	84 27       	eor	r24, r20
    1552:	88 bb       	out	0x18, r24	; 24
    1554:	85 b3       	in	r24, 0x15	; 21
    1556:	83 27       	eor	r24, r19
    1558:	85 bb       	out	0x15, r24	; 21
    155a:	85 b3       	in	r24, 0x15	; 21
    155c:	82 27       	eor	r24, r18
    155e:	85 bb       	out	0x15, r24	; 21
    1560:	82 b3       	in	r24, 0x12	; 18
    1562:	89 27       	eor	r24, r25
    1564:	82 bb       	out	0x12, r24	; 18
    1566:	6f ef       	ldi	r22, 0xFF	; 255
    1568:	79 e6       	ldi	r23, 0x69	; 105
    156a:	88 e1       	ldi	r24, 0x18	; 24
    156c:	61 50       	subi	r22, 0x01	; 1
    156e:	70 40       	sbci	r23, 0x00	; 0
    1570:	80 40       	sbci	r24, 0x00	; 0
    1572:	e1 f7       	brne	.-8      	; 0x156c <Alarm_On+0x30>
    1574:	00 c0       	rjmp	.+0      	; 0x1576 <Alarm_On+0x3a>
    1576:	00 00       	nop
    1578:	e6 cf       	rjmp	.-52     	; 0x1546 <Alarm_On+0xa>

0000157a <DIMMER_Init>:
    157a:	bb 9a       	sbi	0x17, 3	; 23
    157c:	22 e3       	ldi	r18, 0x32	; 50
    157e:	42 e3       	ldi	r20, 0x32	; 50
    1580:	61 e3       	ldi	r22, 0x31	; 49
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	0e 94 06 0b 	call	0x160c	; 0x160c <Timer>
    1588:	08 95       	ret

0000158a <DIMMER_CONTROL>:
    158a:	80 33       	cpi	r24, 0x30	; 48
    158c:	11 f4       	brne	.+4      	; 0x1592 <DIMMER_CONTROL+0x8>
    158e:	1c be       	out	0x3c, r1	; 60
    1590:	08 95       	ret
    1592:	81 33       	cpi	r24, 0x31	; 49
    1594:	19 f4       	brne	.+6      	; 0x159c <DIMMER_CONTROL+0x12>
    1596:	8f e3       	ldi	r24, 0x3F	; 63
    1598:	8c bf       	out	0x3c, r24	; 60
    159a:	08 95       	ret
    159c:	82 33       	cpi	r24, 0x32	; 50
    159e:	19 f4       	brne	.+6      	; 0x15a6 <DIMMER_CONTROL+0x1c>
    15a0:	8f e7       	ldi	r24, 0x7F	; 127
    15a2:	8c bf       	out	0x3c, r24	; 60
    15a4:	08 95       	ret
    15a6:	83 33       	cpi	r24, 0x33	; 51
    15a8:	19 f4       	brne	.+6      	; 0x15b0 <DIMMER_CONTROL+0x26>
    15aa:	8f eb       	ldi	r24, 0xBF	; 191
    15ac:	8c bf       	out	0x3c, r24	; 60
    15ae:	08 95       	ret
    15b0:	84 33       	cpi	r24, 0x34	; 52
    15b2:	11 f4       	brne	.+4      	; 0x15b8 <DIMMER_CONTROL+0x2e>
    15b4:	8f ef       	ldi	r24, 0xFF	; 255
    15b6:	8c bf       	out	0x3c, r24	; 60
    15b8:	08 95       	ret

000015ba <main>:



int main(void)
{
	App_Initialization();	// Initialization of all peripherals in the application (system)	
    15ba:	0e 94 19 02 	call	0x432	; 0x432 <App_Initialization>
	EEPROM_Save_Main_Admin();	// Save Admin 
    15be:	0e 94 c8 04 	call	0x990	; 0x990 <EEPROM_Save_Main_Admin>
	EEPROM_Write_0_Counters();	// Writing 0 on the bits of counters if the system is operated for the first time
    15c2:	0e 94 e6 04 	call	0x9cc	; 0x9cc <EEPROM_Write_0_Counters>
	UART_Welcome_Message();
    15c6:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <UART_Welcome_Message>
	
	while (1)
	{
		App();	
    15ca:	0e 94 36 02 	call	0x46c	; 0x46c <App>
    15ce:	fd cf       	rjmp	.-6      	; 0x15ca <main+0x10>

000015d0 <Sensor_ON>:
    15d0:	d3 98       	cbi	0x1a, 3	; 26
    15d2:	08 95       	ret

000015d4 <Servo_Initialization>:
    15d4:	8d 9a       	sbi	0x11, 5	; 17
    15d6:	22 e3       	ldi	r18, 0x32	; 50
    15d8:	42 e3       	ldi	r20, 0x32	; 50
    15da:	62 e3       	ldi	r22, 0x32	; 50
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	0e 94 06 0b 	call	0x160c	; 0x160c <Timer>
    15e2:	8f e3       	ldi	r24, 0x3F	; 63
    15e4:	9c e9       	ldi	r25, 0x9C	; 156
    15e6:	97 bd       	out	0x27, r25	; 39
    15e8:	86 bd       	out	0x26, r24	; 38
    15ea:	1d bc       	out	0x2d, r1	; 45
    15ec:	1c bc       	out	0x2c, r1	; 44
    15ee:	87 eb       	ldi	r24, 0xB7	; 183
    15f0:	9b e0       	ldi	r25, 0x0B	; 11
    15f2:	9b bd       	out	0x2b, r25	; 43
    15f4:	8a bd       	out	0x2a, r24	; 42
    15f6:	08 95       	ret

000015f8 <openDoor>:
    15f8:	82 e8       	ldi	r24, 0x82	; 130
    15fa:	94 e1       	ldi	r25, 0x14	; 20
    15fc:	9b bd       	out	0x2b, r25	; 43
    15fe:	8a bd       	out	0x2a, r24	; 42
    1600:	08 95       	ret

00001602 <closeDoor>:
    1602:	87 eb       	ldi	r24, 0xB7	; 183
    1604:	9b e0       	ldi	r25, 0x0B	; 11
    1606:	9b bd       	out	0x2b, r25	; 43
    1608:	8a bd       	out	0x2a, r24	; 42
    160a:	08 95       	ret

0000160c <Timer>:
    160c:	81 11       	cpse	r24, r1
    160e:	86 c0       	rjmp	.+268    	; 0x171c <Timer+0x110>
    1610:	20 33       	cpi	r18, 0x30	; 48
    1612:	51 f4       	brne	.+20     	; 0x1628 <Timer+0x1c>
    1614:	83 b7       	in	r24, 0x33	; 51
    1616:	8e 7f       	andi	r24, 0xFE	; 254
    1618:	83 bf       	out	0x33, r24	; 51
    161a:	83 b7       	in	r24, 0x33	; 51
    161c:	8d 7f       	andi	r24, 0xFD	; 253
    161e:	83 bf       	out	0x33, r24	; 51
    1620:	83 b7       	in	r24, 0x33	; 51
    1622:	8b 7f       	andi	r24, 0xFB	; 251
    1624:	83 bf       	out	0x33, r24	; 51
    1626:	3b c0       	rjmp	.+118    	; 0x169e <Timer+0x92>
    1628:	21 33       	cpi	r18, 0x31	; 49
    162a:	51 f4       	brne	.+20     	; 0x1640 <Timer+0x34>
    162c:	83 b7       	in	r24, 0x33	; 51
    162e:	81 60       	ori	r24, 0x01	; 1
    1630:	83 bf       	out	0x33, r24	; 51
    1632:	83 b7       	in	r24, 0x33	; 51
    1634:	8d 7f       	andi	r24, 0xFD	; 253
    1636:	83 bf       	out	0x33, r24	; 51
    1638:	83 b7       	in	r24, 0x33	; 51
    163a:	8b 7f       	andi	r24, 0xFB	; 251
    163c:	83 bf       	out	0x33, r24	; 51
    163e:	2f c0       	rjmp	.+94     	; 0x169e <Timer+0x92>
    1640:	22 33       	cpi	r18, 0x32	; 50
    1642:	51 f4       	brne	.+20     	; 0x1658 <Timer+0x4c>
    1644:	83 b7       	in	r24, 0x33	; 51
    1646:	8e 7f       	andi	r24, 0xFE	; 254
    1648:	83 bf       	out	0x33, r24	; 51
    164a:	83 b7       	in	r24, 0x33	; 51
    164c:	82 60       	ori	r24, 0x02	; 2
    164e:	83 bf       	out	0x33, r24	; 51
    1650:	83 b7       	in	r24, 0x33	; 51
    1652:	8b 7f       	andi	r24, 0xFB	; 251
    1654:	83 bf       	out	0x33, r24	; 51
    1656:	23 c0       	rjmp	.+70     	; 0x169e <Timer+0x92>
    1658:	23 33       	cpi	r18, 0x33	; 51
    165a:	51 f4       	brne	.+20     	; 0x1670 <Timer+0x64>
    165c:	83 b7       	in	r24, 0x33	; 51
    165e:	81 60       	ori	r24, 0x01	; 1
    1660:	83 bf       	out	0x33, r24	; 51
    1662:	83 b7       	in	r24, 0x33	; 51
    1664:	82 60       	ori	r24, 0x02	; 2
    1666:	83 bf       	out	0x33, r24	; 51
    1668:	83 b7       	in	r24, 0x33	; 51
    166a:	8b 7f       	andi	r24, 0xFB	; 251
    166c:	83 bf       	out	0x33, r24	; 51
    166e:	17 c0       	rjmp	.+46     	; 0x169e <Timer+0x92>
    1670:	24 33       	cpi	r18, 0x34	; 52
    1672:	51 f4       	brne	.+20     	; 0x1688 <Timer+0x7c>
    1674:	83 b7       	in	r24, 0x33	; 51
    1676:	8e 7f       	andi	r24, 0xFE	; 254
    1678:	83 bf       	out	0x33, r24	; 51
    167a:	83 b7       	in	r24, 0x33	; 51
    167c:	8d 7f       	andi	r24, 0xFD	; 253
    167e:	83 bf       	out	0x33, r24	; 51
    1680:	83 b7       	in	r24, 0x33	; 51
    1682:	84 60       	ori	r24, 0x04	; 4
    1684:	83 bf       	out	0x33, r24	; 51
    1686:	0b c0       	rjmp	.+22     	; 0x169e <Timer+0x92>
    1688:	25 33       	cpi	r18, 0x35	; 53
    168a:	49 f4       	brne	.+18     	; 0x169e <Timer+0x92>
    168c:	83 b7       	in	r24, 0x33	; 51
    168e:	81 60       	ori	r24, 0x01	; 1
    1690:	83 bf       	out	0x33, r24	; 51
    1692:	83 b7       	in	r24, 0x33	; 51
    1694:	8d 7f       	andi	r24, 0xFD	; 253
    1696:	83 bf       	out	0x33, r24	; 51
    1698:	83 b7       	in	r24, 0x33	; 51
    169a:	84 60       	ori	r24, 0x04	; 4
    169c:	83 bf       	out	0x33, r24	; 51
    169e:	60 33       	cpi	r22, 0x30	; 48
    16a0:	39 f4       	brne	.+14     	; 0x16b0 <Timer+0xa4>
    16a2:	83 b7       	in	r24, 0x33	; 51
    16a4:	87 7f       	andi	r24, 0xF7	; 247
    16a6:	83 bf       	out	0x33, r24	; 51
    16a8:	83 b7       	in	r24, 0x33	; 51
    16aa:	8f 7b       	andi	r24, 0xBF	; 191
    16ac:	83 bf       	out	0x33, r24	; 51
    16ae:	11 c0       	rjmp	.+34     	; 0x16d2 <Timer+0xc6>
    16b0:	62 33       	cpi	r22, 0x32	; 50
    16b2:	39 f4       	brne	.+14     	; 0x16c2 <Timer+0xb6>
    16b4:	83 b7       	in	r24, 0x33	; 51
    16b6:	88 60       	ori	r24, 0x08	; 8
    16b8:	83 bf       	out	0x33, r24	; 51
    16ba:	83 b7       	in	r24, 0x33	; 51
    16bc:	80 64       	ori	r24, 0x40	; 64
    16be:	83 bf       	out	0x33, r24	; 51
    16c0:	08 c0       	rjmp	.+16     	; 0x16d2 <Timer+0xc6>
    16c2:	61 33       	cpi	r22, 0x31	; 49
    16c4:	31 f4       	brne	.+12     	; 0x16d2 <Timer+0xc6>
    16c6:	83 b7       	in	r24, 0x33	; 51
    16c8:	87 7f       	andi	r24, 0xF7	; 247
    16ca:	83 bf       	out	0x33, r24	; 51
    16cc:	83 b7       	in	r24, 0x33	; 51
    16ce:	80 64       	ori	r24, 0x40	; 64
    16d0:	83 bf       	out	0x33, r24	; 51
    16d2:	40 33       	cpi	r20, 0x30	; 48
    16d4:	39 f4       	brne	.+14     	; 0x16e4 <Timer+0xd8>
    16d6:	83 b7       	in	r24, 0x33	; 51
    16d8:	8f 7e       	andi	r24, 0xEF	; 239
    16da:	83 bf       	out	0x33, r24	; 51
    16dc:	83 b7       	in	r24, 0x33	; 51
    16de:	8f 7d       	andi	r24, 0xDF	; 223
    16e0:	83 bf       	out	0x33, r24	; 51
    16e2:	08 95       	ret
    16e4:	41 33       	cpi	r20, 0x31	; 49
    16e6:	39 f4       	brne	.+14     	; 0x16f6 <Timer+0xea>
    16e8:	83 b7       	in	r24, 0x33	; 51
    16ea:	8f 7d       	andi	r24, 0xDF	; 223
    16ec:	83 bf       	out	0x33, r24	; 51
    16ee:	83 b7       	in	r24, 0x33	; 51
    16f0:	80 61       	ori	r24, 0x10	; 16
    16f2:	83 bf       	out	0x33, r24	; 51
    16f4:	08 95       	ret
    16f6:	42 33       	cpi	r20, 0x32	; 50
    16f8:	39 f4       	brne	.+14     	; 0x1708 <Timer+0xfc>
    16fa:	83 b7       	in	r24, 0x33	; 51
    16fc:	8f 7e       	andi	r24, 0xEF	; 239
    16fe:	83 bf       	out	0x33, r24	; 51
    1700:	83 b7       	in	r24, 0x33	; 51
    1702:	80 62       	ori	r24, 0x20	; 32
    1704:	83 bf       	out	0x33, r24	; 51
    1706:	08 95       	ret
    1708:	43 33       	cpi	r20, 0x33	; 51
    170a:	09 f0       	breq	.+2      	; 0x170e <Timer+0x102>
    170c:	a0 c0       	rjmp	.+320    	; 0x184e <Timer+0x242>
    170e:	83 b7       	in	r24, 0x33	; 51
    1710:	80 61       	ori	r24, 0x10	; 16
    1712:	83 bf       	out	0x33, r24	; 51
    1714:	83 b7       	in	r24, 0x33	; 51
    1716:	80 62       	ori	r24, 0x20	; 32
    1718:	83 bf       	out	0x33, r24	; 51
    171a:	08 95       	ret
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	09 f0       	breq	.+2      	; 0x1722 <Timer+0x116>
    1720:	96 c0       	rjmp	.+300    	; 0x184e <Timer+0x242>
    1722:	20 33       	cpi	r18, 0x30	; 48
    1724:	51 f4       	brne	.+20     	; 0x173a <Timer+0x12e>
    1726:	8e b5       	in	r24, 0x2e	; 46
    1728:	8e 7f       	andi	r24, 0xFE	; 254
    172a:	8e bd       	out	0x2e, r24	; 46
    172c:	8e b5       	in	r24, 0x2e	; 46
    172e:	8d 7f       	andi	r24, 0xFD	; 253
    1730:	8e bd       	out	0x2e, r24	; 46
    1732:	8e b5       	in	r24, 0x2e	; 46
    1734:	8b 7f       	andi	r24, 0xFB	; 251
    1736:	8e bd       	out	0x2e, r24	; 46
    1738:	3b c0       	rjmp	.+118    	; 0x17b0 <Timer+0x1a4>
    173a:	21 33       	cpi	r18, 0x31	; 49
    173c:	51 f4       	brne	.+20     	; 0x1752 <Timer+0x146>
    173e:	8e b5       	in	r24, 0x2e	; 46
    1740:	81 60       	ori	r24, 0x01	; 1
    1742:	8e bd       	out	0x2e, r24	; 46
    1744:	8e b5       	in	r24, 0x2e	; 46
    1746:	8d 7f       	andi	r24, 0xFD	; 253
    1748:	8e bd       	out	0x2e, r24	; 46
    174a:	8e b5       	in	r24, 0x2e	; 46
    174c:	8b 7f       	andi	r24, 0xFB	; 251
    174e:	8e bd       	out	0x2e, r24	; 46
    1750:	2f c0       	rjmp	.+94     	; 0x17b0 <Timer+0x1a4>
    1752:	22 33       	cpi	r18, 0x32	; 50
    1754:	51 f4       	brne	.+20     	; 0x176a <Timer+0x15e>
    1756:	8e b5       	in	r24, 0x2e	; 46
    1758:	8e 7f       	andi	r24, 0xFE	; 254
    175a:	8e bd       	out	0x2e, r24	; 46
    175c:	8e b5       	in	r24, 0x2e	; 46
    175e:	82 60       	ori	r24, 0x02	; 2
    1760:	8e bd       	out	0x2e, r24	; 46
    1762:	8e b5       	in	r24, 0x2e	; 46
    1764:	8b 7f       	andi	r24, 0xFB	; 251
    1766:	8e bd       	out	0x2e, r24	; 46
    1768:	23 c0       	rjmp	.+70     	; 0x17b0 <Timer+0x1a4>
    176a:	23 33       	cpi	r18, 0x33	; 51
    176c:	51 f4       	brne	.+20     	; 0x1782 <Timer+0x176>
    176e:	8e b5       	in	r24, 0x2e	; 46
    1770:	81 60       	ori	r24, 0x01	; 1
    1772:	8e bd       	out	0x2e, r24	; 46
    1774:	8e b5       	in	r24, 0x2e	; 46
    1776:	82 60       	ori	r24, 0x02	; 2
    1778:	8e bd       	out	0x2e, r24	; 46
    177a:	8e b5       	in	r24, 0x2e	; 46
    177c:	8b 7f       	andi	r24, 0xFB	; 251
    177e:	8e bd       	out	0x2e, r24	; 46
    1780:	17 c0       	rjmp	.+46     	; 0x17b0 <Timer+0x1a4>
    1782:	24 33       	cpi	r18, 0x34	; 52
    1784:	51 f4       	brne	.+20     	; 0x179a <Timer+0x18e>
    1786:	8e b5       	in	r24, 0x2e	; 46
    1788:	8e 7f       	andi	r24, 0xFE	; 254
    178a:	8e bd       	out	0x2e, r24	; 46
    178c:	8e b5       	in	r24, 0x2e	; 46
    178e:	8d 7f       	andi	r24, 0xFD	; 253
    1790:	8e bd       	out	0x2e, r24	; 46
    1792:	8e b5       	in	r24, 0x2e	; 46
    1794:	84 60       	ori	r24, 0x04	; 4
    1796:	8e bd       	out	0x2e, r24	; 46
    1798:	0b c0       	rjmp	.+22     	; 0x17b0 <Timer+0x1a4>
    179a:	25 33       	cpi	r18, 0x35	; 53
    179c:	49 f4       	brne	.+18     	; 0x17b0 <Timer+0x1a4>
    179e:	8e b5       	in	r24, 0x2e	; 46
    17a0:	81 60       	ori	r24, 0x01	; 1
    17a2:	8e bd       	out	0x2e, r24	; 46
    17a4:	8e b5       	in	r24, 0x2e	; 46
    17a6:	8d 7f       	andi	r24, 0xFD	; 253
    17a8:	8e bd       	out	0x2e, r24	; 46
    17aa:	8e b5       	in	r24, 0x2e	; 46
    17ac:	84 60       	ori	r24, 0x04	; 4
    17ae:	8e bd       	out	0x2e, r24	; 46
    17b0:	60 33       	cpi	r22, 0x30	; 48
    17b2:	69 f4       	brne	.+26     	; 0x17ce <Timer+0x1c2>
    17b4:	8f b5       	in	r24, 0x2f	; 47
    17b6:	8e 7f       	andi	r24, 0xFE	; 254
    17b8:	8f bd       	out	0x2f, r24	; 47
    17ba:	8f b5       	in	r24, 0x2f	; 47
    17bc:	8d 7f       	andi	r24, 0xFD	; 253
    17be:	8f bd       	out	0x2f, r24	; 47
    17c0:	8e b5       	in	r24, 0x2e	; 46
    17c2:	87 7f       	andi	r24, 0xF7	; 247
    17c4:	8e bd       	out	0x2e, r24	; 46
    17c6:	8e b5       	in	r24, 0x2e	; 46
    17c8:	8f 7e       	andi	r24, 0xEF	; 239
    17ca:	8e bd       	out	0x2e, r24	; 46
    17cc:	1d c0       	rjmp	.+58     	; 0x1808 <Timer+0x1fc>
    17ce:	62 33       	cpi	r22, 0x32	; 50
    17d0:	69 f4       	brne	.+26     	; 0x17ec <Timer+0x1e0>
    17d2:	8f b5       	in	r24, 0x2f	; 47
    17d4:	8e 7f       	andi	r24, 0xFE	; 254
    17d6:	8f bd       	out	0x2f, r24	; 47
    17d8:	8f b5       	in	r24, 0x2f	; 47
    17da:	82 60       	ori	r24, 0x02	; 2
    17dc:	8f bd       	out	0x2f, r24	; 47
    17de:	8e b5       	in	r24, 0x2e	; 46
    17e0:	88 60       	ori	r24, 0x08	; 8
    17e2:	8e bd       	out	0x2e, r24	; 46
    17e4:	8e b5       	in	r24, 0x2e	; 46
    17e6:	80 61       	ori	r24, 0x10	; 16
    17e8:	8e bd       	out	0x2e, r24	; 46
    17ea:	0e c0       	rjmp	.+28     	; 0x1808 <Timer+0x1fc>
    17ec:	61 33       	cpi	r22, 0x31	; 49
    17ee:	61 f4       	brne	.+24     	; 0x1808 <Timer+0x1fc>
    17f0:	8f b5       	in	r24, 0x2f	; 47
    17f2:	8e 7f       	andi	r24, 0xFE	; 254
    17f4:	8f bd       	out	0x2f, r24	; 47
    17f6:	8f b5       	in	r24, 0x2f	; 47
    17f8:	82 60       	ori	r24, 0x02	; 2
    17fa:	8f bd       	out	0x2f, r24	; 47
    17fc:	8e b5       	in	r24, 0x2e	; 46
    17fe:	87 7f       	andi	r24, 0xF7	; 247
    1800:	8e bd       	out	0x2e, r24	; 46
    1802:	8e b5       	in	r24, 0x2e	; 46
    1804:	80 61       	ori	r24, 0x10	; 16
    1806:	8e bd       	out	0x2e, r24	; 46
    1808:	40 33       	cpi	r20, 0x30	; 48
    180a:	39 f4       	brne	.+14     	; 0x181a <Timer+0x20e>
    180c:	8f b5       	in	r24, 0x2f	; 47
    180e:	8f 7b       	andi	r24, 0xBF	; 191
    1810:	8f bd       	out	0x2f, r24	; 47
    1812:	8f b5       	in	r24, 0x2f	; 47
    1814:	8f 77       	andi	r24, 0x7F	; 127
    1816:	8f bd       	out	0x2f, r24	; 47
    1818:	08 95       	ret
    181a:	41 33       	cpi	r20, 0x31	; 49
    181c:	39 f4       	brne	.+14     	; 0x182c <Timer+0x220>
    181e:	8f b5       	in	r24, 0x2f	; 47
    1820:	80 64       	ori	r24, 0x40	; 64
    1822:	8f bd       	out	0x2f, r24	; 47
    1824:	8f b5       	in	r24, 0x2f	; 47
    1826:	8f 77       	andi	r24, 0x7F	; 127
    1828:	8f bd       	out	0x2f, r24	; 47
    182a:	08 95       	ret
    182c:	42 33       	cpi	r20, 0x32	; 50
    182e:	39 f4       	brne	.+14     	; 0x183e <Timer+0x232>
    1830:	8f b5       	in	r24, 0x2f	; 47
    1832:	8f 7b       	andi	r24, 0xBF	; 191
    1834:	8f bd       	out	0x2f, r24	; 47
    1836:	8f b5       	in	r24, 0x2f	; 47
    1838:	80 68       	ori	r24, 0x80	; 128
    183a:	8f bd       	out	0x2f, r24	; 47
    183c:	08 95       	ret
    183e:	43 33       	cpi	r20, 0x33	; 51
    1840:	31 f4       	brne	.+12     	; 0x184e <Timer+0x242>
    1842:	8f b5       	in	r24, 0x2f	; 47
    1844:	80 64       	ori	r24, 0x40	; 64
    1846:	8f bd       	out	0x2f, r24	; 47
    1848:	8f b5       	in	r24, 0x2f	; 47
    184a:	80 68       	ori	r24, 0x80	; 128
    184c:	8f bd       	out	0x2f, r24	; 47
    184e:	08 95       	ret

00001850 <UART_Bit_Stops>:
    1850:	80 b5       	in	r24, 0x20	; 32
    1852:	88 60       	ori	r24, 0x08	; 8
    1854:	80 bd       	out	0x20, r24	; 32
    1856:	08 95       	ret

00001858 <UART_Mode_Select>:
    1858:	56 98       	cbi	0x0a, 6	; 10
    185a:	08 95       	ret

0000185c <UART_Init>:
    185c:	90 bd       	out	0x20, r25	; 32
    185e:	89 b9       	out	0x09, r24	; 9
    1860:	0e 94 2c 0c 	call	0x1858	; 0x1858 <UART_Mode_Select>
    1864:	53 9a       	sbi	0x0a, 3	; 10
    1866:	54 9a       	sbi	0x0a, 4	; 10
    1868:	80 b5       	in	r24, 0x20	; 32
    186a:	80 68       	ori	r24, 0x80	; 128
    186c:	80 bd       	out	0x20, r24	; 32
    186e:	0e 94 28 0c 	call	0x1850	; 0x1850 <UART_Bit_Stops>
    1872:	80 b5       	in	r24, 0x20	; 32
    1874:	82 60       	ori	r24, 0x02	; 2
    1876:	80 bd       	out	0x20, r24	; 32
    1878:	80 b5       	in	r24, 0x20	; 32
    187a:	84 60       	ori	r24, 0x04	; 4
    187c:	80 bd       	out	0x20, r24	; 32
    187e:	08 95       	ret

00001880 <UART_Transmit>:
    1880:	5d 9b       	sbis	0x0b, 5	; 11
    1882:	fe cf       	rjmp	.-4      	; 0x1880 <UART_Transmit>
    1884:	8c b9       	out	0x0c, r24	; 12
    1886:	08 95       	ret

00001888 <UART_Receive>:
    1888:	5f 99       	sbic	0x0b, 7	; 11
    188a:	04 c0       	rjmp	.+8      	; 0x1894 <UART_Receive+0xc>
    188c:	0e 94 53 00 	call	0xa6	; 0xa6 <AC_ON>
    1890:	5f 9b       	sbis	0x0b, 7	; 11
    1892:	fc cf       	rjmp	.-8      	; 0x188c <UART_Receive+0x4>
    1894:	8c b1       	in	r24, 0x0c	; 12
    1896:	08 95       	ret

00001898 <UART_Send_String>:
    1898:	0f 93       	push	r16
    189a:	1f 93       	push	r17
    189c:	cf 93       	push	r28
    189e:	fc 01       	movw	r30, r24
    18a0:	80 81       	ld	r24, Z
    18a2:	88 23       	and	r24, r24
    18a4:	59 f0       	breq	.+22     	; 0x18bc <UART_Send_String+0x24>
    18a6:	8f 01       	movw	r16, r30
    18a8:	c0 e0       	ldi	r28, 0x00	; 0
    18aa:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
    18ae:	cf 5f       	subi	r28, 0xFF	; 255
    18b0:	f8 01       	movw	r30, r16
    18b2:	ec 0f       	add	r30, r28
    18b4:	f1 1d       	adc	r31, r1
    18b6:	80 81       	ld	r24, Z
    18b8:	81 11       	cpse	r24, r1
    18ba:	f7 cf       	rjmp	.-18     	; 0x18aa <UART_Send_String+0x12>
    18bc:	cf 91       	pop	r28
    18be:	1f 91       	pop	r17
    18c0:	0f 91       	pop	r16
    18c2:	08 95       	ret

000018c4 <UART_Welcome_Message>:
#include "App.h"
#include "Servo.h"

void UART_Welcome_Message()
{
	UART_Send_String ("Welcome to Smart Home System");
    18c4:	8e eb       	ldi	r24, 0xBE	; 190
    18c6:	92 e0       	ldi	r25, 0x02	; 2
    18c8:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
	UART_Transmit('\r');
    18cc:	8d e0       	ldi	r24, 0x0D	; 13
    18ce:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
	UART_Transmit('\r');
    18d2:	8d e0       	ldi	r24, 0x0D	; 13
    18d4:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
    18d8:	2f ef       	ldi	r18, 0xFF	; 255
    18da:	85 ea       	ldi	r24, 0xA5	; 165
    18dc:	9e e0       	ldi	r25, 0x0E	; 14
    18de:	21 50       	subi	r18, 0x01	; 1
    18e0:	80 40       	sbci	r24, 0x00	; 0
    18e2:	90 40       	sbci	r25, 0x00	; 0
    18e4:	e1 f7       	brne	.-8      	; 0x18de <UART_Welcome_Message+0x1a>
    18e6:	00 c0       	rjmp	.+0      	; 0x18e8 <UART_Welcome_Message+0x24>
    18e8:	00 00       	nop
    18ea:	08 95       	ret

000018ec <UART_Mode_Choice>:
	_delay_ms(300);
}

unsigned char UART_Mode_Choice()
{
    18ec:	cf 93       	push	r28
	unsigned char uart_var = 0;
	
	UART_Send_String ("Please choose your Mode (Admin/User) ");
    18ee:	8b ed       	ldi	r24, 0xDB	; 219
    18f0:	92 e0       	ldi	r25, 0x02	; 2
    18f2:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
	UART_Transmit('\r');
    18f6:	8d e0       	ldi	r24, 0x0D	; 13
    18f8:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
	UART_Send_String ("1. Admin Mode ");
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	93 e0       	ldi	r25, 0x03	; 3
    1900:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
	UART_Transmit('\r');
    1904:	8d e0       	ldi	r24, 0x0D	; 13
    1906:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
	UART_Send_String ("2. User Mode ");
    190a:	80 e1       	ldi	r24, 0x10	; 16
    190c:	93 e0       	ldi	r25, 0x03	; 3
    190e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
	UART_Transmit('\r');
    1912:	8d e0       	ldi	r24, 0x0D	; 13
    1914:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
	UART_Transmit('\r');
    1918:	8d e0       	ldi	r24, 0x0D	; 13
    191a:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
    191e:	2f ef       	ldi	r18, 0xFF	; 255
    1920:	85 ea       	ldi	r24, 0xA5	; 165
    1922:	9e e0       	ldi	r25, 0x0E	; 14
    1924:	21 50       	subi	r18, 0x01	; 1
    1926:	80 40       	sbci	r24, 0x00	; 0
    1928:	90 40       	sbci	r25, 0x00	; 0
    192a:	e1 f7       	brne	.-8      	; 0x1924 <UART_Mode_Choice+0x38>
    192c:	00 c0       	rjmp	.+0      	; 0x192e <UART_Mode_Choice+0x42>
    192e:	00 00       	nop
	_delay_ms(300);
	
	UART_Send_String ("Your Choice : ");
    1930:	8d ec       	ldi	r24, 0xCD	; 205
    1932:	91 e0       	ldi	r25, 0x01	; 1
    1934:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
	while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
	{
		uart_var = UART_Receive();
    1938:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
    193c:	c8 2f       	mov	r28, r24
		UART_Transmit(uart_var);
    193e:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
	UART_Transmit('\r');
	UART_Transmit('\r');
	_delay_ms(300);
	
	UART_Send_String ("Your Choice : ");
	while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1942:	80 ed       	ldi	r24, 0xD0	; 208
    1944:	8c 0f       	add	r24, r28
    1946:	8a 30       	cpi	r24, 0x0A	; 10
    1948:	b8 f7       	brcc	.-18     	; 0x1938 <UART_Mode_Choice+0x4c>
	{
		uart_var = UART_Receive();
		UART_Transmit(uart_var);
	}
	
	UART_Transmit('\r');
    194a:	8d e0       	ldi	r24, 0x0D	; 13
    194c:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
	UART_Transmit('\r');
    1950:	8d e0       	ldi	r24, 0x0D	; 13
    1952:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
	
	while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_2)))
    1956:	8f ec       	ldi	r24, 0xCF	; 207
    1958:	8c 0f       	add	r24, r28
    195a:	82 30       	cpi	r24, 0x02	; 2
    195c:	08 f1       	brcs	.+66     	; 0x19a0 <UART_Mode_Choice+0xb4>
	{
		UART_Send_String ("Please Choose only 1 or 2");
    195e:	8e e1       	ldi	r24, 0x1E	; 30
    1960:	93 e0       	ldi	r25, 0x03	; 3
    1962:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
		UART_Transmit('\r');
    1966:	8d e0       	ldi	r24, 0x0D	; 13
    1968:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		UART_Transmit('\r');
    196c:	8d e0       	ldi	r24, 0x0D	; 13
    196e:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		uart_var = 0;
		UART_Send_String("Your choice : ");
    1972:	88 e3       	ldi	r24, 0x38	; 56
    1974:	93 e0       	ldi	r25, 0x03	; 3
    1976:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
		{
			uart_var = UART_Receive();
    197a:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
    197e:	c8 2f       	mov	r28, r24
			UART_Transmit(uart_var);	
    1980:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		UART_Send_String ("Please Choose only 1 or 2");
		UART_Transmit('\r');
		UART_Transmit('\r');
		uart_var = 0;
		UART_Send_String("Your choice : ");
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1984:	80 ed       	ldi	r24, 0xD0	; 208
    1986:	8c 0f       	add	r24, r28
    1988:	8a 30       	cpi	r24, 0x0A	; 10
    198a:	b8 f7       	brcc	.-18     	; 0x197a <UART_Mode_Choice+0x8e>
		{
			uart_var = UART_Receive();
			UART_Transmit(uart_var);	
		}
		
		UART_Transmit('\r');
    198c:	8d e0       	ldi	r24, 0x0D	; 13
    198e:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		UART_Transmit('\r');
    1992:	8d e0       	ldi	r24, 0x0D	; 13
    1994:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
	}
	
	UART_Transmit('\r');
	UART_Transmit('\r');
	
	while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_2)))
    1998:	8f ec       	ldi	r24, 0xCF	; 207
    199a:	8c 0f       	add	r24, r28
    199c:	82 30       	cpi	r24, 0x02	; 2
    199e:	f8 f6       	brcc	.-66     	; 0x195e <UART_Mode_Choice+0x72>
		UART_Transmit('\r');
		UART_Transmit('\r');
	}
	
	return uart_var;
}
    19a0:	8c 2f       	mov	r24, r28
    19a2:	cf 91       	pop	r28
    19a4:	08 95       	ret

000019a6 <UART_Rooms_Leds_Control>:

void UART_Rooms_Leds_Control()
{
    19a6:	cf 93       	push	r28
    19a8:	df 93       	push	r29
	unsigned char room_no_temp = 0;
	unsigned char room_on_off_temp = 0;
	unsigned char uart_var = 0;
	
	UART_Send_String ("1. Room 1 ");
    19aa:	87 e4       	ldi	r24, 0x47	; 71
    19ac:	93 e0       	ldi	r25, 0x03	; 3
    19ae:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
	UART_Transmit('\r');
    19b2:	8d e0       	ldi	r24, 0x0D	; 13
    19b4:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
	UART_Send_String ("2. Room 2 ");
    19b8:	82 e5       	ldi	r24, 0x52	; 82
    19ba:	93 e0       	ldi	r25, 0x03	; 3
    19bc:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
	UART_Transmit('\r');
    19c0:	8d e0       	ldi	r24, 0x0D	; 13
    19c2:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
	UART_Send_String ("3. Room 3 ");
    19c6:	8d e5       	ldi	r24, 0x5D	; 93
    19c8:	93 e0       	ldi	r25, 0x03	; 3
    19ca:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
	UART_Transmit('\r');
    19ce:	8d e0       	ldi	r24, 0x0D	; 13
    19d0:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
	UART_Send_String ("4. Room 4 ");
    19d4:	88 e6       	ldi	r24, 0x68	; 104
    19d6:	93 e0       	ldi	r25, 0x03	; 3
    19d8:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
	UART_Transmit('\r');
    19dc:	8d e0       	ldi	r24, 0x0D	; 13
    19de:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
	UART_Send_String ("5. Room 5 ");
    19e2:	83 e7       	ldi	r24, 0x73	; 115
    19e4:	93 e0       	ldi	r25, 0x03	; 3
    19e6:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
	UART_Transmit('\r');
    19ea:	8d e0       	ldi	r24, 0x0D	; 13
    19ec:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
	UART_Send_String ("6. All rooms ");
    19f0:	8e e7       	ldi	r24, 0x7E	; 126
    19f2:	93 e0       	ldi	r25, 0x03	; 3
    19f4:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
	UART_Transmit('\r');
    19f8:	8d e0       	ldi	r24, 0x0D	; 13
    19fa:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
	UART_Transmit('\r');
    19fe:	8d e0       	ldi	r24, 0x0D	; 13
    1a00:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
	UART_Send_String("Your choice : ");
    1a04:	88 e3       	ldi	r24, 0x38	; 56
    1a06:	93 e0       	ldi	r25, 0x03	; 3
    1a08:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
	
	while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
	{
		uart_var = UART_Receive();
    1a0c:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
    1a10:	c8 2f       	mov	r28, r24
		UART_Transmit(uart_var);
    1a12:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		UART_Transmit('\r');
    1a16:	8d e0       	ldi	r24, 0x0D	; 13
    1a18:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		UART_Transmit('\r');
    1a1c:	8d e0       	ldi	r24, 0x0D	; 13
    1a1e:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
	UART_Send_String ("6. All rooms ");
	UART_Transmit('\r');
	UART_Transmit('\r');
	UART_Send_String("Your choice : ");
	
	while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1a22:	80 ed       	ldi	r24, 0xD0	; 208
    1a24:	8c 0f       	add	r24, r28
    1a26:	8a 30       	cpi	r24, 0x0A	; 10
    1a28:	88 f7       	brcc	.-30     	; 0x1a0c <UART_Rooms_Leds_Control+0x66>
    1a2a:	1d c0       	rjmp	.+58     	; 0x1a66 <UART_Rooms_Leds_Control+0xc0>
	}
	room_no_temp = uart_var;
	
	while (!((room_no_temp >= Ascii_1) && (room_no_temp <= Ascii_6)))
	{
		UART_Send_String ("Please Choose only from 1 to 6");
    1a2c:	8c e8       	ldi	r24, 0x8C	; 140
    1a2e:	93 e0       	ldi	r25, 0x03	; 3
    1a30:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
		UART_Transmit('\r');
    1a34:	8d e0       	ldi	r24, 0x0D	; 13
    1a36:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		UART_Transmit('\r');
    1a3a:	8d e0       	ldi	r24, 0x0D	; 13
    1a3c:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		UART_Send_String("Your choice : ");
    1a40:	88 e3       	ldi	r24, 0x38	; 56
    1a42:	93 e0       	ldi	r25, 0x03	; 3
    1a44:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
		
		uart_var = 0;
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
		{
			uart_var = UART_Receive();
    1a48:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
    1a4c:	c8 2f       	mov	r28, r24
			UART_Transmit(uart_var);
    1a4e:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Transmit('\r');
    1a52:	8d e0       	ldi	r24, 0x0D	; 13
    1a54:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Transmit('\r');
    1a58:	8d e0       	ldi	r24, 0x0D	; 13
    1a5a:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		UART_Transmit('\r');
		UART_Transmit('\r');
		UART_Send_String("Your choice : ");
		
		uart_var = 0;
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1a5e:	80 ed       	ldi	r24, 0xD0	; 208
    1a60:	8c 0f       	add	r24, r28
    1a62:	8a 30       	cpi	r24, 0x0A	; 10
    1a64:	88 f7       	brcc	.-30     	; 0x1a48 <UART_Rooms_Leds_Control+0xa2>
		UART_Transmit('\r');
		UART_Transmit('\r');
	}
	room_no_temp = uart_var;
	
	while (!((room_no_temp >= Ascii_1) && (room_no_temp <= Ascii_6)))
    1a66:	8f ec       	ldi	r24, 0xCF	; 207
    1a68:	8c 0f       	add	r24, r28
    1a6a:	86 30       	cpi	r24, 0x06	; 6
    1a6c:	f8 f6       	brcc	.-66     	; 0x1a2c <UART_Rooms_Leds_Control+0x86>
		}
		room_no_temp = uart_var;
	}
	uart_var = 0;
	
	UART_Send_String ("Turn On : 1");
    1a6e:	8b ea       	ldi	r24, 0xAB	; 171
    1a70:	93 e0       	ldi	r25, 0x03	; 3
    1a72:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
	UART_Transmit('\r');
    1a76:	8d e0       	ldi	r24, 0x0D	; 13
    1a78:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
	UART_Send_String ("Turn Off : 0");
    1a7c:	87 eb       	ldi	r24, 0xB7	; 183
    1a7e:	93 e0       	ldi	r25, 0x03	; 3
    1a80:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
	UART_Transmit('\r');
    1a84:	8d e0       	ldi	r24, 0x0D	; 13
    1a86:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
	UART_Transmit('\r');
    1a8a:	8d e0       	ldi	r24, 0x0D	; 13
    1a8c:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
	UART_Send_String("Your Choice : ");
    1a90:	8d ec       	ldi	r24, 0xCD	; 205
    1a92:	91 e0       	ldi	r25, 0x01	; 1
    1a94:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
	while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
	{
		uart_var = UART_Receive();
    1a98:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
    1a9c:	d8 2f       	mov	r29, r24
		UART_Transmit(uart_var);
    1a9e:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		UART_Transmit('\r');
    1aa2:	8d e0       	ldi	r24, 0x0D	; 13
    1aa4:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		UART_Transmit('\r');
    1aa8:	8d e0       	ldi	r24, 0x0D	; 13
    1aaa:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
	UART_Transmit('\r');
	UART_Send_String ("Turn Off : 0");
	UART_Transmit('\r');
	UART_Transmit('\r');
	UART_Send_String("Your Choice : ");
	while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1aae:	80 ed       	ldi	r24, 0xD0	; 208
    1ab0:	8d 0f       	add	r24, r29
    1ab2:	8a 30       	cpi	r24, 0x0A	; 10
    1ab4:	88 f7       	brcc	.-30     	; 0x1a98 <UART_Rooms_Leds_Control+0xf2>
    1ab6:	1d c0       	rjmp	.+58     	; 0x1af2 <UART_Rooms_Leds_Control+0x14c>
	}
	room_on_off_temp = uart_var;
	
	while ((room_on_off_temp != Ascii_1) && (room_on_off_temp != Ascii_0))
	{
		UART_Send_String ("Please Choose 1 or 0");
    1ab8:	84 ec       	ldi	r24, 0xC4	; 196
    1aba:	93 e0       	ldi	r25, 0x03	; 3
    1abc:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
		UART_Transmit('\r');
    1ac0:	8d e0       	ldi	r24, 0x0D	; 13
    1ac2:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		UART_Transmit('\r');
    1ac6:	8d e0       	ldi	r24, 0x0D	; 13
    1ac8:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		
		uart_var = 0;
		UART_Send_String("Your choice : ");
    1acc:	88 e3       	ldi	r24, 0x38	; 56
    1ace:	93 e0       	ldi	r25, 0x03	; 3
    1ad0:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
		{
			uart_var = UART_Receive();
    1ad4:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
    1ad8:	d8 2f       	mov	r29, r24
			UART_Transmit(uart_var);
    1ada:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Transmit('\r');
    1ade:	8d e0       	ldi	r24, 0x0D	; 13
    1ae0:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Transmit('\r');
    1ae4:	8d e0       	ldi	r24, 0x0D	; 13
    1ae6:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		UART_Transmit('\r');
		UART_Transmit('\r');
		
		uart_var = 0;
		UART_Send_String("Your choice : ");
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1aea:	80 ed       	ldi	r24, 0xD0	; 208
    1aec:	8d 0f       	add	r24, r29
    1aee:	8a 30       	cpi	r24, 0x0A	; 10
    1af0:	88 f7       	brcc	.-30     	; 0x1ad4 <UART_Rooms_Leds_Control+0x12e>
		UART_Transmit('\r');
		UART_Transmit('\r');
	}
	room_on_off_temp = uart_var;
	
	while ((room_on_off_temp != Ascii_1) && (room_on_off_temp != Ascii_0))
    1af2:	80 ed       	ldi	r24, 0xD0	; 208
    1af4:	8d 0f       	add	r24, r29
    1af6:	82 30       	cpi	r24, 0x02	; 2
    1af8:	f8 f6       	brcc	.-66     	; 0x1ab8 <UART_Rooms_Leds_Control+0x112>
		}
		room_on_off_temp = uart_var;
	}
	uart_var = 0;
	
	if(room_no_temp == Ascii_6)
    1afa:	c6 33       	cpi	r28, 0x36	; 54
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <UART_Rooms_Leds_Control+0x15a>
    1afe:	6c c0       	rjmp	.+216    	; 0x1bd8 <UART_Rooms_Leds_Control+0x232>
	{
		if(room_on_off_temp == Ascii_1)
    1b00:	d1 33       	cpi	r29, 0x31	; 49
    1b02:	a9 f5       	brne	.+106    	; 0x1b6e <UART_Rooms_Leds_Control+0x1c8>
		{
			LED_STAT(ON,Room1);
    1b04:	61 e3       	ldi	r22, 0x31	; 49
    1b06:	81 e3       	ldi	r24, 0x31	; 49
    1b08:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <LED_STAT>
			LED_STAT(ON,Room2);
    1b0c:	62 e3       	ldi	r22, 0x32	; 50
    1b0e:	81 e3       	ldi	r24, 0x31	; 49
    1b10:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <LED_STAT>
			LED_STAT(ON,Room3);
    1b14:	63 e3       	ldi	r22, 0x33	; 51
    1b16:	81 e3       	ldi	r24, 0x31	; 49
    1b18:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <LED_STAT>
			LED_STAT(ON,Room4);
    1b1c:	64 e3       	ldi	r22, 0x34	; 52
    1b1e:	81 e3       	ldi	r24, 0x31	; 49
    1b20:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <LED_STAT>
			LED_STAT(ON,Room5);
    1b24:	65 e3       	ldi	r22, 0x35	; 53
    1b26:	81 e3       	ldi	r24, 0x31	; 49
    1b28:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <LED_STAT>
			
			UART_Send_String("All Leds are Turned On");
    1b2c:	89 ed       	ldi	r24, 0xD9	; 217
    1b2e:	93 e0       	ldi	r25, 0x03	; 3
    1b30:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Transmit('\r');
    1b34:	8d e0       	ldi	r24, 0x0D	; 13
    1b36:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Transmit('\r');
    1b3a:	8d e0       	ldi	r24, 0x0D	; 13
    1b3c:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			
			
			LCD_Write_String("All Leds are ");
    1b40:	8a ee       	ldi	r24, 0xEA	; 234
    1b42:	91 e0       	ldi	r25, 0x01	; 1
    1b44:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    1b48:	80 ec       	ldi	r24, 0xC0	; 192
    1b4a:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
			LCD_Write_String ("Turned On");
    1b4e:	86 ee       	ldi	r24, 0xE6	; 230
    1b50:	93 e0       	ldi	r25, 0x03	; 3
    1b52:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    1b56:	2f ef       	ldi	r18, 0xFF	; 255
    1b58:	83 ed       	ldi	r24, 0xD3	; 211
    1b5a:	90 e3       	ldi	r25, 0x30	; 48
    1b5c:	21 50       	subi	r18, 0x01	; 1
    1b5e:	80 40       	sbci	r24, 0x00	; 0
    1b60:	90 40       	sbci	r25, 0x00	; 0
    1b62:	e1 f7       	brne	.-8      	; 0x1b5c <UART_Rooms_Leds_Control+0x1b6>
    1b64:	00 c0       	rjmp	.+0      	; 0x1b66 <UART_Rooms_Leds_Control+0x1c0>
    1b66:	00 00       	nop
			_delay_ms(1000);
			LCD_Clear_Screen();
    1b68:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    1b6c:	3d c0       	rjmp	.+122    	; 0x1be8 <UART_Rooms_Leds_Control+0x242>
		}
		else
		{
			LED_STAT(OFF,Room1);
    1b6e:	61 e3       	ldi	r22, 0x31	; 49
    1b70:	80 e3       	ldi	r24, 0x30	; 48
    1b72:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <LED_STAT>
			LED_STAT(OFF,Room2);
    1b76:	62 e3       	ldi	r22, 0x32	; 50
    1b78:	80 e3       	ldi	r24, 0x30	; 48
    1b7a:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <LED_STAT>
			LED_STAT(OFF,Room3);
    1b7e:	63 e3       	ldi	r22, 0x33	; 51
    1b80:	80 e3       	ldi	r24, 0x30	; 48
    1b82:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <LED_STAT>
			LED_STAT(OFF,Room4);
    1b86:	64 e3       	ldi	r22, 0x34	; 52
    1b88:	80 e3       	ldi	r24, 0x30	; 48
    1b8a:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <LED_STAT>
			LED_STAT(OFF,Room5);
    1b8e:	65 e3       	ldi	r22, 0x35	; 53
    1b90:	80 e3       	ldi	r24, 0x30	; 48
    1b92:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <LED_STAT>
			
			UART_Send_String("All Leds are Turned Off");
    1b96:	80 ef       	ldi	r24, 0xF0	; 240
    1b98:	93 e0       	ldi	r25, 0x03	; 3
    1b9a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Transmit('\r');
    1b9e:	8d e0       	ldi	r24, 0x0D	; 13
    1ba0:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Transmit('\r');
    1ba4:	8d e0       	ldi	r24, 0x0D	; 13
    1ba6:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			
			LCD_Write_String("All Leds are ");
    1baa:	8a ee       	ldi	r24, 0xEA	; 234
    1bac:	91 e0       	ldi	r25, 0x01	; 1
    1bae:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    1bb2:	80 ec       	ldi	r24, 0xC0	; 192
    1bb4:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
			LCD_Write_String ("Turned Off");
    1bb8:	8d ef       	ldi	r24, 0xFD	; 253
    1bba:	93 e0       	ldi	r25, 0x03	; 3
    1bbc:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    1bc0:	2f ef       	ldi	r18, 0xFF	; 255
    1bc2:	83 ed       	ldi	r24, 0xD3	; 211
    1bc4:	90 e3       	ldi	r25, 0x30	; 48
    1bc6:	21 50       	subi	r18, 0x01	; 1
    1bc8:	80 40       	sbci	r24, 0x00	; 0
    1bca:	90 40       	sbci	r25, 0x00	; 0
    1bcc:	e1 f7       	brne	.-8      	; 0x1bc6 <UART_Rooms_Leds_Control+0x220>
    1bce:	00 c0       	rjmp	.+0      	; 0x1bd0 <UART_Rooms_Leds_Control+0x22a>
    1bd0:	00 00       	nop
			_delay_ms(1000);
			LCD_Clear_Screen();
    1bd2:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    1bd6:	08 c0       	rjmp	.+16     	; 0x1be8 <UART_Rooms_Leds_Control+0x242>
		}
	}
	else
	{
		LED_STAT(room_on_off_temp,room_no_temp);
    1bd8:	6c 2f       	mov	r22, r28
    1bda:	8d 2f       	mov	r24, r29
    1bdc:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <LED_STAT>
		LCD_Display_LED (room_no_temp, room_on_off_temp);	
    1be0:	6d 2f       	mov	r22, r29
    1be2:	8c 2f       	mov	r24, r28
    1be4:	0e 94 cf 06 	call	0xd9e	; 0xd9e <LCD_Display_LED>
	}
	
	UART_Transmit('\r');
    1be8:	8d e0       	ldi	r24, 0x0D	; 13
    1bea:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
	UART_Transmit('\r');
    1bee:	8d e0       	ldi	r24, 0x0D	; 13
    1bf0:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
	UART_Transmit('\r');
    1bf4:	8d e0       	ldi	r24, 0x0D	; 13
    1bf6:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
}
    1bfa:	df 91       	pop	r29
    1bfc:	cf 91       	pop	r28
    1bfe:	08 95       	ret

00001c00 <UART_Admin_Interfacing>:



void UART_Admin_Interfacing()
{
    1c00:	2f 92       	push	r2
    1c02:	3f 92       	push	r3
    1c04:	4f 92       	push	r4
    1c06:	5f 92       	push	r5
    1c08:	6f 92       	push	r6
    1c0a:	7f 92       	push	r7
    1c0c:	8f 92       	push	r8
    1c0e:	9f 92       	push	r9
    1c10:	af 92       	push	r10
    1c12:	bf 92       	push	r11
    1c14:	cf 92       	push	r12
    1c16:	df 92       	push	r13
    1c18:	ef 92       	push	r14
    1c1a:	ff 92       	push	r15
    1c1c:	0f 93       	push	r16
    1c1e:	1f 93       	push	r17
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	a6 97       	sbiw	r28, 0x26	; 38
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	cd bf       	out	0x3d, r28	; 61
	char password_temp_arr[4];	// array taken from eeprom to compare.
	char username_arr_2[4];		// array taken from eeprom in deleting user part.
	char password_arr_2[4];		// array taken from eeprom in deleting user part.
	unsigned char Compare_Var = 0;
	unsigned char user_type = 0;
	char admin_counter = 0;
    1c34:	19 8e       	std	Y+25, r1	; 0x19
	char user_counter = 0;
    1c36:	1a 8e       	std	Y+26, r1	; 0x1a
	char max_number_var = 0;
    1c38:	1b 8e       	std	Y+27, r1	; 0x1b
	char password_arr[4];		// array filled by user interface (ADMIN/USER)
	char username_temp_arr[4];	// array taken from eeprom to compare.
	char password_temp_arr[4];	// array taken from eeprom to compare.
	char username_arr_2[4];		// array taken from eeprom in deleting user part.
	char password_arr_2[4];		// array taken from eeprom in deleting user part.
	unsigned char Compare_Var = 0;
    1c3a:	91 2c       	mov	r9, r1
void UART_Admin_Interfacing()
{
	unsigned char uart_var = 0;
	unsigned char option = 0;
	unsigned char brightness_level = 0;
	unsigned char looping_counter = 0;
    1c3c:	10 e0       	ldi	r17, 0x00	; 0
    1c3e:	ce 01       	movw	r24, r28
    1c40:	05 96       	adiw	r24, 0x05	; 5
    1c42:	9d 8f       	std	Y+29, r25	; 0x1d
    1c44:	8c 8f       	std	Y+28, r24	; 0x1c
    1c46:	2e 01       	movw	r4, r28
    1c48:	99 e0       	ldi	r25, 0x09	; 9
    1c4a:	49 0e       	add	r4, r25
    1c4c:	51 1c       	adc	r5, r1
						EEPROM_readByte(LCD_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
						_delay_ms(10);
					}
					
					
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
    1c4e:	fe 01       	movw	r30, r28
    1c50:	31 96       	adiw	r30, 0x01	; 1
    1c52:	7f 01       	movw	r14, r30
    1c54:	24 2c       	mov	r2, r4
    1c56:	5e 8e       	std	Y+30, r5	; 0x1e
    1c58:	ef 8f       	std	Y+31, r30	; 0x1f
    1c5a:	3f 2c       	mov	r3, r15
    1c5c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1c5e:	fd a3       	std	Y+37, r31	; 0x25
    1c60:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1c62:	2e a3       	std	Y+38, r18	; 0x26
	char user_counter = 0;
	char max_number_var = 0;
	
	while (option != Ascii_8)	// Corresponding to Logout
	{
		UART_Send_String ("1. Controlling Lighting (Room 1 to Room 5)");
    1c64:	88 e0       	ldi	r24, 0x08	; 8
    1c66:	94 e0       	ldi	r25, 0x04	; 4
    1c68:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
		UART_Transmit('\r');
    1c6c:	8d e0       	ldi	r24, 0x0D	; 13
    1c6e:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		UART_Send_String ("2. Dimming lamp");
    1c72:	83 e3       	ldi	r24, 0x33	; 51
    1c74:	94 e0       	ldi	r25, 0x04	; 4
    1c76:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
		UART_Transmit('\r');
    1c7a:	8d e0       	ldi	r24, 0x0D	; 13
    1c7c:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		UART_Send_String ("3. Open the Door");
    1c80:	83 e4       	ldi	r24, 0x43	; 67
    1c82:	94 e0       	ldi	r25, 0x04	; 4
    1c84:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
		UART_Transmit('\r');
    1c88:	8d e0       	ldi	r24, 0x0D	; 13
    1c8a:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		UART_Send_String ("4. Close the Door");
    1c8e:	84 e5       	ldi	r24, 0x54	; 84
    1c90:	94 e0       	ldi	r25, 0x04	; 4
    1c92:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
		UART_Transmit('\r');
    1c96:	8d e0       	ldi	r24, 0x0D	; 13
    1c98:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		UART_Send_String ("5. Add admin to the system");
    1c9c:	86 e6       	ldi	r24, 0x66	; 102
    1c9e:	94 e0       	ldi	r25, 0x04	; 4
    1ca0:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
		UART_Transmit('\r');
    1ca4:	8d e0       	ldi	r24, 0x0D	; 13
    1ca6:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		UART_Send_String ("6. Add user to the system");
    1caa:	81 e8       	ldi	r24, 0x81	; 129
    1cac:	94 e0       	ldi	r25, 0x04	; 4
    1cae:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
		UART_Transmit('\r');
    1cb2:	8d e0       	ldi	r24, 0x0D	; 13
    1cb4:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		UART_Send_String ("7. Remove a user from the system");
    1cb8:	8b e9       	ldi	r24, 0x9B	; 155
    1cba:	94 e0       	ldi	r25, 0x04	; 4
    1cbc:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
		UART_Transmit('\r');
    1cc0:	8d e0       	ldi	r24, 0x0D	; 13
    1cc2:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		UART_Send_String ("8. Log out");	// return to Mode choice function (Admin / User)
    1cc6:	8c eb       	ldi	r24, 0xBC	; 188
    1cc8:	94 e0       	ldi	r25, 0x04	; 4
    1cca:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
		UART_Transmit('\r');
    1cce:	8d e0       	ldi	r24, 0x0D	; 13
    1cd0:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		UART_Transmit('\r');	
    1cd4:	8d e0       	ldi	r24, 0x0D	; 13
    1cd6:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		
		UART_Send_String ("Your Choice : ");
    1cda:	8d ec       	ldi	r24, 0xCD	; 205
    1cdc:	91 e0       	ldi	r25, 0x01	; 1
    1cde:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
		
		uart_var = 0; 
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
		{
			uart_var = UART_Receive();
    1ce2:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
		UART_Transmit('\r');	
		
		UART_Send_String ("Your Choice : ");
		
		uart_var = 0; 
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1ce6:	90 ed       	ldi	r25, 0xD0	; 208
    1ce8:	98 0f       	add	r25, r24
    1cea:	9a 30       	cpi	r25, 0x0A	; 10
    1cec:	d0 f7       	brcc	.-12     	; 0x1ce2 <UART_Admin_Interfacing+0xe2>
    1cee:	08 2f       	mov	r16, r24
		{
			uart_var = UART_Receive();
		}	
		UART_Transmit(uart_var);
    1cf0:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		UART_Transmit('\r');
    1cf4:	8d e0       	ldi	r24, 0x0D	; 13
    1cf6:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		UART_Transmit('\r');
    1cfa:	8d e0       	ldi	r24, 0x0D	; 13
    1cfc:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_8)))
    1d00:	8f ec       	ldi	r24, 0xCF	; 207
    1d02:	80 0f       	add	r24, r16
    1d04:	88 30       	cpi	r24, 0x08	; 8
    1d06:	08 f1       	brcs	.+66     	; 0x1d4a <UART_Admin_Interfacing+0x14a>
		{
			UART_Send_String ("Please Choose only from 1 to 8");
    1d08:	87 ec       	ldi	r24, 0xC7	; 199
    1d0a:	94 e0       	ldi	r25, 0x04	; 4
    1d0c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Transmit('\r');
    1d10:	8d e0       	ldi	r24, 0x0D	; 13
    1d12:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Transmit('\r');
    1d16:	8d e0       	ldi	r24, 0x0D	; 13
    1d18:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			uart_var = 0;
			UART_Send_String("Your choice : ");
    1d1c:	88 e3       	ldi	r24, 0x38	; 56
    1d1e:	93 e0       	ldi	r25, 0x03	; 3
    1d20:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
			{
				uart_var = UART_Receive();
    1d24:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
    1d28:	08 2f       	mov	r16, r24
				UART_Transmit(uart_var);
    1d2a:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Send_String ("Please Choose only from 1 to 8");
			UART_Transmit('\r');
			UART_Transmit('\r');
			uart_var = 0;
			UART_Send_String("Your choice : ");
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1d2e:	80 ed       	ldi	r24, 0xD0	; 208
    1d30:	80 0f       	add	r24, r16
    1d32:	8a 30       	cpi	r24, 0x0A	; 10
    1d34:	b8 f7       	brcc	.-18     	; 0x1d24 <UART_Admin_Interfacing+0x124>
			{
				uart_var = UART_Receive();
				UART_Transmit(uart_var);
			}
			UART_Transmit('\r');
    1d36:	8d e0       	ldi	r24, 0x0D	; 13
    1d38:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Transmit('\r');
    1d3c:	8d e0       	ldi	r24, 0x0D	; 13
    1d3e:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			uart_var = UART_Receive();
		}	
		UART_Transmit(uart_var);
		UART_Transmit('\r');
		UART_Transmit('\r');
		while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_8)))
    1d42:	8f ec       	ldi	r24, 0xCF	; 207
    1d44:	80 0f       	add	r24, r16
    1d46:	88 30       	cpi	r24, 0x08	; 8
    1d48:	f8 f6       	brcc	.-66     	; 0x1d08 <UART_Admin_Interfacing+0x108>
			UART_Transmit('\r');
		}
		option = uart_var;
	
	
		if(option == '1')
    1d4a:	01 33       	cpi	r16, 0x31	; 49
    1d4c:	19 f4       	brne	.+6      	; 0x1d54 <UART_Admin_Interfacing+0x154>
		{	
			UART_Rooms_Leds_Control();
    1d4e:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <UART_Rooms_Leds_Control>
    1d52:	88 cf       	rjmp	.-240    	; 0x1c64 <UART_Admin_Interfacing+0x64>
		}
		else if(option == '2')
    1d54:	02 33       	cpi	r16, 0x32	; 50
    1d56:	09 f0       	breq	.+2      	; 0x1d5a <UART_Admin_Interfacing+0x15a>
    1d58:	6c c0       	rjmp	.+216    	; 0x1e32 <UART_Admin_Interfacing+0x232>
		{
			UART_Transmit('\r');
    1d5a:	8d e0       	ldi	r24, 0x0D	; 13
    1d5c:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Transmit('\r');
    1d60:	8d e0       	ldi	r24, 0x0D	; 13
    1d62:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Send_String ("Please Choose one of the following brightness percentages :  ");
    1d66:	86 ee       	ldi	r24, 0xE6	; 230
    1d68:	94 e0       	ldi	r25, 0x04	; 4
    1d6a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Transmit('\r');
    1d6e:	8d e0       	ldi	r24, 0x0D	; 13
    1d70:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Transmit('\r');
    1d74:	8d e0       	ldi	r24, 0x0D	; 13
    1d76:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		
			UART_Send_String ("0. 0% (Turn Off Led)");
    1d7a:	84 e2       	ldi	r24, 0x24	; 36
    1d7c:	95 e0       	ldi	r25, 0x05	; 5
    1d7e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Transmit('\r');
    1d82:	8d e0       	ldi	r24, 0x0D	; 13
    1d84:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Send_String ("1. 25% ");
    1d88:	89 e3       	ldi	r24, 0x39	; 57
    1d8a:	95 e0       	ldi	r25, 0x05	; 5
    1d8c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Transmit('\r');
    1d90:	8d e0       	ldi	r24, 0x0D	; 13
    1d92:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Send_String ("2. 50% ");
    1d96:	81 e4       	ldi	r24, 0x41	; 65
    1d98:	95 e0       	ldi	r25, 0x05	; 5
    1d9a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Transmit('\r');
    1d9e:	8d e0       	ldi	r24, 0x0D	; 13
    1da0:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Send_String ("3. 75% ");
    1da4:	89 e4       	ldi	r24, 0x49	; 73
    1da6:	95 e0       	ldi	r25, 0x05	; 5
    1da8:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Transmit('\r');
    1dac:	8d e0       	ldi	r24, 0x0D	; 13
    1dae:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Send_String ("4. 100%  (Maximum Power)");
    1db2:	81 e5       	ldi	r24, 0x51	; 81
    1db4:	95 e0       	ldi	r25, 0x05	; 5
    1db6:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Transmit('\r');
    1dba:	8d e0       	ldi	r24, 0x0D	; 13
    1dbc:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		
			UART_Send_String("Your choice : ");
    1dc0:	88 e3       	ldi	r24, 0x38	; 56
    1dc2:	93 e0       	ldi	r25, 0x03	; 3
    1dc4:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			uart_var = 0;
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
			{
				uart_var = UART_Receive();
    1dc8:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
    1dcc:	08 2f       	mov	r16, r24
				UART_Transmit(uart_var);
    1dce:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				UART_Transmit('\r');
    1dd2:	8d e0       	ldi	r24, 0x0D	; 13
    1dd4:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				UART_Transmit('\r');
    1dd8:	8d e0       	ldi	r24, 0x0D	; 13
    1dda:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Send_String ("4. 100%  (Maximum Power)");
			UART_Transmit('\r');
		
			UART_Send_String("Your choice : ");
			uart_var = 0;
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1dde:	80 ed       	ldi	r24, 0xD0	; 208
    1de0:	80 0f       	add	r24, r16
    1de2:	8a 30       	cpi	r24, 0x0A	; 10
    1de4:	88 f7       	brcc	.-30     	; 0x1dc8 <UART_Admin_Interfacing+0x1c8>
    1de6:	1d c0       	rjmp	.+58     	; 0x1e22 <UART_Admin_Interfacing+0x222>
				UART_Transmit('\r');
			}
		
			while (!((uart_var >= Ascii_0) && (uart_var <= Ascii_4)))
			{
				UART_Send_String ("Please Choose only from 0 to 4");
    1de8:	8a e6       	ldi	r24, 0x6A	; 106
    1dea:	95 e0       	ldi	r25, 0x05	; 5
    1dec:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
				UART_Transmit('\r');
    1df0:	8d e0       	ldi	r24, 0x0D	; 13
    1df2:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				UART_Transmit('\r');
    1df6:	8d e0       	ldi	r24, 0x0D	; 13
    1df8:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				uart_var = 0;
				UART_Send_String("Your choice : ");
    1dfc:	88 e3       	ldi	r24, 0x38	; 56
    1dfe:	93 e0       	ldi	r25, 0x03	; 3
    1e00:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
				{
					uart_var = UART_Receive();
    1e04:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
    1e08:	08 2f       	mov	r16, r24
					UART_Transmit(uart_var);
    1e0a:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Transmit('\r');
    1e0e:	8d e0       	ldi	r24, 0x0D	; 13
    1e10:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Transmit('\r');
    1e14:	8d e0       	ldi	r24, 0x0D	; 13
    1e16:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				UART_Send_String ("Please Choose only from 0 to 4");
				UART_Transmit('\r');
				UART_Transmit('\r');
				uart_var = 0;
				UART_Send_String("Your choice : ");
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1e1a:	80 ed       	ldi	r24, 0xD0	; 208
    1e1c:	80 0f       	add	r24, r16
    1e1e:	8a 30       	cpi	r24, 0x0A	; 10
    1e20:	88 f7       	brcc	.-30     	; 0x1e04 <UART_Admin_Interfacing+0x204>
				UART_Transmit(uart_var);
				UART_Transmit('\r');
				UART_Transmit('\r');
			}
		
			while (!((uart_var >= Ascii_0) && (uart_var <= Ascii_4)))
    1e22:	80 ed       	ldi	r24, 0xD0	; 208
    1e24:	80 0f       	add	r24, r16
    1e26:	85 30       	cpi	r24, 0x05	; 5
    1e28:	f8 f6       	brcc	.-66     	; 0x1de8 <UART_Admin_Interfacing+0x1e8>
				}
			}
		
			brightness_level = uart_var;
			uart_var = 0;
			DIMMER_CONTROL(brightness_level); 
    1e2a:	80 2f       	mov	r24, r16
    1e2c:	0e 94 c5 0a 	call	0x158a	; 0x158a <DIMMER_CONTROL>
    1e30:	19 cf       	rjmp	.-462    	; 0x1c64 <UART_Admin_Interfacing+0x64>
					
		}	
		else if(option == '3')
    1e32:	03 33       	cpi	r16, 0x33	; 51
    1e34:	59 f5       	brne	.+86     	; 0x1e8c <UART_Admin_Interfacing+0x28c>
		{
			openDoor();
    1e36:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <openDoor>
			UART_Send_String("\r");
    1e3a:	89 e8       	ldi	r24, 0x89	; 137
    1e3c:	95 e0       	ldi	r25, 0x05	; 5
    1e3e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Transmit('\r');
    1e42:	8d e0       	ldi	r24, 0x0D	; 13
    1e44:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Send_String("The door is opened");
    1e48:	8b e8       	ldi	r24, 0x8B	; 139
    1e4a:	95 e0       	ldi	r25, 0x05	; 5
    1e4c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Send_String("\r");
    1e50:	89 e8       	ldi	r24, 0x89	; 137
    1e52:	95 e0       	ldi	r25, 0x05	; 5
    1e54:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Transmit('\r');
    1e58:	8d e0       	ldi	r24, 0x0D	; 13
    1e5a:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		
			LCD_Write_String("  The door is");
    1e5e:	85 ea       	ldi	r24, 0xA5	; 165
    1e60:	92 e0       	ldi	r25, 0x02	; 2
    1e62:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    1e66:	80 ec       	ldi	r24, 0xC0	; 192
    1e68:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
			LCD_Write_String("     Opened");
    1e6c:	8e e9       	ldi	r24, 0x9E	; 158
    1e6e:	95 e0       	ldi	r25, 0x05	; 5
    1e70:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    1e74:	8f ef       	ldi	r24, 0xFF	; 255
    1e76:	99 e6       	ldi	r25, 0x69	; 105
    1e78:	e8 e1       	ldi	r30, 0x18	; 24
    1e7a:	81 50       	subi	r24, 0x01	; 1
    1e7c:	90 40       	sbci	r25, 0x00	; 0
    1e7e:	e0 40       	sbci	r30, 0x00	; 0
    1e80:	e1 f7       	brne	.-8      	; 0x1e7a <UART_Admin_Interfacing+0x27a>
    1e82:	00 c0       	rjmp	.+0      	; 0x1e84 <UART_Admin_Interfacing+0x284>
    1e84:	00 00       	nop
			_delay_ms(500);
			LCD_Clear_Screen();
    1e86:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    1e8a:	ec ce       	rjmp	.-552    	; 0x1c64 <UART_Admin_Interfacing+0x64>
		}
		else if(option == '4')
    1e8c:	04 33       	cpi	r16, 0x34	; 52
    1e8e:	59 f5       	brne	.+86     	; 0x1ee6 <UART_Admin_Interfacing+0x2e6>
		{
			closeDoor();
    1e90:	0e 94 01 0b 	call	0x1602	; 0x1602 <closeDoor>
			UART_Send_String("\r");
    1e94:	89 e8       	ldi	r24, 0x89	; 137
    1e96:	95 e0       	ldi	r25, 0x05	; 5
    1e98:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Transmit('\r');
    1e9c:	8d e0       	ldi	r24, 0x0D	; 13
    1e9e:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Send_String("The door is closed");
    1ea2:	8a ea       	ldi	r24, 0xAA	; 170
    1ea4:	95 e0       	ldi	r25, 0x05	; 5
    1ea6:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Send_String("\r");
    1eaa:	89 e8       	ldi	r24, 0x89	; 137
    1eac:	95 e0       	ldi	r25, 0x05	; 5
    1eae:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Transmit('\r');
    1eb2:	8d e0       	ldi	r24, 0x0D	; 13
    1eb4:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		
			LCD_Write_String("  The door is");
    1eb8:	85 ea       	ldi	r24, 0xA5	; 165
    1eba:	92 e0       	ldi	r25, 0x02	; 2
    1ebc:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    1ec0:	80 ec       	ldi	r24, 0xC0	; 192
    1ec2:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
			LCD_Write_String("    Closed");
    1ec6:	83 eb       	ldi	r24, 0xB3	; 179
    1ec8:	92 e0       	ldi	r25, 0x02	; 2
    1eca:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    1ece:	ff ef       	ldi	r31, 0xFF	; 255
    1ed0:	29 e6       	ldi	r18, 0x69	; 105
    1ed2:	88 e1       	ldi	r24, 0x18	; 24
    1ed4:	f1 50       	subi	r31, 0x01	; 1
    1ed6:	20 40       	sbci	r18, 0x00	; 0
    1ed8:	80 40       	sbci	r24, 0x00	; 0
    1eda:	e1 f7       	brne	.-8      	; 0x1ed4 <UART_Admin_Interfacing+0x2d4>
    1edc:	00 c0       	rjmp	.+0      	; 0x1ede <UART_Admin_Interfacing+0x2de>
    1ede:	00 00       	nop
			_delay_ms(500);
			LCD_Clear_Screen();
    1ee0:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    1ee4:	bf ce       	rjmp	.-642    	; 0x1c64 <UART_Admin_Interfacing+0x64>
		}
	
		else if(option == '5')	// Add Admin to the system
    1ee6:	05 33       	cpi	r16, 0x35	; 53
    1ee8:	09 f0       	breq	.+2      	; 0x1eec <UART_Admin_Interfacing+0x2ec>
    1eea:	cf c0       	rjmp	.+414    	; 0x208a <UART_Admin_Interfacing+0x48a>
		{
				EEPROM_readByte(Counters_Block,Admins_number_BIT,&max_number_var);
    1eec:	ae 01       	movw	r20, r28
    1eee:	45 5e       	subi	r20, 0xE5	; 229
    1ef0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef2:	61 e0       	ldi	r22, 0x01	; 1
    1ef4:	8e ea       	ldi	r24, 0xAE	; 174
    1ef6:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
    1efa:	ef e3       	ldi	r30, 0x3F	; 63
    1efc:	fc e9       	ldi	r31, 0x9C	; 156
    1efe:	31 97       	sbiw	r30, 0x01	; 1
    1f00:	f1 f7       	brne	.-4      	; 0x1efe <UART_Admin_Interfacing+0x2fe>
    1f02:	00 c0       	rjmp	.+0      	; 0x1f04 <UART_Admin_Interfacing+0x304>
    1f04:	00 00       	nop
				_delay_ms(10);
				
				if(max_number_var < ADMINS_MAX_NO)
    1f06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f08:	80 34       	cpi	r24, 0x40	; 64
    1f0a:	08 f0       	brcs	.+2      	; 0x1f0e <UART_Admin_Interfacing+0x30e>
    1f0c:	a3 c0       	rjmp	.+326    	; 0x2054 <UART_Admin_Interfacing+0x454>
				{
					/*-----------------	Writing the username -----------------*/
					UART_Transmit('\r');
    1f0e:	8d e0       	ldi	r24, 0x0D	; 13
    1f10:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Transmit('\r');
    1f14:	8d e0       	ldi	r24, 0x0D	; 13
    1f16:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Send_String("Enter Username : ");
    1f1a:	87 ea       	ldi	r24, 0xA7	; 167
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>

					while(looping_counter < LOGIN_SIZE)
    1f22:	14 30       	cpi	r17, 0x04	; 4
    1f24:	88 f4       	brcc	.+34     	; 0x1f48 <UART_Admin_Interfacing+0x348>
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
						{
							uart_var = UART_Receive();
    1f26:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
    1f2a:	08 2f       	mov	r16, r24
					UART_Send_String("Enter Username : ");

					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1f2c:	80 ed       	ldi	r24, 0xD0	; 208
    1f2e:	80 0f       	add	r24, r16
    1f30:	8a 30       	cpi	r24, 0x0A	; 10
    1f32:	c8 f7       	brcc	.-14     	; 0x1f26 <UART_Admin_Interfacing+0x326>
						{
							uart_var = UART_Receive();
						}
						
						UART_Transmit(uart_var);
    1f34:	80 2f       	mov	r24, r16
    1f36:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
						username_arr[looping_counter] = uart_var;
    1f3a:	f7 01       	movw	r30, r14
    1f3c:	e1 0f       	add	r30, r17
    1f3e:	f1 1d       	adc	r31, r1
    1f40:	00 83       	st	Z, r16
						looping_counter++;
    1f42:	1f 5f       	subi	r17, 0xFF	; 255
					/*-----------------	Writing the username -----------------*/
					UART_Transmit('\r');
					UART_Transmit('\r');
					UART_Send_String("Enter Username : ");

					while(looping_counter < LOGIN_SIZE)
    1f44:	14 30       	cpi	r17, 0x04	; 4
    1f46:	79 f7       	brne	.-34     	; 0x1f26 <UART_Admin_Interfacing+0x326>
						UART_Transmit(uart_var);
						username_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
					UART_Transmit('\r');
    1f48:	8d e0       	ldi	r24, 0x0D	; 13
    1f4a:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					
					/*-----------------	Writing the password -----------------*/
					UART_Send_String("Enter Password : ");
    1f4e:	89 eb       	ldi	r24, 0xB9	; 185
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
    1f56:	3e 01       	movw	r6, r28
    1f58:	f5 e0       	ldi	r31, 0x05	; 5
    1f5a:	6f 0e       	add	r6, r31
    1f5c:	71 1c       	adc	r7, r1
    1f5e:	63 01       	movw	r12, r6
					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
						{
							uart_var = UART_Receive();
    1f60:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
    1f64:	18 2f       	mov	r17, r24
					UART_Send_String("Enter Password : ");

					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    1f66:	80 ed       	ldi	r24, 0xD0	; 208
    1f68:	81 0f       	add	r24, r17
    1f6a:	8a 30       	cpi	r24, 0x0A	; 10
    1f6c:	c8 f7       	brcc	.-14     	; 0x1f60 <UART_Admin_Interfacing+0x360>
						{
							uart_var = UART_Receive();
						}
						
						UART_Transmit(uart_var);
    1f6e:	81 2f       	mov	r24, r17
    1f70:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
						password_arr[looping_counter] = uart_var;
    1f74:	f6 01       	movw	r30, r12
    1f76:	11 93       	st	Z+, r17
    1f78:	6f 01       	movw	r12, r30
					UART_Transmit('\r');
					
					/*-----------------	Writing the password -----------------*/
					UART_Send_String("Enter Password : ");

					while(looping_counter < LOGIN_SIZE)
    1f7a:	e4 15       	cp	r30, r4
    1f7c:	f5 05       	cpc	r31, r5
    1f7e:	81 f7       	brne	.-32     	; 0x1f60 <UART_Admin_Interfacing+0x360>
						UART_Transmit(uart_var);
						password_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
					UART_Transmit('\r');
    1f80:	8d e0       	ldi	r24, 0x0D	; 13
    1f82:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					
					EEPROM_readByte(Counters_Block,Admins_number_BIT,&admin_counter);
    1f86:	ae 01       	movw	r20, r28
    1f88:	47 5e       	subi	r20, 0xE7	; 231
    1f8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f8c:	61 e0       	ldi	r22, 0x01	; 1
    1f8e:	8e ea       	ldi	r24, 0xAE	; 174
    1f90:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
    1f94:	8f e3       	ldi	r24, 0x3F	; 63
    1f96:	9c e9       	ldi	r25, 0x9C	; 156
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	f1 f7       	brne	.-4      	; 0x1f98 <UART_Admin_Interfacing+0x398>
    1f9c:	00 c0       	rjmp	.+0      	; 0x1f9e <UART_Admin_Interfacing+0x39e>
    1f9e:	00 00       	nop
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	31 96       	adiw	r30, 0x01	; 1
    1fa4:	6f 01       	movw	r12, r30
					_delay_ms(10);
				
					for(char i = 0; i < LOGIN_SIZE; i++)
    1fa6:	b1 2c       	mov	r11, r1
    1fa8:	1b 2d       	mov	r17, r11
					{
						EEPROM_writeByte(Admin_Username_Block, (4*admin_counter)+i, username_arr[i]);
    1faa:	f6 01       	movw	r30, r12
    1fac:	41 91       	ld	r20, Z+
    1fae:	6f 01       	movw	r12, r30
    1fb0:	69 8d       	ldd	r22, Y+25	; 0x19
    1fb2:	66 0f       	add	r22, r22
    1fb4:	66 0f       	add	r22, r22
    1fb6:	61 0f       	add	r22, r17
    1fb8:	82 ea       	ldi	r24, 0xA2	; 162
    1fba:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <EEPROM_writeByte>
    1fbe:	8f e3       	ldi	r24, 0x3F	; 63
    1fc0:	9c e9       	ldi	r25, 0x9C	; 156
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	f1 f7       	brne	.-4      	; 0x1fc2 <UART_Admin_Interfacing+0x3c2>
    1fc6:	00 c0       	rjmp	.+0      	; 0x1fc8 <UART_Admin_Interfacing+0x3c8>
    1fc8:	00 00       	nop
						_delay_ms(10);
						EEPROM_writeByte(Admin_Password_Block, (4*admin_counter)+i, password_arr[i]);
    1fca:	f3 01       	movw	r30, r6
    1fcc:	41 91       	ld	r20, Z+
    1fce:	3f 01       	movw	r6, r30
    1fd0:	69 8d       	ldd	r22, Y+25	; 0x19
    1fd2:	66 0f       	add	r22, r22
    1fd4:	66 0f       	add	r22, r22
    1fd6:	61 0f       	add	r22, r17
    1fd8:	84 ea       	ldi	r24, 0xA4	; 164
    1fda:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <EEPROM_writeByte>
    1fde:	8f e3       	ldi	r24, 0x3F	; 63
    1fe0:	9c e9       	ldi	r25, 0x9C	; 156
    1fe2:	01 97       	sbiw	r24, 0x01	; 1
    1fe4:	f1 f7       	brne	.-4      	; 0x1fe2 <UART_Admin_Interfacing+0x3e2>
    1fe6:	00 c0       	rjmp	.+0      	; 0x1fe8 <UART_Admin_Interfacing+0x3e8>
    1fe8:	00 00       	nop
					UART_Transmit('\r');
					
					EEPROM_readByte(Counters_Block,Admins_number_BIT,&admin_counter);
					_delay_ms(10);
				
					for(char i = 0; i < LOGIN_SIZE; i++)
    1fea:	1f 5f       	subi	r17, 0xFF	; 255
    1fec:	14 30       	cpi	r17, 0x04	; 4
    1fee:	e9 f6       	brne	.-70     	; 0x1faa <UART_Admin_Interfacing+0x3aa>
						EEPROM_writeByte(Admin_Username_Block, (4*admin_counter)+i, username_arr[i]);
						_delay_ms(10);
						EEPROM_writeByte(Admin_Password_Block, (4*admin_counter)+i, password_arr[i]);
						_delay_ms(10);
					}
					admin_counter++;
    1ff0:	49 8d       	ldd	r20, Y+25	; 0x19
    1ff2:	4f 5f       	subi	r20, 0xFF	; 255
    1ff4:	49 8f       	std	Y+25, r20	; 0x19
					EEPROM_writeByte(Counters_Block,Admins_number_BIT,admin_counter);
    1ff6:	61 e0       	ldi	r22, 0x01	; 1
    1ff8:	8e ea       	ldi	r24, 0xAE	; 174
    1ffa:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <EEPROM_writeByte>
    1ffe:	ef e3       	ldi	r30, 0x3F	; 63
    2000:	fc e9       	ldi	r31, 0x9C	; 156
    2002:	31 97       	sbiw	r30, 0x01	; 1
    2004:	f1 f7       	brne	.-4      	; 0x2002 <UART_Admin_Interfacing+0x402>
    2006:	00 c0       	rjmp	.+0      	; 0x2008 <UART_Admin_Interfacing+0x408>
    2008:	00 00       	nop
					_delay_ms(10);		
				
					UART_Send_String("The admin is added successfully");
    200a:	8d eb       	ldi	r24, 0xBD	; 189
    200c:	95 e0       	ldi	r25, 0x05	; 5
    200e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
					UART_Transmit('\r');
    2012:	8d e0       	ldi	r24, 0x0D	; 13
    2014:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Transmit('\r');
    2018:	8d e0       	ldi	r24, 0x0D	; 13
    201a:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					
					
					LCD_Set_Cursor(0,1);
    201e:	61 e0       	ldi	r22, 0x01	; 1
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_Set_Cursor>
					LCD_Write_String("Admin is added");
    2026:	8d ed       	ldi	r24, 0xDD	; 221
    2028:	95 e0       	ldi	r25, 0x05	; 5
    202a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
					LCD_Set_Cursor(1,2);
    202e:	62 e0       	ldi	r22, 0x02	; 2
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_Set_Cursor>
					LCD_Write_String("successfully");
    2036:	80 ed       	ldi	r24, 0xD0	; 208
    2038:	95 e0       	ldi	r25, 0x05	; 5
    203a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    203e:	ff ef       	ldi	r31, 0xFF	; 255
    2040:	29 e6       	ldi	r18, 0x69	; 105
    2042:	88 e1       	ldi	r24, 0x18	; 24
    2044:	f1 50       	subi	r31, 0x01	; 1
    2046:	20 40       	sbci	r18, 0x00	; 0
    2048:	80 40       	sbci	r24, 0x00	; 0
    204a:	e1 f7       	brne	.-8      	; 0x2044 <UART_Admin_Interfacing+0x444>
    204c:	00 c0       	rjmp	.+0      	; 0x204e <UART_Admin_Interfacing+0x44e>
    204e:	00 00       	nop
						
						UART_Transmit(uart_var);
						password_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
    2050:	10 e0       	ldi	r17, 0x00	; 0
    2052:	08 ce       	rjmp	.-1008   	; 0x1c64 <UART_Admin_Interfacing+0x64>
					_delay_ms(500);
					
				}
				else
				{
					UART_Send_String("Sorry, the maximum number for users is 64 users");
    2054:	8c ee       	ldi	r24, 0xEC	; 236
    2056:	95 e0       	ldi	r25, 0x05	; 5
    2058:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
					UART_Transmit('\r');
    205c:	8d e0       	ldi	r24, 0x0D	; 13
    205e:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Send_String("The system can't add more");
    2062:	8c e1       	ldi	r24, 0x1C	; 28
    2064:	96 e0       	ldi	r25, 0x06	; 6
    2066:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
					UART_Transmit('\r');
    206a:	8d e0       	ldi	r24, 0x0D	; 13
    206c:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Transmit('\r');
    2070:	8d e0       	ldi	r24, 0x0D	; 13
    2072:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
    2076:	9f ef       	ldi	r25, 0xFF	; 255
    2078:	e9 e6       	ldi	r30, 0x69	; 105
    207a:	f8 e1       	ldi	r31, 0x18	; 24
    207c:	91 50       	subi	r25, 0x01	; 1
    207e:	e0 40       	sbci	r30, 0x00	; 0
    2080:	f0 40       	sbci	r31, 0x00	; 0
    2082:	e1 f7       	brne	.-8      	; 0x207c <UART_Admin_Interfacing+0x47c>
    2084:	00 c0       	rjmp	.+0      	; 0x2086 <UART_Admin_Interfacing+0x486>
    2086:	00 00       	nop
    2088:	ed cd       	rjmp	.-1062   	; 0x1c64 <UART_Admin_Interfacing+0x64>
					_delay_ms(500);	
				}
		}
	
		else if(option == '6')	// Add a user to the system
    208a:	06 33       	cpi	r16, 0x36	; 54
    208c:	09 f0       	breq	.+2      	; 0x2090 <UART_Admin_Interfacing+0x490>
    208e:	d6 c1       	rjmp	.+940    	; 0x243c <UART_Admin_Interfacing+0x83c>
		{
			UART_Transmit('\r');
    2090:	8d e0       	ldi	r24, 0x0D	; 13
    2092:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Transmit('\r');
    2096:	8d e0       	ldi	r24, 0x0D	; 13
    2098:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Send_String("1. Remote User (UART)");
    209c:	86 e3       	ldi	r24, 0x36	; 54
    209e:	96 e0       	ldi	r25, 0x06	; 6
    20a0:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Transmit('\r');
    20a4:	8d e0       	ldi	r24, 0x0D	; 13
    20a6:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Send_String("2. LCD & Keypad User ");
    20aa:	8c e4       	ldi	r24, 0x4C	; 76
    20ac:	96 e0       	ldi	r25, 0x06	; 6
    20ae:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Transmit('\r');
    20b2:	8d e0       	ldi	r24, 0x0D	; 13
    20b4:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Transmit('\r');
    20b8:	8d e0       	ldi	r24, 0x0D	; 13
    20ba:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			
			UART_Send_String("Your choice : ");
    20be:	88 e3       	ldi	r24, 0x38	; 56
    20c0:	93 e0       	ldi	r25, 0x03	; 3
    20c2:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			
			uart_var = 0;
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
			{
				uart_var = UART_Receive();
    20c6:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
    20ca:	08 2f       	mov	r16, r24
				UART_Transmit(uart_var);
    20cc:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Transmit('\r');
			
			UART_Send_String("Your choice : ");
			
			uart_var = 0;
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    20d0:	80 ed       	ldi	r24, 0xD0	; 208
    20d2:	80 0f       	add	r24, r16
    20d4:	8a 30       	cpi	r24, 0x0A	; 10
    20d6:	b8 f7       	brcc	.-18     	; 0x20c6 <UART_Admin_Interfacing+0x4c6>
			{
				uart_var = UART_Receive();
				UART_Transmit(uart_var);
			}
			
			while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_2)))
    20d8:	8f ec       	ldi	r24, 0xCF	; 207
    20da:	80 0f       	add	r24, r16
    20dc:	82 30       	cpi	r24, 0x02	; 2
    20de:	e0 f0       	brcs	.+56     	; 0x2118 <UART_Admin_Interfacing+0x518>
			{
				UART_Send_String ("Please Choose only 1 or 2");
    20e0:	8e e1       	ldi	r24, 0x1E	; 30
    20e2:	93 e0       	ldi	r25, 0x03	; 3
    20e4:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
				UART_Transmit('\r');
    20e8:	8d e0       	ldi	r24, 0x0D	; 13
    20ea:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				UART_Transmit('\r');
    20ee:	8d e0       	ldi	r24, 0x0D	; 13
    20f0:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				uart_var = 0;
				UART_Send_String("Your choice : ");
    20f4:	88 e3       	ldi	r24, 0x38	; 56
    20f6:	93 e0       	ldi	r25, 0x03	; 3
    20f8:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
				{
					uart_var = UART_Receive();
    20fc:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
    2100:	08 2f       	mov	r16, r24
				UART_Send_String ("Please Choose only 1 or 2");
				UART_Transmit('\r');
				UART_Transmit('\r');
				uart_var = 0;
				UART_Send_String("Your choice : ");
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    2102:	80 ed       	ldi	r24, 0xD0	; 208
    2104:	80 0f       	add	r24, r16
    2106:	8a 30       	cpi	r24, 0x0A	; 10
    2108:	c8 f7       	brcc	.-14     	; 0x20fc <UART_Admin_Interfacing+0x4fc>
				{
					uart_var = UART_Receive();
				}
				UART_Transmit(uart_var);
    210a:	80 2f       	mov	r24, r16
    210c:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			{
				uart_var = UART_Receive();
				UART_Transmit(uart_var);
			}
			
			while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_2)))
    2110:	8f ec       	ldi	r24, 0xCF	; 207
    2112:	80 0f       	add	r24, r16
    2114:	82 30       	cpi	r24, 0x02	; 2
    2116:	20 f7       	brcc	.-56     	; 0x20e0 <UART_Admin_Interfacing+0x4e0>
				UART_Transmit(uart_var);
			}
			user_type = uart_var;
			
			
			if(user_type == '1')	// uart_user
    2118:	01 33       	cpi	r16, 0x31	; 49
    211a:	09 f0       	breq	.+2      	; 0x211e <UART_Admin_Interfacing+0x51e>
    211c:	d0 c0       	rjmp	.+416    	; 0x22be <UART_Admin_Interfacing+0x6be>
			{
				EEPROM_readByte(Counters_Block,Users_UART_number_BIT,&max_number_var);
    211e:	ae 01       	movw	r20, r28
    2120:	45 5e       	subi	r20, 0xE5	; 229
    2122:	5f 4f       	sbci	r21, 0xFF	; 255
    2124:	62 e0       	ldi	r22, 0x02	; 2
    2126:	8e ea       	ldi	r24, 0xAE	; 174
    2128:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
    212c:	8f e3       	ldi	r24, 0x3F	; 63
    212e:	9c e9       	ldi	r25, 0x9C	; 156
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	f1 f7       	brne	.-4      	; 0x2130 <UART_Admin_Interfacing+0x530>
    2134:	00 c0       	rjmp	.+0      	; 0x2136 <UART_Admin_Interfacing+0x536>
    2136:	00 00       	nop
				_delay_ms(10);
				
				if(max_number_var < USERS_MAX_NO)
    2138:	8b 8d       	ldd	r24, Y+27	; 0x1b
    213a:	80 34       	cpi	r24, 0x40	; 64
    213c:	08 f0       	brcs	.+2      	; 0x2140 <UART_Admin_Interfacing+0x540>
    213e:	a4 c0       	rjmp	.+328    	; 0x2288 <UART_Admin_Interfacing+0x688>
				{
					/*-----------------	Writing the username -----------------*/
					UART_Transmit('\r');
    2140:	8d e0       	ldi	r24, 0x0D	; 13
    2142:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Transmit('\r');
    2146:	8d e0       	ldi	r24, 0x0D	; 13
    2148:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Send_String("Enter Username : ");
    214c:	87 ea       	ldi	r24, 0xA7	; 167
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>

					while(looping_counter < LOGIN_SIZE)
    2154:	14 30       	cpi	r17, 0x04	; 4
    2156:	88 f4       	brcc	.+34     	; 0x217a <UART_Admin_Interfacing+0x57a>
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
						{
							uart_var = UART_Receive();
    2158:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
    215c:	08 2f       	mov	r16, r24
					UART_Send_String("Enter Username : ");

					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    215e:	80 ed       	ldi	r24, 0xD0	; 208
    2160:	80 0f       	add	r24, r16
    2162:	8a 30       	cpi	r24, 0x0A	; 10
    2164:	c8 f7       	brcc	.-14     	; 0x2158 <UART_Admin_Interfacing+0x558>
						{
							uart_var = UART_Receive();
						}
						
						UART_Transmit(uart_var);
    2166:	80 2f       	mov	r24, r16
    2168:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
						username_arr[looping_counter] = uart_var;
    216c:	f7 01       	movw	r30, r14
    216e:	e1 0f       	add	r30, r17
    2170:	f1 1d       	adc	r31, r1
    2172:	00 83       	st	Z, r16
						looping_counter++;
    2174:	1f 5f       	subi	r17, 0xFF	; 255
					/*-----------------	Writing the username -----------------*/
					UART_Transmit('\r');
					UART_Transmit('\r');
					UART_Send_String("Enter Username : ");

					while(looping_counter < LOGIN_SIZE)
    2176:	14 30       	cpi	r17, 0x04	; 4
    2178:	79 f7       	brne	.-34     	; 0x2158 <UART_Admin_Interfacing+0x558>
						UART_Transmit(uart_var);
						username_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
					UART_Transmit('\r');
    217a:	8d e0       	ldi	r24, 0x0D	; 13
    217c:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					
					/*-----------------	Writing the password -----------------*/
					UART_Send_String("Enter Password : ");
    2180:	89 eb       	ldi	r24, 0xB9	; 185
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
    2188:	8e 01       	movw	r16, r28
    218a:	0b 5f       	subi	r16, 0xFB	; 251
    218c:	1f 4f       	sbci	r17, 0xFF	; 255
    218e:	68 01       	movw	r12, r16
    2190:	58 01       	movw	r10, r16
					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
						{
							uart_var = UART_Receive();
    2192:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
    2196:	18 2f       	mov	r17, r24
					UART_Send_String("Enter Password : ");

					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    2198:	80 ed       	ldi	r24, 0xD0	; 208
    219a:	81 0f       	add	r24, r17
    219c:	8a 30       	cpi	r24, 0x0A	; 10
    219e:	c8 f7       	brcc	.-14     	; 0x2192 <UART_Admin_Interfacing+0x592>
						{
							uart_var = UART_Receive();
						}
						
						UART_Transmit(uart_var);
    21a0:	81 2f       	mov	r24, r17
    21a2:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
						password_arr[looping_counter] = uart_var;
    21a6:	f6 01       	movw	r30, r12
    21a8:	11 93       	st	Z+, r17
    21aa:	6f 01       	movw	r12, r30
					UART_Transmit('\r');
					
					/*-----------------	Writing the password -----------------*/
					UART_Send_String("Enter Password : ");

					while(looping_counter < LOGIN_SIZE)
    21ac:	4e 16       	cp	r4, r30
    21ae:	5f 06       	cpc	r5, r31
    21b0:	81 f7       	brne	.-32     	; 0x2192 <UART_Admin_Interfacing+0x592>
    21b2:	85 01       	movw	r16, r10
						UART_Transmit(uart_var);
						password_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
					UART_Transmit('\r');
    21b4:	8d e0       	ldi	r24, 0x0D	; 13
    21b6:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					
					EEPROM_readByte(Counters_Block,Users_UART_number_BIT,&user_counter);
    21ba:	ae 01       	movw	r20, r28
    21bc:	46 5e       	subi	r20, 0xE6	; 230
    21be:	5f 4f       	sbci	r21, 0xFF	; 255
    21c0:	62 e0       	ldi	r22, 0x02	; 2
    21c2:	8e ea       	ldi	r24, 0xAE	; 174
    21c4:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
    21c8:	8f e3       	ldi	r24, 0x3F	; 63
    21ca:	9c e9       	ldi	r25, 0x9C	; 156
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	f1 f7       	brne	.-4      	; 0x21cc <UART_Admin_Interfacing+0x5cc>
    21d0:	00 c0       	rjmp	.+0      	; 0x21d2 <UART_Admin_Interfacing+0x5d2>
    21d2:	00 00       	nop
    21d4:	fe 01       	movw	r30, r28
    21d6:	31 96       	adiw	r30, 0x01	; 1
    21d8:	6f 01       	movw	r12, r30
					_delay_ms(10);
					
					for(char i = 0; i < LOGIN_SIZE; i++)
    21da:	b1 2c       	mov	r11, r1
					{
						EEPROM_writeByte(UART_User_Username_Block, (4*user_counter)+i, username_arr[i]);
    21dc:	f6 01       	movw	r30, r12
    21de:	41 91       	ld	r20, Z+
    21e0:	6f 01       	movw	r12, r30
    21e2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    21e4:	66 0f       	add	r22, r22
    21e6:	66 0f       	add	r22, r22
    21e8:	6b 0d       	add	r22, r11
    21ea:	86 ea       	ldi	r24, 0xA6	; 166
    21ec:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <EEPROM_writeByte>
    21f0:	8f e3       	ldi	r24, 0x3F	; 63
    21f2:	9c e9       	ldi	r25, 0x9C	; 156
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	f1 f7       	brne	.-4      	; 0x21f4 <UART_Admin_Interfacing+0x5f4>
    21f8:	00 c0       	rjmp	.+0      	; 0x21fa <UART_Admin_Interfacing+0x5fa>
    21fa:	00 00       	nop
						_delay_ms(10);
						EEPROM_writeByte(UART_User_Password_Block, (4*user_counter)+i, password_arr[i]);
    21fc:	f8 01       	movw	r30, r16
    21fe:	41 91       	ld	r20, Z+
    2200:	8f 01       	movw	r16, r30
    2202:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2204:	66 0f       	add	r22, r22
    2206:	66 0f       	add	r22, r22
    2208:	6b 0d       	add	r22, r11
    220a:	88 ea       	ldi	r24, 0xA8	; 168
    220c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <EEPROM_writeByte>
    2210:	8f e3       	ldi	r24, 0x3F	; 63
    2212:	9c e9       	ldi	r25, 0x9C	; 156
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <UART_Admin_Interfacing+0x614>
    2218:	00 c0       	rjmp	.+0      	; 0x221a <UART_Admin_Interfacing+0x61a>
    221a:	00 00       	nop
					UART_Transmit('\r');
					
					EEPROM_readByte(Counters_Block,Users_UART_number_BIT,&user_counter);
					_delay_ms(10);
					
					for(char i = 0; i < LOGIN_SIZE; i++)
    221c:	b3 94       	inc	r11
    221e:	94 e0       	ldi	r25, 0x04	; 4
    2220:	b9 12       	cpse	r11, r25
    2222:	dc cf       	rjmp	.-72     	; 0x21dc <UART_Admin_Interfacing+0x5dc>
						EEPROM_writeByte(UART_User_Username_Block, (4*user_counter)+i, username_arr[i]);
						_delay_ms(10);
						EEPROM_writeByte(UART_User_Password_Block, (4*user_counter)+i, password_arr[i]);
						_delay_ms(10);
					}
					user_counter++;
    2224:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2226:	4f 5f       	subi	r20, 0xFF	; 255
    2228:	4a 8f       	std	Y+26, r20	; 0x1a
					EEPROM_writeByte(Counters_Block,Users_UART_number_BIT,user_counter);
    222a:	62 e0       	ldi	r22, 0x02	; 2
    222c:	8e ea       	ldi	r24, 0xAE	; 174
    222e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <EEPROM_writeByte>
    2232:	ef e3       	ldi	r30, 0x3F	; 63
    2234:	fc e9       	ldi	r31, 0x9C	; 156
    2236:	31 97       	sbiw	r30, 0x01	; 1
    2238:	f1 f7       	brne	.-4      	; 0x2236 <UART_Admin_Interfacing+0x636>
    223a:	00 c0       	rjmp	.+0      	; 0x223c <UART_Admin_Interfacing+0x63c>
    223c:	00 00       	nop
					_delay_ms(10);		
				
					UART_Send_String("The user is added successfully");
    223e:	82 e6       	ldi	r24, 0x62	; 98
    2240:	96 e0       	ldi	r25, 0x06	; 6
    2242:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
					UART_Transmit('\r');
    2246:	8d e0       	ldi	r24, 0x0D	; 13
    2248:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Transmit('\r');
    224c:	8d e0       	ldi	r24, 0x0D	; 13
    224e:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					
					LCD_Set_Cursor(0,1);
    2252:	61 e0       	ldi	r22, 0x01	; 1
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_Set_Cursor>
					LCD_Write_String("User is added");
    225a:	81 e8       	ldi	r24, 0x81	; 129
    225c:	96 e0       	ldi	r25, 0x06	; 6
    225e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
					LCD_Set_Cursor(1,2);
    2262:	62 e0       	ldi	r22, 0x02	; 2
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	0e 94 be 06 	call	0xd7c	; 0xd7c <LCD_Set_Cursor>
					LCD_Write_String("successfully");
    226a:	80 ed       	ldi	r24, 0xD0	; 208
    226c:	95 e0       	ldi	r25, 0x05	; 5
    226e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    2272:	ff ef       	ldi	r31, 0xFF	; 255
    2274:	21 ee       	ldi	r18, 0xE1	; 225
    2276:	84 e0       	ldi	r24, 0x04	; 4
    2278:	f1 50       	subi	r31, 0x01	; 1
    227a:	20 40       	sbci	r18, 0x00	; 0
    227c:	80 40       	sbci	r24, 0x00	; 0
    227e:	e1 f7       	brne	.-8      	; 0x2278 <UART_Admin_Interfacing+0x678>
    2280:	00 c0       	rjmp	.+0      	; 0x2282 <UART_Admin_Interfacing+0x682>
    2282:	00 00       	nop
						
						UART_Transmit(uart_var);
						password_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
    2284:	10 e0       	ldi	r17, 0x00	; 0
    2286:	ee cc       	rjmp	.-1572   	; 0x1c64 <UART_Admin_Interfacing+0x64>
					
					_delay_ms(100);	
				}
				else
				{
					UART_Send_String("Sorry, the maximum number for users is 64 users");
    2288:	8c ee       	ldi	r24, 0xEC	; 236
    228a:	95 e0       	ldi	r25, 0x05	; 5
    228c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
					UART_Transmit('\r');
    2290:	8d e0       	ldi	r24, 0x0D	; 13
    2292:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Send_String("The system can't add more");
    2296:	8c e1       	ldi	r24, 0x1C	; 28
    2298:	96 e0       	ldi	r25, 0x06	; 6
    229a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
					UART_Transmit('\r');
    229e:	8d e0       	ldi	r24, 0x0D	; 13
    22a0:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Transmit('\r');
    22a4:	8d e0       	ldi	r24, 0x0D	; 13
    22a6:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
    22aa:	9f ef       	ldi	r25, 0xFF	; 255
    22ac:	e9 e6       	ldi	r30, 0x69	; 105
    22ae:	f8 e1       	ldi	r31, 0x18	; 24
    22b0:	91 50       	subi	r25, 0x01	; 1
    22b2:	e0 40       	sbci	r30, 0x00	; 0
    22b4:	f0 40       	sbci	r31, 0x00	; 0
    22b6:	e1 f7       	brne	.-8      	; 0x22b0 <UART_Admin_Interfacing+0x6b0>
    22b8:	00 c0       	rjmp	.+0      	; 0x22ba <UART_Admin_Interfacing+0x6ba>
    22ba:	00 00       	nop
    22bc:	d3 cc       	rjmp	.-1626   	; 0x1c64 <UART_Admin_Interfacing+0x64>
					_delay_ms(500);	
				}
			}
			else  // lcd_user
			{
				EEPROM_readByte(Counters_Block,Users_LCD_number_BIT,&max_number_var);
    22be:	ae 01       	movw	r20, r28
    22c0:	45 5e       	subi	r20, 0xE5	; 229
    22c2:	5f 4f       	sbci	r21, 0xFF	; 255
    22c4:	63 e0       	ldi	r22, 0x03	; 3
    22c6:	8e ea       	ldi	r24, 0xAE	; 174
    22c8:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
    22cc:	8f e3       	ldi	r24, 0x3F	; 63
    22ce:	9c e9       	ldi	r25, 0x9C	; 156
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	f1 f7       	brne	.-4      	; 0x22d0 <UART_Admin_Interfacing+0x6d0>
    22d4:	00 c0       	rjmp	.+0      	; 0x22d6 <UART_Admin_Interfacing+0x6d6>
    22d6:	00 00       	nop
				_delay_ms(10);
				
				if(max_number_var < USERS_MAX_NO)
    22d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22da:	80 34       	cpi	r24, 0x40	; 64
    22dc:	08 f0       	brcs	.+2      	; 0x22e0 <UART_Admin_Interfacing+0x6e0>
    22de:	93 c0       	rjmp	.+294    	; 0x2406 <UART_Admin_Interfacing+0x806>
				{
					/*-----------------	Writing the username -----------------*/
					UART_Transmit('\r');
    22e0:	8d e0       	ldi	r24, 0x0D	; 13
    22e2:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Transmit('\r');
    22e6:	8d e0       	ldi	r24, 0x0D	; 13
    22e8:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Send_String("Enter Username : ");
    22ec:	87 ea       	ldi	r24, 0xA7	; 167
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>

					while(looping_counter < LOGIN_SIZE)
    22f4:	14 30       	cpi	r17, 0x04	; 4
    22f6:	88 f4       	brcc	.+34     	; 0x231a <UART_Admin_Interfacing+0x71a>
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
						{
							uart_var = UART_Receive();
    22f8:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
    22fc:	08 2f       	mov	r16, r24
					UART_Send_String("Enter Username : ");

					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    22fe:	80 ed       	ldi	r24, 0xD0	; 208
    2300:	80 0f       	add	r24, r16
    2302:	8a 30       	cpi	r24, 0x0A	; 10
    2304:	c8 f7       	brcc	.-14     	; 0x22f8 <UART_Admin_Interfacing+0x6f8>
						{
							uart_var = UART_Receive();
						}
						
						UART_Transmit(uart_var);
    2306:	80 2f       	mov	r24, r16
    2308:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
						username_arr[looping_counter] = uart_var;
    230c:	f7 01       	movw	r30, r14
    230e:	e1 0f       	add	r30, r17
    2310:	f1 1d       	adc	r31, r1
    2312:	00 83       	st	Z, r16
						looping_counter++;
    2314:	1f 5f       	subi	r17, 0xFF	; 255
					/*-----------------	Writing the username -----------------*/
					UART_Transmit('\r');
					UART_Transmit('\r');
					UART_Send_String("Enter Username : ");

					while(looping_counter < LOGIN_SIZE)
    2316:	14 30       	cpi	r17, 0x04	; 4
    2318:	79 f7       	brne	.-34     	; 0x22f8 <UART_Admin_Interfacing+0x6f8>
						UART_Transmit(uart_var);
						username_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
					UART_Transmit('\r');
    231a:	8d e0       	ldi	r24, 0x0D	; 13
    231c:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					
					/*-----------------	Writing the password -----------------*/
					UART_Send_String("Enter Password : ");
    2320:	89 eb       	ldi	r24, 0xB9	; 185
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
    2328:	3e 01       	movw	r6, r28
    232a:	95 e0       	ldi	r25, 0x05	; 5
    232c:	69 0e       	add	r6, r25
    232e:	71 1c       	adc	r7, r1
    2330:	63 01       	movw	r12, r6
					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
						{
							uart_var = UART_Receive();
    2332:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
    2336:	18 2f       	mov	r17, r24
					UART_Send_String("Enter Password : ");

					while(looping_counter < LOGIN_SIZE)
					{
						uart_var = 0;
						while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    2338:	80 ed       	ldi	r24, 0xD0	; 208
    233a:	81 0f       	add	r24, r17
    233c:	8a 30       	cpi	r24, 0x0A	; 10
    233e:	c8 f7       	brcc	.-14     	; 0x2332 <UART_Admin_Interfacing+0x732>
						{
							uart_var = UART_Receive();
						}
						
						UART_Transmit(uart_var);
    2340:	81 2f       	mov	r24, r17
    2342:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
						password_arr[looping_counter] = uart_var;
    2346:	f6 01       	movw	r30, r12
    2348:	11 93       	st	Z+, r17
    234a:	6f 01       	movw	r12, r30
					UART_Transmit('\r');
					
					/*-----------------	Writing the password -----------------*/
					UART_Send_String("Enter Password : ");

					while(looping_counter < LOGIN_SIZE)
    234c:	e4 15       	cp	r30, r4
    234e:	f5 05       	cpc	r31, r5
    2350:	81 f7       	brne	.-32     	; 0x2332 <UART_Admin_Interfacing+0x732>
						UART_Transmit(uart_var);
						password_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
					UART_Transmit('\r');
    2352:	8d e0       	ldi	r24, 0x0D	; 13
    2354:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					
					EEPROM_readByte(Counters_Block,Users_LCD_number_BIT,&user_counter);
    2358:	ae 01       	movw	r20, r28
    235a:	46 5e       	subi	r20, 0xE6	; 230
    235c:	5f 4f       	sbci	r21, 0xFF	; 255
    235e:	63 e0       	ldi	r22, 0x03	; 3
    2360:	8e ea       	ldi	r24, 0xAE	; 174
    2362:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
    2366:	8f e3       	ldi	r24, 0x3F	; 63
    2368:	9c e9       	ldi	r25, 0x9C	; 156
    236a:	01 97       	sbiw	r24, 0x01	; 1
    236c:	f1 f7       	brne	.-4      	; 0x236a <UART_Admin_Interfacing+0x76a>
    236e:	00 c0       	rjmp	.+0      	; 0x2370 <UART_Admin_Interfacing+0x770>
    2370:	00 00       	nop
    2372:	fe 01       	movw	r30, r28
    2374:	31 96       	adiw	r30, 0x01	; 1
    2376:	6f 01       	movw	r12, r30
					_delay_ms(10);
					
					for(char i = 0; i < LOGIN_SIZE; i++)
    2378:	b1 2c       	mov	r11, r1
    237a:	1b 2d       	mov	r17, r11
					{
						EEPROM_writeByte(LCD_User_Username_Block, (4*user_counter)+i, username_arr[i]);
    237c:	f6 01       	movw	r30, r12
    237e:	41 91       	ld	r20, Z+
    2380:	6f 01       	movw	r12, r30
    2382:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2384:	66 0f       	add	r22, r22
    2386:	66 0f       	add	r22, r22
    2388:	61 0f       	add	r22, r17
    238a:	8a ea       	ldi	r24, 0xAA	; 170
    238c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <EEPROM_writeByte>
    2390:	8f e3       	ldi	r24, 0x3F	; 63
    2392:	9c e9       	ldi	r25, 0x9C	; 156
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	f1 f7       	brne	.-4      	; 0x2394 <UART_Admin_Interfacing+0x794>
    2398:	00 c0       	rjmp	.+0      	; 0x239a <UART_Admin_Interfacing+0x79a>
    239a:	00 00       	nop
						_delay_ms(10);
						EEPROM_writeByte(LCD_User_Password_Block, (4*user_counter)+i, password_arr[i]);
    239c:	f3 01       	movw	r30, r6
    239e:	41 91       	ld	r20, Z+
    23a0:	3f 01       	movw	r6, r30
    23a2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    23a4:	66 0f       	add	r22, r22
    23a6:	66 0f       	add	r22, r22
    23a8:	61 0f       	add	r22, r17
    23aa:	8c ea       	ldi	r24, 0xAC	; 172
    23ac:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <EEPROM_writeByte>
    23b0:	8f e3       	ldi	r24, 0x3F	; 63
    23b2:	9c e9       	ldi	r25, 0x9C	; 156
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	f1 f7       	brne	.-4      	; 0x23b4 <UART_Admin_Interfacing+0x7b4>
    23b8:	00 c0       	rjmp	.+0      	; 0x23ba <UART_Admin_Interfacing+0x7ba>
    23ba:	00 00       	nop
					UART_Transmit('\r');
					
					EEPROM_readByte(Counters_Block,Users_LCD_number_BIT,&user_counter);
					_delay_ms(10);
					
					for(char i = 0; i < LOGIN_SIZE; i++)
    23bc:	1f 5f       	subi	r17, 0xFF	; 255
    23be:	14 30       	cpi	r17, 0x04	; 4
    23c0:	e9 f6       	brne	.-70     	; 0x237c <UART_Admin_Interfacing+0x77c>
						EEPROM_writeByte(LCD_User_Username_Block, (4*user_counter)+i, username_arr[i]);
						_delay_ms(10);
						EEPROM_writeByte(LCD_User_Password_Block, (4*user_counter)+i, password_arr[i]);
						_delay_ms(10);
					}
					user_counter++;
    23c2:	4a 8d       	ldd	r20, Y+26	; 0x1a
    23c4:	4f 5f       	subi	r20, 0xFF	; 255
    23c6:	4a 8f       	std	Y+26, r20	; 0x1a
					EEPROM_writeByte(Counters_Block,Users_LCD_number_BIT,user_counter);
    23c8:	63 e0       	ldi	r22, 0x03	; 3
    23ca:	8e ea       	ldi	r24, 0xAE	; 174
    23cc:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <EEPROM_writeByte>
    23d0:	ef e3       	ldi	r30, 0x3F	; 63
    23d2:	fc e9       	ldi	r31, 0x9C	; 156
    23d4:	31 97       	sbiw	r30, 0x01	; 1
    23d6:	f1 f7       	brne	.-4      	; 0x23d4 <UART_Admin_Interfacing+0x7d4>
    23d8:	00 c0       	rjmp	.+0      	; 0x23da <UART_Admin_Interfacing+0x7da>
    23da:	00 00       	nop
					_delay_ms(10);		
				
					UART_Send_String("The user is added successfully");
    23dc:	82 e6       	ldi	r24, 0x62	; 98
    23de:	96 e0       	ldi	r25, 0x06	; 6
    23e0:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
					UART_Transmit('\r');
    23e4:	8d e0       	ldi	r24, 0x0D	; 13
    23e6:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Transmit('\r');
    23ea:	8d e0       	ldi	r24, 0x0D	; 13
    23ec:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
    23f0:	ff ef       	ldi	r31, 0xFF	; 255
    23f2:	29 e6       	ldi	r18, 0x69	; 105
    23f4:	88 e1       	ldi	r24, 0x18	; 24
    23f6:	f1 50       	subi	r31, 0x01	; 1
    23f8:	20 40       	sbci	r18, 0x00	; 0
    23fa:	80 40       	sbci	r24, 0x00	; 0
    23fc:	e1 f7       	brne	.-8      	; 0x23f6 <UART_Admin_Interfacing+0x7f6>
    23fe:	00 c0       	rjmp	.+0      	; 0x2400 <UART_Admin_Interfacing+0x800>
    2400:	00 00       	nop
						
						UART_Transmit(uart_var);
						password_arr[looping_counter] = uart_var;
						looping_counter++;
					}
					looping_counter = 0;
    2402:	10 e0       	ldi	r17, 0x00	; 0
    2404:	2f cc       	rjmp	.-1954   	; 0x1c64 <UART_Admin_Interfacing+0x64>
					_delay_ms(500);
					
				}
				else
				{
					UART_Send_String("Sorry, the maximum number for users is 64 users");
    2406:	8c ee       	ldi	r24, 0xEC	; 236
    2408:	95 e0       	ldi	r25, 0x05	; 5
    240a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
					UART_Transmit('\r');
    240e:	8d e0       	ldi	r24, 0x0D	; 13
    2410:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Send_String("The system can't add more");
    2414:	8c e1       	ldi	r24, 0x1C	; 28
    2416:	96 e0       	ldi	r25, 0x06	; 6
    2418:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
					UART_Transmit('\r');
    241c:	8d e0       	ldi	r24, 0x0D	; 13
    241e:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Transmit('\r');
    2422:	8d e0       	ldi	r24, 0x0D	; 13
    2424:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
    2428:	9f ef       	ldi	r25, 0xFF	; 255
    242a:	e9 e6       	ldi	r30, 0x69	; 105
    242c:	f8 e1       	ldi	r31, 0x18	; 24
    242e:	91 50       	subi	r25, 0x01	; 1
    2430:	e0 40       	sbci	r30, 0x00	; 0
    2432:	f0 40       	sbci	r31, 0x00	; 0
    2434:	e1 f7       	brne	.-8      	; 0x242e <UART_Admin_Interfacing+0x82e>
    2436:	00 c0       	rjmp	.+0      	; 0x2438 <UART_Admin_Interfacing+0x838>
    2438:	00 00       	nop
    243a:	14 cc       	rjmp	.-2008   	; 0x1c64 <UART_Admin_Interfacing+0x64>
					_delay_ms(500);	
				}
			}
		}
		
		else if(option == '7')	// Delete User from the system
    243c:	07 33       	cpi	r16, 0x37	; 55
    243e:	09 f0       	breq	.+2      	; 0x2442 <UART_Admin_Interfacing+0x842>
    2440:	bc c2       	rjmp	.+1400   	; 0x29ba <UART_Admin_Interfacing+0xdba>
		{
			
			UART_Transmit('\r');
    2442:	8d e0       	ldi	r24, 0x0D	; 13
    2444:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Send_String("1. Delete a remote (UART) User  ");
    2448:	8f e8       	ldi	r24, 0x8F	; 143
    244a:	96 e0       	ldi	r25, 0x06	; 6
    244c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Transmit('\r');
    2450:	8d e0       	ldi	r24, 0x0D	; 13
    2452:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Send_String("2. Delete an LCD & Keypad User  ");
    2456:	80 eb       	ldi	r24, 0xB0	; 176
    2458:	96 e0       	ldi	r25, 0x06	; 6
    245a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Transmit('\r');
    245e:	8d e0       	ldi	r24, 0x0D	; 13
    2460:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Transmit('\r');
    2464:	8d e0       	ldi	r24, 0x0D	; 13
    2466:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			
			UART_Send_String("Your choice : ");
    246a:	88 e3       	ldi	r24, 0x38	; 56
    246c:	93 e0       	ldi	r25, 0x03	; 3
    246e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
	
			uart_var = 0;
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
			{
				uart_var = UART_Receive();
    2472:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
			UART_Transmit('\r');
			
			UART_Send_String("Your choice : ");
	
			uart_var = 0;
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    2476:	90 ed       	ldi	r25, 0xD0	; 208
    2478:	98 0f       	add	r25, r24
    247a:	9a 30       	cpi	r25, 0x0A	; 10
    247c:	d0 f7       	brcc	.-12     	; 0x2472 <UART_Admin_Interfacing+0x872>
    247e:	18 2f       	mov	r17, r24
			{
				uart_var = UART_Receive();
			}
			UART_Transmit(uart_var);
    2480:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			
			while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_2)))
    2484:	8f ec       	ldi	r24, 0xCF	; 207
    2486:	81 0f       	add	r24, r17
    2488:	82 30       	cpi	r24, 0x02	; 2
    248a:	e0 f0       	brcs	.+56     	; 0x24c4 <UART_Admin_Interfacing+0x8c4>
			{
				UART_Send_String ("Please Choose only 1 or 2");
    248c:	8e e1       	ldi	r24, 0x1E	; 30
    248e:	93 e0       	ldi	r25, 0x03	; 3
    2490:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
				UART_Transmit('\r');
    2494:	8d e0       	ldi	r24, 0x0D	; 13
    2496:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				UART_Transmit('\r');
    249a:	8d e0       	ldi	r24, 0x0D	; 13
    249c:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				uart_var = 0;
				UART_Send_String("Your choice : ");
    24a0:	88 e3       	ldi	r24, 0x38	; 56
    24a2:	93 e0       	ldi	r25, 0x03	; 3
    24a4:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
				{
					uart_var = UART_Receive();
    24a8:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
    24ac:	18 2f       	mov	r17, r24
				UART_Send_String ("Please Choose only 1 or 2");
				UART_Transmit('\r');
				UART_Transmit('\r');
				uart_var = 0;
				UART_Send_String("Your choice : ");
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    24ae:	80 ed       	ldi	r24, 0xD0	; 208
    24b0:	81 0f       	add	r24, r17
    24b2:	8a 30       	cpi	r24, 0x0A	; 10
    24b4:	c8 f7       	brcc	.-14     	; 0x24a8 <UART_Admin_Interfacing+0x8a8>
				{
					uart_var = UART_Receive();
				}
				UART_Transmit(uart_var);
    24b6:	81 2f       	mov	r24, r17
    24b8:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			{
				uart_var = UART_Receive();
			}
			UART_Transmit(uart_var);
			
			while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_2)))
    24bc:	8f ec       	ldi	r24, 0xCF	; 207
    24be:	81 0f       	add	r24, r17
    24c0:	82 30       	cpi	r24, 0x02	; 2
    24c2:	20 f7       	brcc	.-56     	; 0x248c <UART_Admin_Interfacing+0x88c>
			}
			
			user_type = uart_var;
	
			/*-----------------	Writing the username -----------------*/
			UART_Transmit('\r');
    24c4:	8d e0       	ldi	r24, 0x0D	; 13
    24c6:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Transmit('\r');
    24ca:	8d e0       	ldi	r24, 0x0D	; 13
    24cc:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Send_String("Enter User's Username to be deleted : ");
    24d0:	81 ed       	ldi	r24, 0xD1	; 209
    24d2:	96 e0       	ldi	r25, 0x06	; 6
    24d4:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
    24d8:	ce 01       	movw	r24, r28
    24da:	01 96       	adiw	r24, 0x01	; 1
    24dc:	6c 01       	movw	r12, r24
			while(looping_counter < LOGIN_SIZE)
			{
				uart_var = 0;
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
				{
					uart_var = UART_Receive();
    24de:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
    24e2:	08 2f       	mov	r16, r24
			
			looping_counter = 0;
			while(looping_counter < LOGIN_SIZE)
			{
				uart_var = 0;
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    24e4:	80 ed       	ldi	r24, 0xD0	; 208
    24e6:	80 0f       	add	r24, r16
    24e8:	8a 30       	cpi	r24, 0x0A	; 10
    24ea:	c8 f7       	brcc	.-14     	; 0x24de <UART_Admin_Interfacing+0x8de>
				{
					uart_var = UART_Receive();
				}
				
				UART_Transmit(uart_var);
    24ec:	80 2f       	mov	r24, r16
    24ee:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				username_arr[looping_counter] = uart_var;
    24f2:	f6 01       	movw	r30, r12
    24f4:	01 93       	st	Z+, r16
    24f6:	6f 01       	movw	r12, r30
			UART_Transmit('\r');
			UART_Transmit('\r');
			UART_Send_String("Enter User's Username to be deleted : ");
			
			looping_counter = 0;
			while(looping_counter < LOGIN_SIZE)
    24f8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24fa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    24fc:	e8 17       	cp	r30, r24
    24fe:	f9 07       	cpc	r31, r25
    2500:	71 f7       	brne	.-36     	; 0x24de <UART_Admin_Interfacing+0x8de>
				UART_Transmit(uart_var);
				username_arr[looping_counter] = uart_var;
				looping_counter++;
			}
			looping_counter = 0;
			UART_Transmit('\r');
    2502:	8d e0       	ldi	r24, 0x0D	; 13
    2504:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			
			/*-----------------	Writing the password -----------------*/
			UART_Send_String("Enter User's Password to be deleted : ");
    2508:	88 ef       	ldi	r24, 0xF8	; 248
    250a:	96 e0       	ldi	r25, 0x06	; 6
    250c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
    2510:	6e 01       	movw	r12, r28
    2512:	95 e0       	ldi	r25, 0x05	; 5
    2514:	c9 0e       	add	r12, r25
    2516:	d1 1c       	adc	r13, r1
			while(looping_counter < LOGIN_SIZE)
			{
				uart_var = 0;
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
				{
					uart_var = UART_Receive();
    2518:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
    251c:	08 2f       	mov	r16, r24
			UART_Send_String("Enter User's Password to be deleted : ");

			while(looping_counter < LOGIN_SIZE)
			{
				uart_var = 0;
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    251e:	80 ed       	ldi	r24, 0xD0	; 208
    2520:	80 0f       	add	r24, r16
    2522:	8a 30       	cpi	r24, 0x0A	; 10
    2524:	c8 f7       	brcc	.-14     	; 0x2518 <UART_Admin_Interfacing+0x918>
				{
					uart_var = UART_Receive();
				}
				
				UART_Transmit(uart_var);
    2526:	80 2f       	mov	r24, r16
    2528:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				password_arr[looping_counter] = uart_var;
    252c:	f6 01       	movw	r30, r12
    252e:	01 93       	st	Z+, r16
    2530:	6f 01       	movw	r12, r30
			UART_Transmit('\r');
			
			/*-----------------	Writing the password -----------------*/
			UART_Send_String("Enter User's Password to be deleted : ");

			while(looping_counter < LOGIN_SIZE)
    2532:	e4 15       	cp	r30, r4
    2534:	f5 05       	cpc	r31, r5
    2536:	81 f7       	brne	.-32     	; 0x2518 <UART_Admin_Interfacing+0x918>
				UART_Transmit(uart_var);
				password_arr[looping_counter] = uart_var;
				looping_counter++;
			}
			looping_counter = 0;
			UART_Transmit('\r');
    2538:	8d e0       	ldi	r24, 0x0D	; 13
    253a:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			
			
			if(user_type == '1')	// Remoted User
    253e:	11 33       	cpi	r17, 0x31	; 49
    2540:	09 f0       	breq	.+2      	; 0x2544 <UART_Admin_Interfacing+0x944>
    2542:	1b c1       	rjmp	.+566    	; 0x277a <UART_Admin_Interfacing+0xb7a>
			{
				EEPROM_readByte(Counters_Block,Users_UART_number_BIT,&user_counter);
    2544:	ae 01       	movw	r20, r28
    2546:	46 5e       	subi	r20, 0xE6	; 230
    2548:	5f 4f       	sbci	r21, 0xFF	; 255
    254a:	62 e0       	ldi	r22, 0x02	; 2
    254c:	8e ea       	ldi	r24, 0xAE	; 174
    254e:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
    2552:	8f e3       	ldi	r24, 0x3F	; 63
    2554:	9c e9       	ldi	r25, 0x9C	; 156
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	f1 f7       	brne	.-4      	; 0x2556 <UART_Admin_Interfacing+0x956>
    255a:	00 c0       	rjmp	.+0      	; 0x255c <UART_Admin_Interfacing+0x95c>
    255c:	00 00       	nop
				_delay_ms(10);
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
    255e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2560:	81 11       	cpse	r24, r1
    2562:	e9 c0       	rjmp	.+466    	; 0x2736 <UART_Admin_Interfacing+0xb36>
    2564:	10 e0       	ldi	r17, 0x00	; 0
    2566:	f5 c0       	rjmp	.+490    	; 0x2752 <UART_Admin_Interfacing+0xb52>
				{
					for(char i = 0; i<LOGIN_SIZE; i++)
					{
						EEPROM_readByte(UART_User_Username_Block,(4*looping_counter)+i,&username_temp_arr[i]);
    2568:	a5 01       	movw	r20, r10
    256a:	60 2f       	mov	r22, r16
    256c:	86 ea       	ldi	r24, 0xA6	; 166
    256e:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
    2572:	ef e3       	ldi	r30, 0x3F	; 63
    2574:	fc e9       	ldi	r31, 0x9C	; 156
    2576:	31 97       	sbiw	r30, 0x01	; 1
    2578:	f1 f7       	brne	.-4      	; 0x2576 <UART_Admin_Interfacing+0x976>
    257a:	00 c0       	rjmp	.+0      	; 0x257c <UART_Admin_Interfacing+0x97c>
    257c:	00 00       	nop
						_delay_ms(10);
						EEPROM_readByte(UART_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
    257e:	a6 01       	movw	r20, r12
    2580:	60 2f       	mov	r22, r16
    2582:	88 ea       	ldi	r24, 0xA8	; 168
    2584:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
    2588:	8f e3       	ldi	r24, 0x3F	; 63
    258a:	9c e9       	ldi	r25, 0x9C	; 156
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	f1 f7       	brne	.-4      	; 0x258c <UART_Admin_Interfacing+0x98c>
    2590:	00 c0       	rjmp	.+0      	; 0x2592 <UART_Admin_Interfacing+0x992>
    2592:	00 00       	nop
    2594:	0f 5f       	subi	r16, 0xFF	; 255
    2596:	9f ef       	ldi	r25, 0xFF	; 255
    2598:	a9 1a       	sub	r10, r25
    259a:	b9 0a       	sbc	r11, r25
    259c:	ef ef       	ldi	r30, 0xFF	; 255
    259e:	ce 1a       	sub	r12, r30
    25a0:	de 0a       	sbc	r13, r30
				EEPROM_readByte(Counters_Block,Users_UART_number_BIT,&user_counter);
				_delay_ms(10);
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
				{
					for(char i = 0; i<LOGIN_SIZE; i++)
    25a2:	10 13       	cpse	r17, r16
    25a4:	e1 cf       	rjmp	.-62     	; 0x2568 <UART_Admin_Interfacing+0x968>
						_delay_ms(10);
						EEPROM_readByte(UART_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
						_delay_ms(10);
					}
					
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
    25a6:	44 e0       	ldi	r20, 0x04	; 4
    25a8:	62 2d       	mov	r22, r2
    25aa:	7e 8d       	ldd	r23, Y+30	; 0x1e
    25ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25ae:	93 2d       	mov	r25, r3
    25b0:	0e 94 a8 04 	call	0x950	; 0x950 <Compare_Passwords>
    25b4:	81 33       	cpi	r24, 0x31	; 49
    25b6:	09 f0       	breq	.+2      	; 0x25ba <UART_Admin_Interfacing+0x9ba>
    25b8:	b7 c0       	rjmp	.+366    	; 0x2728 <UART_Admin_Interfacing+0xb28>
    25ba:	44 e0       	ldi	r20, 0x04	; 4
    25bc:	be 01       	movw	r22, r28
    25be:	63 5f       	subi	r22, 0xF3	; 243
    25c0:	7f 4f       	sbci	r23, 0xFF	; 255
    25c2:	8d a1       	ldd	r24, Y+37	; 0x25
    25c4:	9e a1       	ldd	r25, Y+38	; 0x26
    25c6:	0e 94 a8 04 	call	0x950	; 0x950 <Compare_Passwords>
    25ca:	81 33       	cpi	r24, 0x31	; 49
    25cc:	09 f0       	breq	.+2      	; 0x25d0 <UART_Admin_Interfacing+0x9d0>
    25ce:	ac c0       	rjmp	.+344    	; 0x2728 <UART_Admin_Interfacing+0xb28>
    25d0:	18 2d       	mov	r17, r8
					{
						for(char counter = looping_counter; counter < user_counter-1; counter++)
    25d2:	88 2d       	mov	r24, r8
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	2a 8d       	ldd	r18, Y+26	; 0x1a
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	21 50       	subi	r18, 0x01	; 1
    25dc:	31 09       	sbc	r19, r1
    25de:	82 17       	cp	r24, r18
    25e0:	93 07       	cpc	r25, r19
    25e2:	0c f0       	brlt	.+2      	; 0x25e6 <UART_Admin_Interfacing+0x9e6>
    25e4:	6a c0       	rjmp	.+212    	; 0x26ba <UART_Admin_Interfacing+0xaba>
    25e6:	88 0c       	add	r8, r8
    25e8:	88 0c       	add	r8, r8
    25ea:	91 2e       	mov	r9, r17
    25ec:	5a a2       	std	Y+34, r5	; 0x22
    25ee:	49 a2       	std	Y+33, r4	; 0x21
    25f0:	fc a2       	std	Y+36, r15	; 0x24
    25f2:	eb a2       	std	Y+35, r14	; 0x23
    25f4:	f3 2c       	mov	r15, r3
    25f6:	31 2e       	mov	r3, r17
    25f8:	47 c0       	rjmp	.+142    	; 0x2688 <UART_Admin_Interfacing+0xa88>
						{
							for(char i = 0; i<LOGIN_SIZE; i++)
							{
								EEPROM_readByte(UART_User_Username_Block,4*(counter+1)+i,&username_arr_2[i]);
    25fa:	a6 01       	movw	r20, r12
    25fc:	60 2f       	mov	r22, r16
    25fe:	86 ea       	ldi	r24, 0xA6	; 166
    2600:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
    2604:	8f e3       	ldi	r24, 0x3F	; 63
    2606:	9c e9       	ldi	r25, 0x9C	; 156
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	f1 f7       	brne	.-4      	; 0x2608 <UART_Admin_Interfacing+0xa08>
    260c:	00 c0       	rjmp	.+0      	; 0x260e <UART_Admin_Interfacing+0xa0e>
    260e:	00 00       	nop
								_delay_ms(10);
								EEPROM_readByte(UART_User_Password_Block,4*(counter+1)+i,&password_arr_2[i]);
    2610:	a5 01       	movw	r20, r10
    2612:	60 2f       	mov	r22, r16
    2614:	88 ea       	ldi	r24, 0xA8	; 168
    2616:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
    261a:	ef e3       	ldi	r30, 0x3F	; 63
    261c:	fc e9       	ldi	r31, 0x9C	; 156
    261e:	31 97       	sbiw	r30, 0x01	; 1
    2620:	f1 f7       	brne	.-4      	; 0x261e <UART_Admin_Interfacing+0xa1e>
    2622:	00 c0       	rjmp	.+0      	; 0x2624 <UART_Admin_Interfacing+0xa24>
    2624:	00 00       	nop
    2626:	15 2d       	mov	r17, r5
    2628:	10 0f       	add	r17, r16
								_delay_ms(10);
								
								EEPROM_writeByte(UART_User_Username_Block , 4*(counter)+i , username_arr_2[i]);
    262a:	f6 01       	movw	r30, r12
    262c:	40 81       	ld	r20, Z
    262e:	ff ef       	ldi	r31, 0xFF	; 255
    2630:	cf 1a       	sub	r12, r31
    2632:	df 0a       	sbc	r13, r31
    2634:	61 2f       	mov	r22, r17
    2636:	86 ea       	ldi	r24, 0xA6	; 166
    2638:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <EEPROM_writeByte>
    263c:	8f e3       	ldi	r24, 0x3F	; 63
    263e:	9c e9       	ldi	r25, 0x9C	; 156
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	f1 f7       	brne	.-4      	; 0x2640 <UART_Admin_Interfacing+0xa40>
    2644:	00 c0       	rjmp	.+0      	; 0x2646 <UART_Admin_Interfacing+0xa46>
    2646:	00 00       	nop
								_delay_ms(10);
								EEPROM_writeByte(UART_User_Password_Block , 4*(counter)+i , password_arr_2[i]);
    2648:	f5 01       	movw	r30, r10
    264a:	40 81       	ld	r20, Z
    264c:	9f ef       	ldi	r25, 0xFF	; 255
    264e:	a9 1a       	sub	r10, r25
    2650:	b9 0a       	sbc	r11, r25
    2652:	61 2f       	mov	r22, r17
    2654:	88 ea       	ldi	r24, 0xA8	; 168
    2656:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <EEPROM_writeByte>
    265a:	ef e3       	ldi	r30, 0x3F	; 63
    265c:	fc e9       	ldi	r31, 0x9C	; 156
    265e:	31 97       	sbiw	r30, 0x01	; 1
    2660:	f1 f7       	brne	.-4      	; 0x265e <UART_Admin_Interfacing+0xa5e>
    2662:	00 c0       	rjmp	.+0      	; 0x2664 <UART_Admin_Interfacing+0xa64>
    2664:	00 00       	nop
    2666:	0f 5f       	subi	r16, 0xFF	; 255
					
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
					{
						for(char counter = looping_counter; counter < user_counter-1; counter++)
						{
							for(char i = 0; i<LOGIN_SIZE; i++)
    2668:	f8 a1       	ldd	r31, Y+32	; 0x20
    266a:	0f 13       	cpse	r16, r31
    266c:	c6 cf       	rjmp	.-116    	; 0x25fa <UART_Admin_Interfacing+0x9fa>
    266e:	f4 2c       	mov	r15, r4
						_delay_ms(10);
					}
					
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
					{
						for(char counter = looping_counter; counter < user_counter-1; counter++)
    2670:	93 94       	inc	r9
    2672:	89 2d       	mov	r24, r9
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	24 e0       	ldi	r18, 0x04	; 4
    2678:	82 0e       	add	r8, r18
    267a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	21 50       	subi	r18, 0x01	; 1
    2680:	31 09       	sbc	r19, r1
    2682:	82 17       	cp	r24, r18
    2684:	93 07       	cpc	r25, r19
    2686:	9c f4       	brge	.+38     	; 0x26ae <UART_Admin_Interfacing+0xaae>
						{
							for(char i = 0; i<LOGIN_SIZE; i++)
							{
								EEPROM_readByte(UART_User_Username_Block,4*(counter+1)+i,&username_arr_2[i]);
    2688:	01 96       	adiw	r24, 0x01	; 1
    268a:	88 0f       	add	r24, r24
    268c:	88 0f       	add	r24, r24
    268e:	6e 01       	movw	r12, r28
    2690:	91 e1       	ldi	r25, 0x11	; 17
    2692:	c9 0e       	add	r12, r25
    2694:	d1 1c       	adc	r13, r1
    2696:	5e 01       	movw	r10, r28
    2698:	e5 e1       	ldi	r30, 0x15	; 21
    269a:	ae 0e       	add	r10, r30
    269c:	b1 1c       	adc	r11, r1
    269e:	f4 e0       	ldi	r31, 0x04	; 4
    26a0:	f8 0f       	add	r31, r24
    26a2:	f8 a3       	std	Y+32, r31	; 0x20
    26a4:	08 2f       	mov	r16, r24
    26a6:	58 2c       	mov	r5, r8
    26a8:	58 1a       	sub	r5, r24
    26aa:	4f 2c       	mov	r4, r15
    26ac:	a6 cf       	rjmp	.-180    	; 0x25fa <UART_Admin_Interfacing+0x9fa>
    26ae:	13 2d       	mov	r17, r3
    26b0:	49 a0       	ldd	r4, Y+33	; 0x21
    26b2:	5a a0       	ldd	r5, Y+34	; 0x22
    26b4:	3f 2c       	mov	r3, r15
    26b6:	eb a0       	ldd	r14, Y+35	; 0x23
    26b8:	fc a0       	ldd	r15, Y+36	; 0x24
								_delay_ms(10);
							
							}
						}						
						
						UART_Send_String("The user is deleted successfully");
    26ba:	8f e1       	ldi	r24, 0x1F	; 31
    26bc:	97 e0       	ldi	r25, 0x07	; 7
    26be:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
						UART_Transmit('\r');
    26c2:	8d e0       	ldi	r24, 0x0D	; 13
    26c4:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
						
						for(char i = 0; i < LOGIN_SIZE; i++)
    26c8:	00 e0       	ldi	r16, 0x00	; 0
						{
							EEPROM_writeByte(UART_User_Username_Block, 4*(user_counter-1)+i, 0xFF);
    26ca:	6a 8d       	ldd	r22, Y+26	; 0x1a
    26cc:	66 0f       	add	r22, r22
    26ce:	66 0f       	add	r22, r22
    26d0:	64 50       	subi	r22, 0x04	; 4
    26d2:	60 0f       	add	r22, r16
    26d4:	4f ef       	ldi	r20, 0xFF	; 255
    26d6:	86 ea       	ldi	r24, 0xA6	; 166
    26d8:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <EEPROM_writeByte>
    26dc:	8f e3       	ldi	r24, 0x3F	; 63
    26de:	9c e9       	ldi	r25, 0x9C	; 156
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <UART_Admin_Interfacing+0xae0>
    26e4:	00 c0       	rjmp	.+0      	; 0x26e6 <UART_Admin_Interfacing+0xae6>
    26e6:	00 00       	nop
							_delay_ms(10);
							EEPROM_writeByte(UART_User_Password_Block, 4*(user_counter-1)+i, 0xFF);
    26e8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    26ea:	66 0f       	add	r22, r22
    26ec:	66 0f       	add	r22, r22
    26ee:	64 50       	subi	r22, 0x04	; 4
    26f0:	60 0f       	add	r22, r16
    26f2:	4f ef       	ldi	r20, 0xFF	; 255
    26f4:	88 ea       	ldi	r24, 0xA8	; 168
    26f6:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <EEPROM_writeByte>
    26fa:	ef e3       	ldi	r30, 0x3F	; 63
    26fc:	fc e9       	ldi	r31, 0x9C	; 156
    26fe:	31 97       	sbiw	r30, 0x01	; 1
    2700:	f1 f7       	brne	.-4      	; 0x26fe <UART_Admin_Interfacing+0xafe>
    2702:	00 c0       	rjmp	.+0      	; 0x2704 <UART_Admin_Interfacing+0xb04>
    2704:	00 00       	nop
						}						
						
						UART_Send_String("The user is deleted successfully");
						UART_Transmit('\r');
						
						for(char i = 0; i < LOGIN_SIZE; i++)
    2706:	0f 5f       	subi	r16, 0xFF	; 255
    2708:	04 30       	cpi	r16, 0x04	; 4
    270a:	f9 f6       	brne	.-66     	; 0x26ca <UART_Admin_Interfacing+0xaca>
							_delay_ms(10);
							EEPROM_writeByte(UART_User_Password_Block, 4*(user_counter-1)+i, 0xFF);
							_delay_ms(10);
						}
						
						user_counter--;
    270c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    270e:	41 50       	subi	r20, 0x01	; 1
    2710:	4a 8f       	std	Y+26, r20	; 0x1a
						EEPROM_writeByte(Counters_Block,Users_UART_number_BIT,user_counter);
    2712:	62 e0       	ldi	r22, 0x02	; 2
    2714:	8e ea       	ldi	r24, 0xAE	; 174
    2716:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <EEPROM_writeByte>
    271a:	8f e3       	ldi	r24, 0x3F	; 63
    271c:	9c e9       	ldi	r25, 0x9C	; 156
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	f1 f7       	brne	.-4      	; 0x271e <UART_Admin_Interfacing+0xb1e>
    2722:	00 c0       	rjmp	.+0      	; 0x2724 <UART_Admin_Interfacing+0xb24>
    2724:	00 00       	nop
    2726:	56 c1       	rjmp	.+684    	; 0x29d4 <UART_Admin_Interfacing+0xdd4>
			if(user_type == '1')	// Remoted User
			{
				EEPROM_readByte(Counters_Block,Users_UART_number_BIT,&user_counter);
				_delay_ms(10);
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
    2728:	83 94       	inc	r8
    272a:	01 2f       	mov	r16, r17
    272c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    272e:	88 16       	cp	r8, r24
    2730:	28 f0       	brcs	.+10     	; 0x273c <UART_Admin_Interfacing+0xb3c>
    2732:	18 2d       	mov	r17, r8
    2734:	0e c0       	rjmp	.+28     	; 0x2752 <UART_Admin_Interfacing+0xb52>
    2736:	00 e0       	ldi	r16, 0x00	; 0
    2738:	10 e0       	ldi	r17, 0x00	; 0
    273a:	81 2e       	mov	r8, r17
    273c:	5e 01       	movw	r10, r28
    273e:	99 e0       	ldi	r25, 0x09	; 9
    2740:	a9 0e       	add	r10, r25
    2742:	b1 1c       	adc	r11, r1
    2744:	6e 01       	movw	r12, r28
    2746:	ed e0       	ldi	r30, 0x0D	; 13
    2748:	ce 0e       	add	r12, r30
    274a:	d1 1c       	adc	r13, r1
    274c:	14 e0       	ldi	r17, 0x04	; 4
    274e:	10 0f       	add	r17, r16
    2750:	0b cf       	rjmp	.-490    	; 0x2568 <UART_Admin_Interfacing+0x968>
						
						Compare_Var = 1;
						break;
					}
				}
				if(Compare_Var == 0)
    2752:	91 10       	cpse	r9, r1
    2754:	87 ca       	rjmp	.-2802   	; 0x1c64 <UART_Admin_Interfacing+0x64>
				{
					UART_Send_String("The entered Username & Password are not found");
    2756:	80 e4       	ldi	r24, 0x40	; 64
    2758:	97 e0       	ldi	r25, 0x07	; 7
    275a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
					UART_Transmit('\r');
    275e:	8d e0       	ldi	r24, 0x0D	; 13
    2760:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Send_String("Please Try again");
    2764:	8e e6       	ldi	r24, 0x6E	; 110
    2766:	97 e0       	ldi	r25, 0x07	; 7
    2768:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
					UART_Transmit('\r');
    276c:	8d e0       	ldi	r24, 0x0D	; 13
    276e:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Transmit('\r');
    2772:	8d e0       	ldi	r24, 0x0D	; 13
    2774:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
    2778:	75 ca       	rjmp	.-2838   	; 0x1c64 <UART_Admin_Interfacing+0x64>
				}
				
			}
			else					// LCD & Keypad User
			{
				EEPROM_readByte(Counters_Block,Users_LCD_number_BIT,&user_counter);	// 3
    277a:	ae 01       	movw	r20, r28
    277c:	46 5e       	subi	r20, 0xE6	; 230
    277e:	5f 4f       	sbci	r21, 0xFF	; 255
    2780:	63 e0       	ldi	r22, 0x03	; 3
    2782:	8e ea       	ldi	r24, 0xAE	; 174
    2784:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
    2788:	8f e3       	ldi	r24, 0x3F	; 63
    278a:	9c e9       	ldi	r25, 0x9C	; 156
    278c:	01 97       	sbiw	r24, 0x01	; 1
    278e:	f1 f7       	brne	.-4      	; 0x278c <UART_Admin_Interfacing+0xb8c>
    2790:	00 c0       	rjmp	.+0      	; 0x2792 <UART_Admin_Interfacing+0xb92>
    2792:	00 00       	nop
				_delay_ms(10);
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
    2794:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2796:	81 11       	cpse	r24, r1
    2798:	e9 c0       	rjmp	.+466    	; 0x296c <UART_Admin_Interfacing+0xd6c>
    279a:	10 e0       	ldi	r17, 0x00	; 0
    279c:	f7 c0       	rjmp	.+494    	; 0x298c <UART_Admin_Interfacing+0xd8c>
				{
					for(char i = 0; i<LOGIN_SIZE; i++)
					{
						EEPROM_readByte(LCD_User_Username_Block,(4*looping_counter)+i,&username_temp_arr[i]);
    279e:	a5 01       	movw	r20, r10
    27a0:	60 2f       	mov	r22, r16
    27a2:	8a ea       	ldi	r24, 0xAA	; 170
    27a4:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
    27a8:	ef e3       	ldi	r30, 0x3F	; 63
    27aa:	fc e9       	ldi	r31, 0x9C	; 156
    27ac:	31 97       	sbiw	r30, 0x01	; 1
    27ae:	f1 f7       	brne	.-4      	; 0x27ac <UART_Admin_Interfacing+0xbac>
    27b0:	00 c0       	rjmp	.+0      	; 0x27b2 <UART_Admin_Interfacing+0xbb2>
    27b2:	00 00       	nop
						_delay_ms(10);
						EEPROM_readByte(LCD_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
    27b4:	a6 01       	movw	r20, r12
    27b6:	60 2f       	mov	r22, r16
    27b8:	8c ea       	ldi	r24, 0xAC	; 172
    27ba:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
    27be:	8f e3       	ldi	r24, 0x3F	; 63
    27c0:	9c e9       	ldi	r25, 0x9C	; 156
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	f1 f7       	brne	.-4      	; 0x27c2 <UART_Admin_Interfacing+0xbc2>
    27c6:	00 c0       	rjmp	.+0      	; 0x27c8 <UART_Admin_Interfacing+0xbc8>
    27c8:	00 00       	nop
    27ca:	0f 5f       	subi	r16, 0xFF	; 255
    27cc:	9f ef       	ldi	r25, 0xFF	; 255
    27ce:	a9 1a       	sub	r10, r25
    27d0:	b9 0a       	sbc	r11, r25
    27d2:	ef ef       	ldi	r30, 0xFF	; 255
    27d4:	ce 1a       	sub	r12, r30
    27d6:	de 0a       	sbc	r13, r30
				EEPROM_readByte(Counters_Block,Users_LCD_number_BIT,&user_counter);	// 3
				_delay_ms(10);
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
				{
					for(char i = 0; i<LOGIN_SIZE; i++)
    27d8:	01 13       	cpse	r16, r17
    27da:	e1 cf       	rjmp	.-62     	; 0x279e <UART_Admin_Interfacing+0xb9e>
						EEPROM_readByte(LCD_User_Password_Block,(4*looping_counter)+i,&password_temp_arr[i]);
						_delay_ms(10);
					}
					
					
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
    27dc:	44 e0       	ldi	r20, 0x04	; 4
    27de:	62 2d       	mov	r22, r2
    27e0:	77 2d       	mov	r23, r7
    27e2:	86 2d       	mov	r24, r6
    27e4:	93 2d       	mov	r25, r3
    27e6:	0e 94 a8 04 	call	0x950	; 0x950 <Compare_Passwords>
    27ea:	81 33       	cpi	r24, 0x31	; 49
    27ec:	09 f0       	breq	.+2      	; 0x27f0 <UART_Admin_Interfacing+0xbf0>
    27ee:	b7 c0       	rjmp	.+366    	; 0x295e <UART_Admin_Interfacing+0xd5e>
    27f0:	44 e0       	ldi	r20, 0x04	; 4
    27f2:	be 01       	movw	r22, r28
    27f4:	63 5f       	subi	r22, 0xF3	; 243
    27f6:	7f 4f       	sbci	r23, 0xFF	; 255
    27f8:	8d a1       	ldd	r24, Y+37	; 0x25
    27fa:	9e a1       	ldd	r25, Y+38	; 0x26
    27fc:	0e 94 a8 04 	call	0x950	; 0x950 <Compare_Passwords>
    2800:	81 33       	cpi	r24, 0x31	; 49
    2802:	09 f0       	breq	.+2      	; 0x2806 <UART_Admin_Interfacing+0xc06>
    2804:	ac c0       	rjmp	.+344    	; 0x295e <UART_Admin_Interfacing+0xd5e>
    2806:	18 2d       	mov	r17, r8
					{
						
						for(unsigned char counter = looping_counter; counter < (user_counter-1); counter++)
    2808:	88 2d       	mov	r24, r8
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	21 50       	subi	r18, 0x01	; 1
    2812:	31 09       	sbc	r19, r1
    2814:	82 17       	cp	r24, r18
    2816:	93 07       	cpc	r25, r19
    2818:	0c f0       	brlt	.+2      	; 0x281c <UART_Admin_Interfacing+0xc1c>
    281a:	6a c0       	rjmp	.+212    	; 0x28f0 <UART_Admin_Interfacing+0xcf0>
    281c:	88 0c       	add	r8, r8
    281e:	88 0c       	add	r8, r8
    2820:	91 2e       	mov	r9, r17
    2822:	5a a2       	std	Y+34, r5	; 0x22
    2824:	49 a2       	std	Y+33, r4	; 0x21
    2826:	fc a2       	std	Y+36, r15	; 0x24
    2828:	eb a2       	std	Y+35, r14	; 0x23
    282a:	f3 2c       	mov	r15, r3
    282c:	31 2e       	mov	r3, r17
    282e:	47 c0       	rjmp	.+142    	; 0x28be <UART_Admin_Interfacing+0xcbe>
						{			
							for(char i = 0; i<LOGIN_SIZE; i++)
							{
								EEPROM_readByte(LCD_User_Username_Block,4*(counter+1)+i,&username_arr_2[i]);
    2830:	a6 01       	movw	r20, r12
    2832:	60 2f       	mov	r22, r16
    2834:	8a ea       	ldi	r24, 0xAA	; 170
    2836:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
    283a:	8f e3       	ldi	r24, 0x3F	; 63
    283c:	9c e9       	ldi	r25, 0x9C	; 156
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	f1 f7       	brne	.-4      	; 0x283e <UART_Admin_Interfacing+0xc3e>
    2842:	00 c0       	rjmp	.+0      	; 0x2844 <UART_Admin_Interfacing+0xc44>
    2844:	00 00       	nop
								_delay_ms(10);
								EEPROM_readByte(LCD_User_Password_Block,4*(counter+1)+i,&password_arr_2[i]);
    2846:	a5 01       	movw	r20, r10
    2848:	60 2f       	mov	r22, r16
    284a:	8c ea       	ldi	r24, 0xAC	; 172
    284c:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_readByte>
    2850:	ef e3       	ldi	r30, 0x3F	; 63
    2852:	fc e9       	ldi	r31, 0x9C	; 156
    2854:	31 97       	sbiw	r30, 0x01	; 1
    2856:	f1 f7       	brne	.-4      	; 0x2854 <UART_Admin_Interfacing+0xc54>
    2858:	00 c0       	rjmp	.+0      	; 0x285a <UART_Admin_Interfacing+0xc5a>
    285a:	00 00       	nop
    285c:	15 2d       	mov	r17, r5
    285e:	10 0f       	add	r17, r16
								_delay_ms(10);
								
								EEPROM_writeByte(LCD_User_Username_Block , 4*(counter)+i , username_arr_2[i]);
    2860:	f6 01       	movw	r30, r12
    2862:	40 81       	ld	r20, Z
    2864:	ff ef       	ldi	r31, 0xFF	; 255
    2866:	cf 1a       	sub	r12, r31
    2868:	df 0a       	sbc	r13, r31
    286a:	61 2f       	mov	r22, r17
    286c:	8a ea       	ldi	r24, 0xAA	; 170
    286e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <EEPROM_writeByte>
    2872:	8f e3       	ldi	r24, 0x3F	; 63
    2874:	9c e9       	ldi	r25, 0x9C	; 156
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	f1 f7       	brne	.-4      	; 0x2876 <UART_Admin_Interfacing+0xc76>
    287a:	00 c0       	rjmp	.+0      	; 0x287c <UART_Admin_Interfacing+0xc7c>
    287c:	00 00       	nop
								_delay_ms(10);
								EEPROM_writeByte(LCD_User_Password_Block , 4*(counter)+i , password_arr_2[i]);
    287e:	f5 01       	movw	r30, r10
    2880:	40 81       	ld	r20, Z
    2882:	9f ef       	ldi	r25, 0xFF	; 255
    2884:	a9 1a       	sub	r10, r25
    2886:	b9 0a       	sbc	r11, r25
    2888:	61 2f       	mov	r22, r17
    288a:	8c ea       	ldi	r24, 0xAC	; 172
    288c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <EEPROM_writeByte>
    2890:	ef e3       	ldi	r30, 0x3F	; 63
    2892:	fc e9       	ldi	r31, 0x9C	; 156
    2894:	31 97       	sbiw	r30, 0x01	; 1
    2896:	f1 f7       	brne	.-4      	; 0x2894 <UART_Admin_Interfacing+0xc94>
    2898:	00 c0       	rjmp	.+0      	; 0x289a <UART_Admin_Interfacing+0xc9a>
    289a:	00 00       	nop
    289c:	0f 5f       	subi	r16, 0xFF	; 255
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
					{
						
						for(unsigned char counter = looping_counter; counter < (user_counter-1); counter++)
						{			
							for(char i = 0; i<LOGIN_SIZE; i++)
    289e:	f8 a1       	ldd	r31, Y+32	; 0x20
    28a0:	f0 13       	cpse	r31, r16
    28a2:	c6 cf       	rjmp	.-116    	; 0x2830 <UART_Admin_Interfacing+0xc30>
    28a4:	f4 2c       	mov	r15, r4
					
					
					if((Compare_Passwords(username_arr,username_temp_arr,LOGIN_SIZE) == '1') && (Compare_Passwords(password_arr,password_temp_arr,LOGIN_SIZE) == '1'))
					{
						
						for(unsigned char counter = looping_counter; counter < (user_counter-1); counter++)
    28a6:	93 94       	inc	r9
    28a8:	89 2d       	mov	r24, r9
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	24 e0       	ldi	r18, 0x04	; 4
    28ae:	82 0e       	add	r8, r18
    28b0:	2a 8d       	ldd	r18, Y+26	; 0x1a
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	21 50       	subi	r18, 0x01	; 1
    28b6:	31 09       	sbc	r19, r1
    28b8:	82 17       	cp	r24, r18
    28ba:	93 07       	cpc	r25, r19
    28bc:	9c f4       	brge	.+38     	; 0x28e4 <UART_Admin_Interfacing+0xce4>
						{			
							for(char i = 0; i<LOGIN_SIZE; i++)
							{
								EEPROM_readByte(LCD_User_Username_Block,4*(counter+1)+i,&username_arr_2[i]);
    28be:	01 96       	adiw	r24, 0x01	; 1
    28c0:	88 0f       	add	r24, r24
    28c2:	88 0f       	add	r24, r24
    28c4:	6e 01       	movw	r12, r28
    28c6:	91 e1       	ldi	r25, 0x11	; 17
    28c8:	c9 0e       	add	r12, r25
    28ca:	d1 1c       	adc	r13, r1
    28cc:	5e 01       	movw	r10, r28
    28ce:	e5 e1       	ldi	r30, 0x15	; 21
    28d0:	ae 0e       	add	r10, r30
    28d2:	b1 1c       	adc	r11, r1
    28d4:	f4 e0       	ldi	r31, 0x04	; 4
    28d6:	f8 0f       	add	r31, r24
    28d8:	f8 a3       	std	Y+32, r31	; 0x20
    28da:	08 2f       	mov	r16, r24
    28dc:	58 2c       	mov	r5, r8
    28de:	58 1a       	sub	r5, r24
    28e0:	4f 2c       	mov	r4, r15
    28e2:	a6 cf       	rjmp	.-180    	; 0x2830 <UART_Admin_Interfacing+0xc30>
    28e4:	13 2d       	mov	r17, r3
    28e6:	49 a0       	ldd	r4, Y+33	; 0x21
    28e8:	5a a0       	ldd	r5, Y+34	; 0x22
    28ea:	3f 2c       	mov	r3, r15
    28ec:	eb a0       	ldd	r14, Y+35	; 0x23
    28ee:	fc a0       	ldd	r15, Y+36	; 0x24
								_delay_ms(10);
								EEPROM_writeByte(LCD_User_Password_Block , 4*(counter)+i , password_arr_2[i]);
								_delay_ms(10);
							}
						}
						UART_Send_String("The user is deleted successfully");
    28f0:	8f e1       	ldi	r24, 0x1F	; 31
    28f2:	97 e0       	ldi	r25, 0x07	; 7
    28f4:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
						UART_Transmit('\r');
    28f8:	8d e0       	ldi	r24, 0x0D	; 13
    28fa:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
						
						for(char i = 0; i < LOGIN_SIZE; i++)
    28fe:	00 e0       	ldi	r16, 0x00	; 0
						{
							EEPROM_writeByte(LCD_User_Username_Block, 4*(user_counter-1)+i, 0xFF);
    2900:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2902:	66 0f       	add	r22, r22
    2904:	66 0f       	add	r22, r22
    2906:	64 50       	subi	r22, 0x04	; 4
    2908:	60 0f       	add	r22, r16
    290a:	4f ef       	ldi	r20, 0xFF	; 255
    290c:	8a ea       	ldi	r24, 0xAA	; 170
    290e:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <EEPROM_writeByte>
    2912:	8f e3       	ldi	r24, 0x3F	; 63
    2914:	9c e9       	ldi	r25, 0x9C	; 156
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	f1 f7       	brne	.-4      	; 0x2916 <UART_Admin_Interfacing+0xd16>
    291a:	00 c0       	rjmp	.+0      	; 0x291c <UART_Admin_Interfacing+0xd1c>
    291c:	00 00       	nop
							_delay_ms(10);
							EEPROM_writeByte(LCD_User_Password_Block, 4*(user_counter-1)+i, 0xFF);
    291e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2920:	66 0f       	add	r22, r22
    2922:	66 0f       	add	r22, r22
    2924:	64 50       	subi	r22, 0x04	; 4
    2926:	60 0f       	add	r22, r16
    2928:	4f ef       	ldi	r20, 0xFF	; 255
    292a:	8c ea       	ldi	r24, 0xAC	; 172
    292c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <EEPROM_writeByte>
    2930:	ef e3       	ldi	r30, 0x3F	; 63
    2932:	fc e9       	ldi	r31, 0x9C	; 156
    2934:	31 97       	sbiw	r30, 0x01	; 1
    2936:	f1 f7       	brne	.-4      	; 0x2934 <UART_Admin_Interfacing+0xd34>
    2938:	00 c0       	rjmp	.+0      	; 0x293a <UART_Admin_Interfacing+0xd3a>
    293a:	00 00       	nop
							}
						}
						UART_Send_String("The user is deleted successfully");
						UART_Transmit('\r');
						
						for(char i = 0; i < LOGIN_SIZE; i++)
    293c:	0f 5f       	subi	r16, 0xFF	; 255
    293e:	04 30       	cpi	r16, 0x04	; 4
    2940:	f9 f6       	brne	.-66     	; 0x2900 <UART_Admin_Interfacing+0xd00>
							_delay_ms(10);
							EEPROM_writeByte(LCD_User_Password_Block, 4*(user_counter-1)+i, 0xFF);
							_delay_ms(10);
						}
						
						user_counter--;
    2942:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2944:	41 50       	subi	r20, 0x01	; 1
    2946:	4a 8f       	std	Y+26, r20	; 0x1a
						EEPROM_writeByte(Counters_Block,Users_LCD_number_BIT,user_counter);
    2948:	63 e0       	ldi	r22, 0x03	; 3
    294a:	8e ea       	ldi	r24, 0xAE	; 174
    294c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <EEPROM_writeByte>
    2950:	8f e3       	ldi	r24, 0x3F	; 63
    2952:	9c e9       	ldi	r25, 0x9C	; 156
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	f1 f7       	brne	.-4      	; 0x2954 <UART_Admin_Interfacing+0xd54>
    2958:	00 c0       	rjmp	.+0      	; 0x295a <UART_Admin_Interfacing+0xd5a>
    295a:	00 00       	nop
    295c:	3b c0       	rjmp	.+118    	; 0x29d4 <UART_Admin_Interfacing+0xdd4>
			else					// LCD & Keypad User
			{
				EEPROM_readByte(Counters_Block,Users_LCD_number_BIT,&user_counter);	// 3
				_delay_ms(10);
				
				for (looping_counter = 0; looping_counter < user_counter; looping_counter++)
    295e:	83 94       	inc	r8
    2960:	01 2f       	mov	r16, r17
    2962:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2964:	88 16       	cp	r8, r24
    2966:	38 f0       	brcs	.+14     	; 0x2976 <UART_Admin_Interfacing+0xd76>
    2968:	18 2d       	mov	r17, r8
    296a:	10 c0       	rjmp	.+32     	; 0x298c <UART_Admin_Interfacing+0xd8c>
    296c:	00 e0       	ldi	r16, 0x00	; 0
    296e:	10 e0       	ldi	r17, 0x00	; 0
    2970:	81 2e       	mov	r8, r17
    2972:	7e 8c       	ldd	r7, Y+30	; 0x1e
    2974:	6f 8c       	ldd	r6, Y+31	; 0x1f
    2976:	5e 01       	movw	r10, r28
    2978:	99 e0       	ldi	r25, 0x09	; 9
    297a:	a9 0e       	add	r10, r25
    297c:	b1 1c       	adc	r11, r1
    297e:	6e 01       	movw	r12, r28
    2980:	ed e0       	ldi	r30, 0x0D	; 13
    2982:	ce 0e       	add	r12, r30
    2984:	d1 1c       	adc	r13, r1
    2986:	14 e0       	ldi	r17, 0x04	; 4
    2988:	10 0f       	add	r17, r16
    298a:	09 cf       	rjmp	.-494    	; 0x279e <UART_Admin_Interfacing+0xb9e>
						
						Compare_Var = 1;
						break;
					}
				}
				if(Compare_Var == 0)
    298c:	91 10       	cpse	r9, r1
    298e:	6a c9       	rjmp	.-3372   	; 0x1c64 <UART_Admin_Interfacing+0x64>
				{
					UART_Transmit('\r');
    2990:	8d e0       	ldi	r24, 0x0D	; 13
    2992:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Send_String("The entered Username & Password are not found");
    2996:	80 e4       	ldi	r24, 0x40	; 64
    2998:	97 e0       	ldi	r25, 0x07	; 7
    299a:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
					UART_Transmit('\r');
    299e:	8d e0       	ldi	r24, 0x0D	; 13
    29a0:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Send_String("Please Try again");
    29a4:	8e e6       	ldi	r24, 0x6E	; 110
    29a6:	97 e0       	ldi	r25, 0x07	; 7
    29a8:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
					UART_Transmit('\r');
    29ac:	8d e0       	ldi	r24, 0x0D	; 13
    29ae:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Transmit('\r');
    29b2:	8d e0       	ldi	r24, 0x0D	; 13
    29b4:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
    29b8:	55 c9       	rjmp	.-3414   	; 0x1c64 <UART_Admin_Interfacing+0x64>
	unsigned char user_type = 0;
	char admin_counter = 0;
	char user_counter = 0;
	char max_number_var = 0;
	
	while (option != Ascii_8)	// Corresponding to Logout
    29ba:	08 33       	cpi	r16, 0x38	; 56
    29bc:	09 f0       	breq	.+2      	; 0x29c0 <UART_Admin_Interfacing+0xdc0>
    29be:	52 c9       	rjmp	.-3420   	; 0x1c64 <UART_Admin_Interfacing+0x64>
			}
			
		}
		
	}
	UART_Transmit('\r');
    29c0:	8d e0       	ldi	r24, 0x0D	; 13
    29c2:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
	UART_Transmit('\r');
    29c6:	8d e0       	ldi	r24, 0x0D	; 13
    29c8:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
	UART_Transmit('\r');
    29cc:	8d e0       	ldi	r24, 0x0D	; 13
    29ce:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
}
    29d2:	03 c0       	rjmp	.+6      	; 0x29da <UART_Admin_Interfacing+0xdda>
}



void UART_Admin_Interfacing()
{
    29d4:	99 24       	eor	r9, r9
    29d6:	93 94       	inc	r9
    29d8:	45 c9       	rjmp	.-3446   	; 0x1c64 <UART_Admin_Interfacing+0x64>
		
	}
	UART_Transmit('\r');
	UART_Transmit('\r');
	UART_Transmit('\r');
}
    29da:	a6 96       	adiw	r28, 0x26	; 38
    29dc:	0f b6       	in	r0, 0x3f	; 63
    29de:	f8 94       	cli
    29e0:	de bf       	out	0x3e, r29	; 62
    29e2:	0f be       	out	0x3f, r0	; 63
    29e4:	cd bf       	out	0x3d, r28	; 61
    29e6:	df 91       	pop	r29
    29e8:	cf 91       	pop	r28
    29ea:	1f 91       	pop	r17
    29ec:	0f 91       	pop	r16
    29ee:	ff 90       	pop	r15
    29f0:	ef 90       	pop	r14
    29f2:	df 90       	pop	r13
    29f4:	cf 90       	pop	r12
    29f6:	bf 90       	pop	r11
    29f8:	af 90       	pop	r10
    29fa:	9f 90       	pop	r9
    29fc:	8f 90       	pop	r8
    29fe:	7f 90       	pop	r7
    2a00:	6f 90       	pop	r6
    2a02:	5f 90       	pop	r5
    2a04:	4f 90       	pop	r4
    2a06:	3f 90       	pop	r3
    2a08:	2f 90       	pop	r2
    2a0a:	08 95       	ret

00002a0c <UART_User_Interfacing>:


void UART_User_Interfacing()
{
    2a0c:	cf 93       	push	r28
	unsigned char uart_var = 0;
	unsigned char option = 0;
	unsigned char brightness_level = 0;
	while(option != Ascii_4)
	{
		UART_Send_String ("1. Controlling Lighting (Room 1 to Room 5)");
    2a0e:	88 e0       	ldi	r24, 0x08	; 8
    2a10:	94 e0       	ldi	r25, 0x04	; 4
    2a12:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
		UART_Transmit('\r');
    2a16:	8d e0       	ldi	r24, 0x0D	; 13
    2a18:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		UART_Send_String ("2. Dimming lamp");
    2a1c:	83 e3       	ldi	r24, 0x33	; 51
    2a1e:	94 e0       	ldi	r25, 0x04	; 4
    2a20:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
		UART_Transmit('\r');
    2a24:	8d e0       	ldi	r24, 0x0D	; 13
    2a26:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		UART_Send_String ("3. Close the Door");
    2a2a:	8f e7       	ldi	r24, 0x7F	; 127
    2a2c:	97 e0       	ldi	r25, 0x07	; 7
    2a2e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
		UART_Transmit('\r');
    2a32:	8d e0       	ldi	r24, 0x0D	; 13
    2a34:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		UART_Send_String ("4. Log out");
    2a38:	81 e9       	ldi	r24, 0x91	; 145
    2a3a:	97 e0       	ldi	r25, 0x07	; 7
    2a3c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
		UART_Transmit('\r');
    2a40:	8d e0       	ldi	r24, 0x0D	; 13
    2a42:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		UART_Transmit('\r');
    2a46:	8d e0       	ldi	r24, 0x0D	; 13
    2a48:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		
		
		UART_Send_String ("Your Choice : ");
    2a4c:	8d ec       	ldi	r24, 0xCD	; 205
    2a4e:	91 e0       	ldi	r25, 0x01	; 1
    2a50:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
		
		uart_var = 0;
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
		{
			uart_var = UART_Receive();
    2a54:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
    2a58:	c8 2f       	mov	r28, r24
			UART_Transmit(uart_var);
    2a5a:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Transmit('\r');
    2a5e:	8d e0       	ldi	r24, 0x0D	; 13
    2a60:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Transmit('\r');
    2a64:	8d e0       	ldi	r24, 0x0D	; 13
    2a66:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		
		
		UART_Send_String ("Your Choice : ");
		
		uart_var = 0;
		while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    2a6a:	80 ed       	ldi	r24, 0xD0	; 208
    2a6c:	8c 0f       	add	r24, r28
    2a6e:	8a 30       	cpi	r24, 0x0A	; 10
    2a70:	88 f7       	brcc	.-30     	; 0x2a54 <UART_User_Interfacing+0x48>
    2a72:	1d c0       	rjmp	.+58     	; 0x2aae <UART_User_Interfacing+0xa2>
			UART_Transmit('\r');
		}
	
		while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_4)))
		{
			UART_Send_String ("Please Choose only from 1 to 4");
    2a74:	8c e9       	ldi	r24, 0x9C	; 156
    2a76:	97 e0       	ldi	r25, 0x07	; 7
    2a78:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Transmit('\r');
    2a7c:	8d e0       	ldi	r24, 0x0D	; 13
    2a7e:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Transmit('\r');
    2a82:	8d e0       	ldi	r24, 0x0D	; 13
    2a84:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			uart_var = 0;
			UART_Send_String("Your choice : ");
    2a88:	88 e3       	ldi	r24, 0x38	; 56
    2a8a:	93 e0       	ldi	r25, 0x03	; 3
    2a8c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
			{
				uart_var = UART_Receive();
    2a90:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
    2a94:	c8 2f       	mov	r28, r24
				UART_Transmit(uart_var);
    2a96:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				UART_Transmit('\r');
    2a9a:	8d e0       	ldi	r24, 0x0D	; 13
    2a9c:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				UART_Transmit('\r');
    2aa0:	8d e0       	ldi	r24, 0x0D	; 13
    2aa2:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Send_String ("Please Choose only from 1 to 4");
			UART_Transmit('\r');
			UART_Transmit('\r');
			uart_var = 0;
			UART_Send_String("Your choice : ");
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    2aa6:	80 ed       	ldi	r24, 0xD0	; 208
    2aa8:	8c 0f       	add	r24, r28
    2aaa:	8a 30       	cpi	r24, 0x0A	; 10
    2aac:	88 f7       	brcc	.-30     	; 0x2a90 <UART_User_Interfacing+0x84>
			UART_Transmit(uart_var);
			UART_Transmit('\r');
			UART_Transmit('\r');
		}
	
		while (!((uart_var >= Ascii_1) && (uart_var <= Ascii_4)))
    2aae:	8f ec       	ldi	r24, 0xCF	; 207
    2ab0:	8c 0f       	add	r24, r28
    2ab2:	84 30       	cpi	r24, 0x04	; 4
    2ab4:	f8 f6       	brcc	.-66     	; 0x2a74 <UART_User_Interfacing+0x68>
			}
		}
		option = uart_var;
	
	
		if(option == '1')
    2ab6:	c1 33       	cpi	r28, 0x31	; 49
    2ab8:	19 f4       	brne	.+6      	; 0x2ac0 <UART_User_Interfacing+0xb4>
		{
			UART_Rooms_Leds_Control();
    2aba:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <UART_Rooms_Leds_Control>
    2abe:	a7 cf       	rjmp	.-178    	; 0x2a0e <UART_User_Interfacing+0x2>
		}
		else if(option == '2')
    2ac0:	c2 33       	cpi	r28, 0x32	; 50
    2ac2:	09 f0       	breq	.+2      	; 0x2ac6 <UART_User_Interfacing+0xba>
    2ac4:	66 c0       	rjmp	.+204    	; 0x2b92 <UART_User_Interfacing+0x186>
		{
			UART_Send_String ("Please Choose one of the following brightness percentages :  ");
    2ac6:	86 ee       	ldi	r24, 0xE6	; 230
    2ac8:	94 e0       	ldi	r25, 0x04	; 4
    2aca:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Transmit('\r');
    2ace:	8d e0       	ldi	r24, 0x0D	; 13
    2ad0:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Transmit('\r');
    2ad4:	8d e0       	ldi	r24, 0x0D	; 13
    2ad6:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		
			UART_Send_String ("0. 0% (Turn Off Led)");
    2ada:	84 e2       	ldi	r24, 0x24	; 36
    2adc:	95 e0       	ldi	r25, 0x05	; 5
    2ade:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Transmit('\r');
    2ae2:	8d e0       	ldi	r24, 0x0D	; 13
    2ae4:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Send_String ("1. 25% ");
    2ae8:	89 e3       	ldi	r24, 0x39	; 57
    2aea:	95 e0       	ldi	r25, 0x05	; 5
    2aec:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Transmit('\r');
    2af0:	8d e0       	ldi	r24, 0x0D	; 13
    2af2:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Send_String ("2. 50% ");
    2af6:	81 e4       	ldi	r24, 0x41	; 65
    2af8:	95 e0       	ldi	r25, 0x05	; 5
    2afa:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Transmit('\r');
    2afe:	8d e0       	ldi	r24, 0x0D	; 13
    2b00:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Send_String ("3. 75% ");
    2b04:	89 e4       	ldi	r24, 0x49	; 73
    2b06:	95 e0       	ldi	r25, 0x05	; 5
    2b08:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Transmit('\r');
    2b0c:	8d e0       	ldi	r24, 0x0D	; 13
    2b0e:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Send_String ("4. 100%  (Maximum Power)");
    2b12:	81 e5       	ldi	r24, 0x51	; 81
    2b14:	95 e0       	ldi	r25, 0x05	; 5
    2b16:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Transmit('\r');
    2b1a:	8d e0       	ldi	r24, 0x0D	; 13
    2b1c:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
		
			UART_Send_String("Your choice : ");
    2b20:	88 e3       	ldi	r24, 0x38	; 56
    2b22:	93 e0       	ldi	r25, 0x03	; 3
    2b24:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			uart_var = 0;
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
			{
				uart_var = UART_Receive();
    2b28:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
    2b2c:	c8 2f       	mov	r28, r24
				UART_Transmit(uart_var);
    2b2e:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				UART_Transmit('\r');
    2b32:	8d e0       	ldi	r24, 0x0D	; 13
    2b34:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				UART_Transmit('\r');
    2b38:	8d e0       	ldi	r24, 0x0D	; 13
    2b3a:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
			UART_Send_String ("4. 100%  (Maximum Power)");
			UART_Transmit('\r');
		
			UART_Send_String("Your choice : ");
			uart_var = 0;
			while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    2b3e:	80 ed       	ldi	r24, 0xD0	; 208
    2b40:	8c 0f       	add	r24, r28
    2b42:	8a 30       	cpi	r24, 0x0A	; 10
    2b44:	88 f7       	brcc	.-30     	; 0x2b28 <UART_User_Interfacing+0x11c>
    2b46:	1d c0       	rjmp	.+58     	; 0x2b82 <UART_User_Interfacing+0x176>
				UART_Transmit('\r');
			}
		
			while (!((uart_var >= Ascii_0) && (uart_var <= Ascii_4)))
			{
				UART_Send_String ("Please Choose only from 0 to 4");
    2b48:	8a e6       	ldi	r24, 0x6A	; 106
    2b4a:	95 e0       	ldi	r25, 0x05	; 5
    2b4c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
				UART_Transmit('\r');
    2b50:	8d e0       	ldi	r24, 0x0D	; 13
    2b52:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				UART_Transmit('\r');
    2b56:	8d e0       	ldi	r24, 0x0D	; 13
    2b58:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				uart_var = 0;
				UART_Send_String("Your choice : ");
    2b5c:	88 e3       	ldi	r24, 0x38	; 56
    2b5e:	93 e0       	ldi	r25, 0x03	; 3
    2b60:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
				{
					uart_var = UART_Receive();
    2b64:	0e 94 44 0c 	call	0x1888	; 0x1888 <UART_Receive>
    2b68:	c8 2f       	mov	r28, r24
					UART_Transmit(uart_var);
    2b6a:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Transmit('\r');
    2b6e:	8d e0       	ldi	r24, 0x0D	; 13
    2b70:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
					UART_Transmit('\r');
    2b74:	8d e0       	ldi	r24, 0x0D	; 13
    2b76:	0e 94 40 0c 	call	0x1880	; 0x1880 <UART_Transmit>
				UART_Send_String ("Please Choose only from 0 to 4");
				UART_Transmit('\r');
				UART_Transmit('\r');
				uart_var = 0;
				UART_Send_String("Your choice : ");
				while(!(uart_var >= Ascii_0	&& uart_var <= Ascii_9))
    2b7a:	80 ed       	ldi	r24, 0xD0	; 208
    2b7c:	8c 0f       	add	r24, r28
    2b7e:	8a 30       	cpi	r24, 0x0A	; 10
    2b80:	88 f7       	brcc	.-30     	; 0x2b64 <UART_User_Interfacing+0x158>
				UART_Transmit(uart_var);
				UART_Transmit('\r');
				UART_Transmit('\r');
			}
		
			while (!((uart_var >= Ascii_0) && (uart_var <= Ascii_4)))
    2b82:	80 ed       	ldi	r24, 0xD0	; 208
    2b84:	8c 0f       	add	r24, r28
    2b86:	85 30       	cpi	r24, 0x05	; 5
    2b88:	f8 f6       	brcc	.-66     	; 0x2b48 <UART_User_Interfacing+0x13c>
				}
			}
		
			brightness_level = uart_var;
			uart_var = 0;
			DIMMER_CONTROL(brightness_level);	
    2b8a:	8c 2f       	mov	r24, r28
    2b8c:	0e 94 c5 0a 	call	0x158a	; 0x158a <DIMMER_CONTROL>
    2b90:	3e cf       	rjmp	.-388    	; 0x2a0e <UART_User_Interfacing+0x2>
		}
	
	
		else if(option == '3')
    2b92:	c3 33       	cpi	r28, 0x33	; 51
    2b94:	09 f5       	brne	.+66     	; 0x2bd8 <UART_User_Interfacing+0x1cc>
		{
			closeDoor();
    2b96:	0e 94 01 0b 	call	0x1602	; 0x1602 <closeDoor>
			UART_Send_String("The door is closed");
    2b9a:	8a ea       	ldi	r24, 0xAA	; 170
    2b9c:	95 e0       	ldi	r25, 0x05	; 5
    2b9e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
			UART_Send_String("\r");
    2ba2:	89 e8       	ldi	r24, 0x89	; 137
    2ba4:	95 e0       	ldi	r25, 0x05	; 5
    2ba6:	0e 94 4c 0c 	call	0x1898	; 0x1898 <UART_Send_String>
		
			LCD_Write_String("  The door is");
    2baa:	85 ea       	ldi	r24, 0xA5	; 165
    2bac:	92 e0       	ldi	r25, 0x02	; 2
    2bae:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
			LCD_Send_CMD(Row_2_pos_0);
    2bb2:	80 ec       	ldi	r24, 0xC0	; 192
    2bb4:	0e 94 11 06 	call	0xc22	; 0xc22 <LCD_Send_CMD>
			LCD_Write_String("    Closed");
    2bb8:	83 eb       	ldi	r24, 0xB3	; 179
    2bba:	92 e0       	ldi	r25, 0x02	; 2
    2bbc:	0e 94 9f 06 	call	0xd3e	; 0xd3e <LCD_Write_String>
    2bc0:	2f ef       	ldi	r18, 0xFF	; 255
    2bc2:	83 ed       	ldi	r24, 0xD3	; 211
    2bc4:	90 e3       	ldi	r25, 0x30	; 48
    2bc6:	21 50       	subi	r18, 0x01	; 1
    2bc8:	80 40       	sbci	r24, 0x00	; 0
    2bca:	90 40       	sbci	r25, 0x00	; 0
    2bcc:	e1 f7       	brne	.-8      	; 0x2bc6 <UART_User_Interfacing+0x1ba>
    2bce:	00 c0       	rjmp	.+0      	; 0x2bd0 <UART_User_Interfacing+0x1c4>
    2bd0:	00 00       	nop
			_delay_ms(1000);
			LCD_Clear_Screen();
    2bd2:	0e 94 cb 06 	call	0xd96	; 0xd96 <LCD_Clear_Screen>
    2bd6:	1b cf       	rjmp	.-458    	; 0x2a0e <UART_User_Interfacing+0x2>
void UART_User_Interfacing()
{
	unsigned char uart_var = 0;
	unsigned char option = 0;
	unsigned char brightness_level = 0;
	while(option != Ascii_4)
    2bd8:	c4 33       	cpi	r28, 0x34	; 52
    2bda:	09 f0       	breq	.+2      	; 0x2bde <UART_User_Interfacing+0x1d2>
    2bdc:	18 cf       	rjmp	.-464    	; 0x2a0e <UART_User_Interfacing+0x2>
	
		else
		{
		}
	}
}
    2bde:	cf 91       	pop	r28
    2be0:	08 95       	ret

00002be2 <_exit>:
    2be2:	f8 94       	cli

00002be4 <__stop_program>:
    2be4:	ff cf       	rjmp	.-2      	; 0x2be4 <__stop_program>
